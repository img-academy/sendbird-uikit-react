{"version":3,"file":"context.js","sources":["../../src/smart-components/MessageSearch/context/dux/actionTypes.ts","../../src/smart-components/MessageSearch/context/dux/reducers.ts","../../src/smart-components/MessageSearch/context/dux/initialState.ts","../../src/smart-components/MessageSearch/context/hooks/useSetChannel.ts","../../src/smart-components/MessageSearch/context/hooks/useGetSearchedMessages.ts","../../src/smart-components/MessageSearch/context/hooks/useScrollCallback.ts","../../src/smart-components/MessageSearch/context/hooks/useSearchStringEffect.ts","../../src/smart-components/MessageSearch/context/MessageSearchProvider.tsx"],"sourcesContent":["export const GET_SEARCHED_MESSAGES = 'GET_SEARCHED_MESSAGES';\nexport const GET_NEXT_SEARCHED_MESSAGES = 'GET_NEXT_SEARCHED_MESSAGES';\nexport const START_MESSAGE_SEARCH = 'START_MESSAGE_SEARCH';\nexport const START_GETTING_SEARCHED_MESSAGES = 'START_GETTING_SEARCHED_MESSAGES';\nexport const SET_QUERY_INVALID = 'SET_QUERY_INVALID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const CHANNEL_INVALID = 'CHANNEL_INVALID';\nexport const RESET_SEARCH_STRING = 'RESET_SEARCH_STRING';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\ninterface ActionInterface {\n  type: string;\n  /* eslint-disable @typescript-eslint/no-explicit-any */\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const currentChannel = action.payload;\n      return {\n        ...state,\n        currentChannel,\n        initialized: true,\n      };\n    }\n    case actionTypes.CHANNEL_INVALID: {\n      return {\n        ...state,\n        currentChannel: null,\n        initialized: false,\n      };\n    }\n    case actionTypes.GET_SEARCHED_MESSAGES: {\n      const { messages, createdQuery } = action.payload;\n      if (\n        createdQuery\n        && createdQuery.channelUrl === (state?.currentMessageSearchQuery as SendbirdUIKit.MessageSearchQueryType).channelUrl\n        && createdQuery.key === (state?.currentMessageSearchQuery as SendbirdUIKit.MessageSearchQueryType).key\n      ) {\n        return {\n          ...state,\n          loading: false,\n          isInvalid: false,\n          allMessages: [...messages],\n          hasMoreResult: (state?.currentMessageSearchQuery as SendbirdUIKit.MessageSearchQueryType).hasNext,\n        };\n      }\n      return { ...state };\n    }\n    case actionTypes.SET_QUERY_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      }\n    }\n    case actionTypes.START_MESSAGE_SEARCH: {\n      return {\n        ...state,\n        isInvalid: false,\n        loading: false,\n      }\n    }\n    case actionTypes.START_GETTING_SEARCHED_MESSAGES: {\n      const currentMessageSearchQuery = action.payload;\n      return {\n        ...state,\n        loading: true,\n        currentMessageSearchQuery,\n      };\n    }\n    case actionTypes.GET_NEXT_SEARCHED_MESSAGES: {\n      const messages = action.payload;\n      return {\n        ...state,\n        allMessages: [...state.allMessages, ...messages],\n        hasMoreResult: (state?.currentMessageSearchQuery as SendbirdUIKit.MessageSearchQueryType).hasNext,\n      };\n    }\n    case actionTypes.RESET_SEARCH_STRING: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n    default: {\n      return state;\n    }\n  }\n}\n","import SendBird from 'sendbird';\nimport {\n  ClientFileMessage,\n  ClientUserMessage,\n} from '../../../../types';\n\nexport interface State {\n  allMessages: Array<ClientFileMessage | ClientUserMessage>;\n  loading: boolean;\n  isInvalid: boolean;\n  initialized: boolean;\n  currentChannel: SendBird.GroupChannel;\n  currentMessageSearchQuery: SendBird.MessageSearchQuery | SendBird.MessageSearchQueryOptions;\n  hasMoreResult: boolean;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  isInvalid: false,\n  initialized: false,\n  currentChannel: null,\n  currentMessageSearchQuery: null,\n  hasMoreResult: false,\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  channelUrl: string;\n  sdkInit: boolean;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && (sdk.OpenChannel || sdk.GroupChannel)) {\n      sdk.GroupChannel.getChannel(channelUrl, (groupChannel, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useSetChannel group channel', groupChannel);\n          messageSearchDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        } else {\n          messageSearchDispatcher({\n            type: messageActionTypes.CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendbirdUIKit from '../../../../index';\nimport SendBird from 'sendbird';\n\ninterface MainProps {\n  currentChannel: SendbirdUIKit.GroupChannelType;\n  channelUrl: string;\n  requestString?: string;\n  messageSearchQuery?: SendbirdUIKit.MessageSearchQueryType;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n  retryCount: number;\n}\ninterface ToolProps {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useGetSearchedMessages(\n  { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount }: MainProps,\n  { sdk, logger, messageSearchDispatcher }: ToolProps,\n): void {\n  useEffect(() => {\n    messageSearchDispatcher({\n      type: messageActionTypes.START_MESSAGE_SEARCH,\n      payload: null,\n    });\n    if (sdk && channelUrl && sdk.createMessageSearchQuery && currentChannel) {\n      if (requestString) {\n        const inputSearchMessageQueryObject = {\n          ...messageSearchQuery,\n          order: 'ts' as const,\n          channelUrl,\n          messageTimestampFrom: currentChannel.invitedAt,\n        };\n        const createdQuery = sdk.createMessageSearchQuery(requestString, inputSearchMessageQueryObject);\n        createdQuery.next((messages, error) => {\n          if (!error) {\n            logger.info('MessageSearch | useGetSearchedMessages: succeeded getting messages', messages);\n            messageSearchDispatcher({\n              type: messageActionTypes.GET_SEARCHED_MESSAGES,\n              payload: {\n                messages,\n                createdQuery,\n              },\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(messages, null);\n            }\n          } else {\n            logger.warning('MessageSearch | useGetSearchedMessages: getting failed', error);\n            messageSearchDispatcher({\n              type: messageActionTypes.SET_QUERY_INVALID,\n              payload: null,\n            });\n            if (onResultLoaded && typeof onResultLoaded === 'function') {\n              onResultLoaded(null, error);\n            }\n          }\n        });\n        messageSearchDispatcher({\n          type: messageActionTypes.START_GETTING_SEARCHED_MESSAGES,\n          payload: createdQuery,\n        });\n      } else {\n        logger.info('MessageSearch | useGetSeasrchedMessages: search string is empty');\n      }\n    }\n  }, [channelUrl, messageSearchQuery, requestString, currentChannel, retryCount]);\n}\n\nexport default useGetSearchedMessages;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface MainProps {\n  currentMessageSearchQuery: SendBird.MessageSearchQuery;\n  hasMoreResult: boolean;\n  onResultLoaded?: (\n    messages?: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    error?: SendbirdUIKit.SendbirdError,\n  ) => void;\n}\ninterface ToolProps {\n  logger: SendbirdUIKit.Logger;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\nexport type CallbackReturn = (\n  callback: (\n    messages: Array<SendBird.UserMessage | SendBird.FileMessage | SendBird.AdminMessage>,\n    /* eslint-disable @typescript-eslint/no-explicit-any*/\n    error: any,\n  ) => void\n) => void;\n\nfunction useScrollCallback(\n  { currentMessageSearchQuery, hasMoreResult, onResultLoaded }: MainProps,\n  { logger, messageSearchDispatcher }: ToolProps,\n): CallbackReturn {\n  return useCallback((cb) => {\n    if (!hasMoreResult) {\n      logger.warning('MessageSearch | useScrollCallback: no more searched results', hasMoreResult);\n    }\n    if (currentMessageSearchQuery && currentMessageSearchQuery.hasNext) {\n      currentMessageSearchQuery.next((messages, error) => {\n        if (!error) {\n          logger.info('MessageSearch | useScrollCallback: succeeded getting searched messages', messages);\n          messageSearchDispatcher({\n            type: messageActionTypes.GET_NEXT_SEARCHED_MESSAGES,\n            payload: messages,\n          });\n          cb(messages, null);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(messages, null);\n          }\n        } else {\n          logger.warning('MessageSearch | useScrollCallback: failed getting searched messages', error);\n          cb(null, error);\n          if (onResultLoaded && typeof onResultLoaded === 'function') {\n            onResultLoaded(null, error);\n          }\n        }\n      });\n    } else {\n      logger.warning('MessageSearch | useScrollCallback: no currentMessageSearchQuery');\n    }\n  }, [currentMessageSearchQuery, hasMoreResult]);\n}\n\nexport default useScrollCallback;\n","import { useState, useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  searchString: string;\n}\n\ninterface StaticParams {\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n}\n\nconst DEBOUNCING_TIME = 500;\n\nfunction useSearchStringEffect(\n  { searchString }: DynamicParams,\n  { messageSearchDispatcher }: StaticParams,\n): string {\n  const [requestString, setRequestString] = useState('');\n  const [debouncingTimer, setDebouncingTimer] = useState(null);\n  useEffect(() => {\n    clearTimeout(debouncingTimer);\n    if (searchString) {\n      setDebouncingTimer(\n        setTimeout(() => {\n          setRequestString(searchString);\n        }, DEBOUNCING_TIME)\n      );\n    } else {\n      setRequestString('');\n      messageSearchDispatcher({\n        type: messageActionTypes.RESET_SEARCH_STRING,\n        payload: '',\n      });\n    }\n  }, [searchString]);\n  return requestString;\n}\n\nexport default useSearchStringEffect;\n","import React, {\n  useRef,\n  useState,\n  useReducer,\n} from 'react';\nimport SendBird from 'sendbird';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { ClientSentMessages } from '../../../types';\n\nimport messageSearchReducer from './dux/reducers';\nimport messageSearchInitialState from './dux/initialState';\nimport { State as MessageSearchReducerState } from './dux/initialState';\n\nimport useSetChannel from './hooks/useSetChannel';\nimport useGetSearchMessages from './hooks/useGetSearchedMessages';\nimport useScrollCallback, {\n  CallbackReturn as UseScrollCallbackType,\n} from './hooks/useScrollCallback';\nimport useSearchStringEffect from './hooks/useSearchStringEffect';\n\nexport interface MessageSearchProviderProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  searchString?: string;\n  requestString?: string;\n  messageSearchQuery?: SendBird.MessageSearchQueryOptions;\n  onResultLoaded?(messages?: Array<ClientSentMessages>, error?: SendBird.SendBirdError): void;\n  onResultClick?(message: ClientSentMessages): void;\n}\n\ninterface MessageSearchProviderInterface extends MessageSearchProviderProps {\n  retryCount: number;\n  setRetryCount: React.Dispatch<React.SetStateAction<number>>;\n  selectedMessageId: number;\n  setSelectedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageSearchDispatcher: ({ type: string, payload: any }) => void;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  allMessages: MessageSearchReducerState['allMessages'];\n  loading: boolean;\n  isInvalid: boolean;\n  currentChannel: SendBird.GroupChannel;\n  currentMessageSearchQuery: SendBird.MessageSearchQuery;\n  hasMoreResult: boolean;\n  onScroll: UseScrollCallbackType;\n  handleRetryToConnect: () => void;\n  handleOnScroll: (e: React.BaseSyntheticEvent) => void;\n}\n\nconst MessageSearchContext = React.createContext<MessageSearchProviderInterface|null>(undefined);\n\nconst MessageSearchProvider: React.FC<MessageSearchProviderProps> = (props: MessageSearchProviderProps) => {\n  const {\n    // message search props\n    channelUrl,\n    searchString,\n    messageSearchQuery,\n    onResultLoaded,\n    onResultClick,\n  } = props;\n\n  const globalState = useSendbirdStateContext();\n\n  // hook variables\n  const [retryCount, setRetryCount] = useState(0); // this is a trigger flag for activating useGetSearchMessages\n  const [selectedMessageId, setSelectedMessageId] = useState(0);\n  const [messageSearchStore, messageSearchDispatcher] = useReducer(messageSearchReducer, messageSearchInitialState);\n  const {\n    allMessages,\n    loading,\n    isInvalid,\n    currentChannel,\n    currentMessageSearchQuery,\n    hasMoreResult,\n  } = messageSearchStore;\n\n  const logger = globalState?.config?.logger;\n  const sdk = globalState?.stores?.sdkStore?.sdk;\n  const sdkInit = globalState?.stores?.sdkStore?.initialized;\n  const scrollRef = useRef(null);\n  const handleOnScroll = (e: React.BaseSyntheticEvent) => {\n    const scrollElement = e.target as HTMLDivElement;\n    const {\n      scrollTop,\n      scrollHeight,\n      clientHeight,\n    } = scrollElement;\n\n    if (!hasMoreResult) {\n      return;\n    }\n    if (scrollTop + clientHeight >= scrollHeight) {\n      onScroll(() => {\n        // after load more searched messages\n      });\n    }\n  };\n\n  useSetChannel(\n    { channelUrl, sdkInit },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const requestString = useSearchStringEffect({ searchString }, { messageSearchDispatcher });\n\n  useGetSearchMessages(\n    { currentChannel, channelUrl, requestString, messageSearchQuery, onResultLoaded, retryCount },\n    { sdk, logger, messageSearchDispatcher },\n  );\n\n  const onScroll = useScrollCallback(\n    { currentMessageSearchQuery, hasMoreResult, onResultLoaded },\n    { logger, messageSearchDispatcher },\n  );\n\n  const handleRetryToConnect = () => {\n    setRetryCount(retryCount + 1);\n  };\n  return (\n    <MessageSearchContext.Provider value={{\n      channelUrl,\n      searchString,\n      requestString,\n      messageSearchQuery,\n      onResultLoaded,\n      onResultClick,\n      retryCount,\n      setRetryCount,\n      selectedMessageId,\n      setSelectedMessageId,\n      messageSearchDispatcher,\n      allMessages,\n      loading,\n      isInvalid,\n      currentChannel,\n      currentMessageSearchQuery,\n      hasMoreResult,\n      onScroll,\n      scrollRef,\n      handleRetryToConnect,\n      handleOnScroll,\n    }}>\n      {props?.children}\n    </MessageSearchContext.Provider>\n  );\n}\n\nexport type UseMessageSearchType = () => MessageSearchProviderInterface;\nconst useMessageSearch: UseMessageSearchType = () => React.useContext(MessageSearchContext);\n\nexport { MessageSearchProvider, useMessageSearch };\n"],"names":["GET_SEARCHED_MESSAGES","GET_NEXT_SEARCHED_MESSAGES","START_MESSAGE_SEARCH","START_GETTING_SEARCHED_MESSAGES","SET_QUERY_INVALID","SET_CURRENT_CHANNEL","CHANNEL_INVALID","RESET_SEARCH_STRING","reducer","state","action","type","actionTypes","currentChannel","payload","initialized","_a","messages","createdQuery","channelUrl","currentMessageSearchQuery","key","loading","isInvalid","allMessages","hasMoreResult","hasNext","initialState","useSetChannel","_b","sdkInit","sdk","logger","messageSearchDispatcher","useEffect","OpenChannel","GroupChannel","getChannel","groupChannel","error","info","messageActionTypes","useGetSearchedMessages","requestString","messageSearchQuery","onResultLoaded","retryCount","createMessageSearchQuery","inputSearchMessageQueryObject","order","messageTimestampFrom","invitedAt","createdQuery_1","next","warning","useScrollCallback","useCallback","cb","DEBOUNCING_TIME","useSearchStringEffect","searchString","_c","useState","setRequestString","_d","debouncingTimer","setDebouncingTimer","clearTimeout","setTimeout","MessageSearchContext","React","createContext","undefined","MessageSearchProvider","props","onResultClick","globalState","useSendbirdStateContext","_f","setRetryCount","_g","selectedMessageId","setSelectedMessageId","_h","useReducer","messageSearchReducer","messageSearchInitialState","messageSearchStore","config","stores","sdkStore","scrollRef","useRef","handleOnScroll","e","scrollElement","target","scrollTop","scrollHeight","clientHeight","onScroll","useGetSearchMessages","handleRetryToConnect","children","useMessageSearch","useContext"],"mappings":"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"}