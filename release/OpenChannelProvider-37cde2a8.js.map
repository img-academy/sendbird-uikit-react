{"version":3,"file":"OpenChannelProvider-37cde2a8.js","sources":["../src/smart-components/OpenChannel/context/utils.ts","../src/smart-components/OpenChannel/context/dux/actionTypes.ts","../src/smart-components/OpenChannel/context/dux/reducers.ts","../src/smart-components/OpenChannel/context/dux/initialState.ts","../src/smart-components/OpenChannel/context/hooks/useSetChannel.ts","../src/smart-components/OpenChannel/context/hooks/useHandleChannelEvents.ts","../src/smart-components/OpenChannel/context/hooks/useInitialMessagesFetch.ts","../src/smart-components/OpenChannel/context/hooks/useScrollCallback.ts","../src/smart-components/OpenChannel/context/hooks/useCheckScrollBottom.ts","../src/smart-components/OpenChannel/context/hooks/useSendMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useFileUploadCallback.ts","../src/smart-components/OpenChannel/context/hooks/useUpdateMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useDeleteMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useResendMessageCallback.ts","../src/smart-components/OpenChannel/context/hooks/useTrimMessageList.ts","../src/smart-components/OpenChannel/context/OpenChannelProvider.tsx"],"sourcesContent":["import format from 'date-fns/format';\nimport Sendbird from 'sendbird';\nimport SendbirdUIKit from '../../../index';\n\nexport const getMessageCreatedAt = (message: SendbirdUIKit.EveryMessage): string => format(message.createdAt, 'p');\n\nexport const shouldFetchMore = (messageLength: number, maxMessages: number): boolean => {\n  if (typeof maxMessages !== 'number') {\n    return true;\n  }\n\n  if (typeof maxMessages === 'number'\n    && maxMessages > messageLength\n  ) {\n    return true;\n  }\n  return false;\n}\n\nexport const scrollIntoLast = (intialTry = 0): void => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-openchannel-conversation-scroll');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const isSameGroup = (\n  message: SendbirdUIKit.EveryMessage,\n  comparingMessage: SendbirdUIKit.EveryMessage,\n): boolean => {\n  if (!(\n    message\n    && comparingMessage\n    && message?.messageType !== 'admin'\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false\n  }\n\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage: SendbirdUIKit.EveryMessage,\n  currMessage: SendbirdUIKit.EveryMessage,\n  nextMessage: SendbirdUIKit.EveryMessage,\n): [boolean, boolean] => (\n  [\n    isSameGroup(prevMessage, currMessage),\n    isSameGroup(currMessage, nextMessage),\n  ]\n);\n\nexport const kFormatter = (num: number): string => {\n  if (Math.abs(num) > 999999) {\n    return `${(Math.abs(num) / 1000000).toFixed(1)}M`;\n  }\n\n  if (Math.abs(num) > 999) {\n    return `${(Math.abs(num) / 1000).toFixed(1)}K`;\n  }\n\n  return `${num}`;\n};\n\nexport const isOperator = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { operators } = openChannel;\n  if (operators.map(operator => operator.userId).indexOf(userId) < 0) {\n    return false;\n  }\n  return true;\n};\n\nexport const isDisabledBecauseFrozen = (openChannel: Sendbird.OpenChannel, userId: string): boolean => {\n  const { isFrozen } = openChannel;\n  return isFrozen && !isOperator(openChannel, userId);\n};\n\nexport const isDisabledBecauseMuted = (mutedParticipantIds: Array<string>, userId: string): boolean => {\n  return mutedParticipantIds.indexOf(userId) > -1;\n};\n\nexport const fetchWithListQuery = (\n  listQuery: SendbirdUIKit.UserListQuery,\n  logger: SendbirdUIKit.Logger,\n  eachQueryNextCallback: (users: Array<Sendbird.User>) => void,\n): void => {\n  const fetchList = (query) => {\n    const { hasNext } = query;\n    if (hasNext) {\n      query.next((error, users) => {\n        if (!error) {\n          eachQueryNextCallback(users);\n          fetchList(query);\n        } else {\n          logger.warning('OpenChannel | FetchUserList failed', error);\n        }\n      });\n    } else {\n      logger.info('OpenChannel | FetchUserList finished');\n    }\n  };\n  logger.info('OpenChannel | FetchUserList start', listQuery);\n  fetchList(listQuery);\n};\n\nexport const pxToNumber = (px: string | number): number | void => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n","export const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const RESET_MESSAGES = 'RESET_MESSAGES';\nexport const GET_PREV_MESSAGES_START = 'GET_PREV_MESSAGES_START';\nexport const GET_PREV_MESSAGES_SUCESS = 'GET_PREV_MESSAGES_SUCESS';\nexport const GET_PREV_MESSAGES_FAIL = 'GET_PREV_MESSAGES_FAIL';\nexport const SENDING_MESSAGE_FAILED = 'SENDING_MESSAGE_FAILED';\nexport const SENDING_MESSAGE_SUCCEEDED = 'SENDING_MESSAGE_SUCCEEDED';\nexport const SENDING_MESSAGE_START = 'SENDING_MESSAGE_START';\nexport const RESENDING_MESSAGE_START = 'RESENDING_MESSAGE_START';\nexport const FETCH_PARTICIPANT_LIST = 'FETCH_PARTICIPANT_LIST';\nexport const FETCH_BANNED_USER_LIST = 'FETCH_BANNED_USER_LIST';\nexport const FETCH_MUTED_USER_LIST= 'FETCH_MUTED_USER_LIST';\nexport const TRIM_MESSAGE_LIST= 'TRIM_MESSAGE_LIST';\n\n// event handlers\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\nexport const ON_OPERATOR_UPDATED = 'ON_OPERATOR_UPDATED';\nexport const ON_USER_ENTERED = 'ON_USER_ENTERED';\nexport const ON_USER_EXITED = 'ON_USER_EXITED';\nexport const ON_USER_MUTED = 'ON_USER_MUTED';\nexport const ON_USER_UNMUTED = 'ON_USER_UNMUTED';\nexport const ON_USER_BANNED = 'ON_USER_BANNED';\nexport const ON_USER_UNBANNED = 'ON_USER_UNBANNED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_META_DATA_CREATED = 'ON_META_DATA_CREATED';\nexport const ON_META_DATA_UPDATED = 'ON_META_DATA_UPDATED';\nexport const ON_META_DATA_DELETED = 'ON_META_DATA_DELETED';\nexport const ON_META_COUNTERS_CREATED = 'ON_META_COUNTERS_CREATED';\nexport const ON_META_COUNTERS_UPDATED = 'ON_META_COUNTERS_UPDATED';\nexport const ON_META_COUNTERS_DELETED = 'ON_META_COUNTERS_DELETED';\nexport const ON_MENTION_RECEIVED = 'ON_MENTION_RECEIVED';\n","import { State as initialStateInterface } from './initialState';\nimport * as actionTypes from './actionTypes';\n\nimport compareIds from '../../../../utils/compareIds.js';\n\n/* eslint-disable  @typescript-eslint/no-explicit-any */\n// @ts-ignore: Unreachable code error\ninterface ActionInterface {\n  type: string;\n  payload?: any;\n}\n\nexport default function reducer(\n  state: initialStateInterface,\n  action: ActionInterface,\n): initialStateInterface {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES: {\n      return {\n        ...state,\n        allMessages: [],\n      };\n    }\n\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      const gottenChannel = action.payload;\n      const operators = gottenChannel.operators;\n      if (\n        !state.isInvalid\n        && state.currentOpenChannel\n        && state.currentOpenChannel.url\n        && (state.currentOpenChannel.url === gottenChannel.url)\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: gottenChannel,\n        isInvalid: false,\n        operators: operators,\n        participants: operators,\n        bannedParticipantIds: [],\n        mutedParticipantIds: [],\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n      };\n    }\n    case actionTypes.GET_PREV_MESSAGES_SUCESS:\n    case actionTypes.GET_PREV_MESSAGES_FAIL: {\n      const isFailed = (action.type === actionTypes.GET_PREV_MESSAGES_FAIL);\n      const {\n        currentOpenChannel = {},\n        messages = [],\n        hasMore,\n        lastMessageTimestamp,\n      } = action.payload;\n      const actionChannelUrl = currentOpenChannel.url;\n      const receivedMessages = isFailed ? [] : messages;\n      const _hasMore = isFailed ? false : hasMore;\n      const _lastMessageTimestamp = isFailed ? 0 : lastMessageTimestamp;\n\n      const stateChannel = state.currentOpenChannel;\n      const stateChannelUrl = stateChannel.url;\n\n      if (actionChannelUrl !== stateChannelUrl) {\n        return state;\n      }\n\n      const filteredAllMessages = state.allMessages.filter((message) => (\n        !(receivedMessages.find(({ messageId }) => compareIds(messageId, message.messageId)))\n      ));\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMore: _hasMore,\n        lastMessageTimestamp: _lastMessageTimestamp,\n        allMessages: [\n          ...receivedMessages,\n          ...filteredAllMessages,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_START: {\n      const {\n        message,\n        channel,\n      } = action.payload;\n      if (channel.url !== state.currentOpenChannel.url\n        || state.allMessages.some((m) => m.reqId === message.reqId)\n        // Handing failed first than sending start issue\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          message,\n        ],\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_SUCCEEDED: {\n      const sentMessage = action.payload;\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SENDING_MESSAGE_FAILED: {\n      const sentMessage = action.payload;\n      if (!state.allMessages.some((m) => m.reqId === sentMessage.reqId)) {\n        // Handling failed first than sending start issue\n        return {\n          ...state,\n          allMessages: [\n            ...state.allMessages.filter((m) => !compareIds(m.reqId, sentMessage)),\n            sentMessage,\n          ],\n        };\n      } else {\n        return {\n          ...state,\n          allMessages: state.allMessages.map((m) => compareIds(m.reqId, sentMessage.reqId) ? sentMessage : m),\n        };\n      }\n    }\n    case actionTypes.TRIM_MESSAGE_LIST: {\n      const { allMessages } = state;\n      const messageLimit = action.payload?.messageLimit;\n      if (messageLimit\n        && messageLimit > 0\n        && allMessages?.length > messageLimit\n      ) {\n        const sliceAt = allMessages.length - messageLimit;\n        return {\n          ...state,\n          allMessages: allMessages.slice(sliceAt),\n        }\n      }\n      return state;\n    }\n    case actionTypes.RESENDING_MESSAGE_START: {\n      const eventedChannel = action.payload.channel;\n      const resentMessage = action.payload.message;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, resentMessage.reqId) ? resentMessage : m\n        )),\n      };\n    }\n    case actionTypes.FETCH_PARTICIPANT_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedParticipantList = action.payload.users;\n      if (eventedChannel.url !== state.currentOpenChannel.url) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, ...fetchedParticipantList],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_BANNED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedBannedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedBannedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [\n          ...state.bannedParticipantIds,\n          ...fetchedBannedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    case actionTypes.FETCH_MUTED_USER_LIST: {\n      const eventedChannel = action.payload.channel;\n      const fetchedMutedUserList = action.payload.users;\n      if (\n        (eventedChannel.url !== state.currentOpenChannel.url)\n        || !(fetchedMutedUserList.every(user => typeof user.userId === 'string'))\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [\n          ...state.mutedParticipantIds,\n          ...fetchedMutedUserList.map(user => user.userId),\n        ],\n        // Should check duplication\n      };\n    }\n    // events\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const eventedChannel = action.payload.channel;\n      const receivedMessage = action.payload.message;\n\n      const {\n        currentOpenChannel\n      } = state;\n\n      if (\n        !compareIds(eventedChannel.url, currentOpenChannel.url)\n        || (\n          !(state.allMessages.map(\n            (message) => message.messageId).indexOf(receivedMessage.messageId) < 0\n          ))\n      ) {\n        return state;\n      }\n\n      return {\n        ...state,\n        allMessages: [...state.allMessages, receivedMessage],\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedMessage = action.payload.message;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((message) => (\n          message.isIdentical(updatedMessage)\n            ? updatedMessage\n            : message\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED: {\n      const eventedChannel = action.payload.channel;\n      const deletedMessageId = action.payload.messageId;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((message) => (\n          !compareIds(message.messageId, deletedMessageId)\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID: {\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    }\n    case actionTypes.ON_OPERATOR_UPDATED: {\n      const eventedChannel = action.payload.channel;\n      const updatedOperators = action.payload.operators;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: {\n          ...state.currentOpenChannel,\n          operators: updatedOperators,\n        },\n        operators: updatedOperators,\n      };\n    }\n    case actionTypes.ON_USER_ENTERED: {\n      const eventedChannel = action.payload.channel;\n      const enteredUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: [...state.participants, enteredUser],\n      };\n    }\n    case actionTypes.ON_USER_EXITED: {\n      const eventedChannel = action.payload.channel;\n      const exitedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== eventedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        participants: state.participants.filter((participant) => (\n          !compareIds(participant.userId, exitedUser.userId)\n        )),\n      };\n    }\n    case actionTypes.ON_USER_MUTED: {\n      const eventedChannel = action.payload.channel;\n      const mutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(mutedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: [...state.mutedParticipantIds, mutedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNMUTED: {\n      const eventedChannel = action.payload.channel;\n      const unmutedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.mutedParticipantIds.indexOf(unmutedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        mutedParticipantIds: state.mutedParticipantIds.filter(userId => userId !== unmutedUser.userId),\n      };\n    }\n    case actionTypes.ON_USER_BANNED: {\n      const eventedChannel = action.payload.channel;\n      const bannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(bannedUser.userId) >= 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: [...state.bannedParticipantIds, bannedUser.userId],\n      };\n    }\n    case actionTypes.ON_USER_UNBANNED: {\n      const eventedChannel = action.payload.channel;\n      const unbannedUser = action.payload.user;\n      const currentChannel = state.currentOpenChannel;\n      if (\n        !currentChannel\n        || (currentChannel.url && (currentChannel.url !== eventedChannel.url))\n        || state.bannedParticipantIds.indexOf(unbannedUser.userId) < 0\n      ) {\n        return state;\n      }\n      return {\n        ...state,\n        bannedParticipantIds: state.bannedParticipantIds.filter(userId => userId !== unbannedUser.userId),\n      };\n    }\n    case actionTypes.ON_CHANNEL_FROZEN: {\n      const frozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== frozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: true,\n      };\n    }\n    case actionTypes.ON_CHANNEL_UNFROZEN: {\n      const unfrozenChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== unfrozenChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        frozen: false,\n      };\n    }\n    case actionTypes.ON_CHANNEL_CHANGED: {\n      const changedChannel = action.payload;\n      const currentChannel = state.currentOpenChannel;\n      if (!currentChannel || currentChannel.url && (currentChannel.url !== changedChannel.url)) {\n        return state;\n      }\n      return {\n        ...state,\n        currentOpenChannel: changedChannel,\n      };\n    }\n    case actionTypes.ON_META_DATA_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaData = action.payload.metaData;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_DATA_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaDataKeys = action.payload.metaDataKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_CREATED: {\n      // const eventedChannel = action.payload.channel;\n      // const createdMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_UPDATED: {\n      // const eventedChannel = action.payload.channel;\n      // const updatedMetaCounter = action.payload.metaCounter;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_META_COUNTERS_DELETED: {\n      // const eventedChannel = action.payload.channel;\n      // const deletedMetaCounterKeys = action.payload.metaCounterKeys;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    case actionTypes.ON_MENTION_RECEIVED: {\n      // const eventedChannel = action.payload.channel;\n      // const mentionedMessage = action.payload.message;\n      // return {\n      //   ...state\n      // };\n      return state;\n    }\n    default:\n      return state;\n  }\n}\n","import Sendbird from 'sendbird';\nimport { EveryMessage } from '../../../../index';\n\nexport interface State {\n  allMessages: Array<EveryMessage>;\n  loading: boolean;\n  initialized: boolean;\n  currentOpenChannel: Sendbird.OpenChannel;\n  isInvalid: boolean;\n  hasMore: boolean;\n  lastMessageTimestamp: number;\n  frozen: boolean;\n  operators: Array<Sendbird.User>;\n  participants: Array<Sendbird.User>;\n  bannedParticipantIds: Array<string>;\n  mutedParticipantIds: Array<string>;\n}\n\nconst initialState: State = {\n  allMessages: [],\n  loading: false,\n  initialized: false,\n  currentOpenChannel: null,\n  isInvalid: false,\n  hasMore: false,\n  lastMessageTimestamp: 0,\n  frozen: false,\n  operators: [],\n  participants: [],\n  bannedParticipantIds: [],\n  mutedParticipantIds: [],\n};\n\nexport default initialState;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  channelUrl: string;\n  sdkInit: boolean;\n  fetchingParticipants: boolean;\n  userId: string;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSetChannel(\n  { channelUrl, sdkInit, fetchingParticipants, userId }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.OpenChannel) {\n      logger.info('OpenChannel | useSetChannel fetching channel', channelUrl);\n      sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: openChannel,\n          });\n          openChannel.enter((_, error) => {\n            if (error) {\n              logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n              messagesDispatcher({\n                type: messageActionTypes.SET_CHANNEL_INVALID,\n                payload: null,\n              });\n            }\n            if (openChannel.isOperatorWithUserId(userId)) { // only operator has a permission to fetch these list\n              const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n              const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n              utils.fetchWithListQuery(\n                bannedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_BANNED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n              utils.fetchWithListQuery(\n                mutedParticipantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_MUTED_USER_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n            }\n            if (fetchingParticipants) {\n              // fetch participants list\n              const participantListQuery = openChannel.createParticipantListQuery();\n              utils.fetchWithListQuery(\n                participantListQuery,\n                logger,\n                (users) => {\n                  messagesDispatcher({\n                    type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n                    payload: {\n                      channel: openChannel,\n                      users,\n                    },\n                  });\n                },\n              );\n            }\n          });\n        } else {\n          logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n            payload: null,\n          });\n        }\n      });\n      // .then((openChannel) => {\n      //   logger.info('OpenChannel | useSetChannel fetched channel', openChannel);\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CURRENT_CHANNEL,\n      //     payload: openChannel,\n      //   });\n      //   openChannel.enter((_, error) => {\n      //     if (error) {\n      //       logger.warning('OpenChannel | useSetChannel enter channel failed', { channelUrl, error });\n      //       messagesDispatcher({\n      //         type: messageActionTypes.SET_CHANNEL_INVALID,\n      //       });\n      //     }\n      //     if (fetchingParticipants) {\n      //       // fetch participants, banned participantIds, muted participantIds\n      //       const participantListQuery = openChannel.createParticipantListQuery();\n      //       const bannedParticipantListQuery = openChannel.createBannedUserListQuery();\n      //       const mutedParticipantListQuery = openChannel.createMutedUserListQuery();\n      //       utils.fetchWithListQuery(\n      //         participantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_PARTICIPANT_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         bannedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_BANNED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //       utils.fetchWithListQuery(\n      //         mutedParticipantListQuery,\n      //         logger,\n      //         (users) => {\n      //           messagesDispatcher({\n      //             type: messageActionTypes.FETCH_MUTED_USER_LIST,\n      //             payload: {\n      //               channel: openChannel,\n      //               users,\n      //             },\n      //           });\n      //         },\n      //       );\n      //     }\n      //   });\n      // })\n      // .catch((error) => {\n      //   logger.warning('OpenChannel | useSetChannel fetching channel failed', { channelUrl, error });\n      //   messagesDispatcher({\n      //     type: messageActionTypes.SET_CHANNEL_INVALID,\n      //   });\n      // });\n    }\n  }, [channelUrl, sdkInit, fetchingParticipants]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport uuidv4 from '../../../../utils/uuid';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  checkScrollBottom: () => boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useHandleChannelEvents(\n  { currentOpenChannel, checkScrollBottom }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    const messageReceiverId = uuidv4();\n    if (currentOpenChannel && currentOpenChannel.url && sdk && sdk.ChannelHandler) {\n      const ChannelHandler = new sdk.ChannelHandler();\n      logger.info('OpenChannel | useHandleChannelEvents: Setup evnet handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = (channel, message) => {\n        const scrollToEnd = checkScrollBottom();\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_RECEIVED,\n          payload: { channel, message },\n        });\n        if (scrollToEnd) {\n          try {\n            setTimeout(() => {\n              scrollIntoLast();\n            });\n          } catch (error) {\n            logger.warning('OpenChannel | onMessageReceived | scroll to end failed');\n          }\n        }\n      };\n      ChannelHandler.onMessageUpdated = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageUpdated', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      };\n      ChannelHandler.onMessageDeleted = (channel, messageId) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMessageDeleted', { channelUrl, messageId });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: { channel, messageId },\n        });\n      };\n      ChannelHandler.onOperatorUpdated = (channel, operators) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onOperatorUpdated', { channelUrl, operators });\n        messagesDispatcher({\n          type: messageActionTypes.ON_OPERATOR_UPDATED,\n          payload: { channel, operators },\n        });\n      };\n      ChannelHandler.onUserEntered = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserEntered', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_ENTERED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserExited = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserExited', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_EXITED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserMuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserMuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_MUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnmuted = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnmuted', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNMUTED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserBanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserBanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_BANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onUserUnbanned = (channel, user) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onUserUnbanned', { channelUrl, user });\n        messagesDispatcher({\n          type: messageActionTypes.ON_USER_UNBANNED,\n          payload: { channel, user },\n        });\n      };\n      ChannelHandler.onChannelFrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelFrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_FROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelUnfrozen = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelUnfrozen', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_UNFROZEN,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onChannelChanged = (channel) => {\n        logger.info('OpenChannel | useHandleChannelEvents: onChannelChanged', channel);\n        messagesDispatcher({\n          type: messageActionTypes.ON_CHANNEL_CHANGED,\n          payload: channel,\n        });\n      };\n      ChannelHandler.onMetaDataCreated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataCreated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_CREATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataUpdated = (channel, metaData) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataUpdated', { channelUrl, metaData });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_UPDATED,\n          payload: { channel, metaData },\n        });\n      };\n      ChannelHandler.onMetaDataDeleted = (channel, metaDataKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaDataDeleted', { channelUrl, metaDataKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_DATA_DELETED,\n          payload: { channel, metaDataKeys },\n        });\n      };\n      ChannelHandler.onMetaCountersCreated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersCreated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_CREATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersUpdated = (channel, metaCounter) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersUpdated', { channelUrl, metaCounter });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_UPDATED,\n          payload: { channel, metaCounter },\n        });\n      };\n      ChannelHandler.onMetaCountersDeleted = (channel, metaCounterKeys) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMetaCountersDeleted', { channelUrl, metaCounterKeys });\n        messagesDispatcher({\n          type: messageActionTypes.ON_META_COUNTERS_DELETED,\n          payload: { channel, metaCounterKeys },\n        });\n      };\n      ChannelHandler.onMentionReceived = (channel, message) => {\n        const channelUrl = channel.url;\n        logger.info('OpenChannel | useHandleChannelEvents: onMentionReceived', { channelUrl, message });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MENTION_RECEIVED,\n          payload: { channel, message },\n        });\n      };\n\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('OpenChannel | useHandleChannelEvents: Removing message receiver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { scrollIntoLast } from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useInitialMessagesFetch(\n  { currentOpenChannel, userFilledMessageListParams }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): void {\n  useEffect(() => {\n    logger.info('OpenChannel | useInitialMessagesFetch: Setup started', currentOpenChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (sdk && sdk.MessageListParams && currentOpenChannel && currentOpenChannel.getMessagesByTimestamp) {\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useInitialMessagesFetch: Used customizedMessageListParams');\n      }\n\n      logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages', { currentOpenChannel, messageListParams });\n      messagesDispatcher({\n        type: messageActionTypes.GET_PREV_MESSAGES_START,\n        payload: null,\n      });\n      currentOpenChannel.getMessagesByTimestamp(new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useInitialMessagesFetch: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            },\n          });\n          setTimeout(() => { scrollIntoLast(); });\n        } else {\n          logger.error('OpenChannel | useInitialMessagesFetch: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            },\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, userFilledMessageListParams]);\n}\n\nexport default useInitialMessagesFetch;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  lastMessageTimestamp: number;\n  fetchMore?: boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  hasMore: boolean;\n  /* eslint-disable @typescript-eslint/no-explicit-any*/\n  userFilledMessageListParams?: Record<string, any>;\n}\ntype CallbackReturn = (callback: () => void) => void;\n\nfunction useScrollCallback(\n  { currentOpenChannel, lastMessageTimestamp, fetchMore }: DynamicParams,\n  { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams }: StaticParams,\n): CallbackReturn {\n  return useCallback((callback) => {\n    if (fetchMore && hasMore && sdk && sdk.MessageListParams) {\n      logger.info('OpenChannel | useScrollCallback: start');\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = 30;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReactions = false;\n\n      if (userFilledMessageListParams) {\n        Object.keys(userFilledMessageListParams).forEach((key) => {\n          messageListParams[key] = userFilledMessageListParams[key];\n        });\n        logger.info('OpenChannel | useScrollCallback: Used userFilledMessageListParams', userFilledMessageListParams);\n      }\n\n      logger.info('OpenChannel | useScrollCallback: Fetching messages', { currentOpenChannel, messageListParams });\n\n      currentOpenChannel.getMessagesByTimestamp(lastMessageTimestamp || new Date().getTime(), messageListParams, (messages, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useScrollCallback: Fetching messages succeeded', messages);\n          const hasMore = (messages && messages.length > 0);\n          const lastMessageTimestamp = hasMore ? messages[0].createdAt : null;\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_SUCESS,\n            payload: {\n              currentOpenChannel,\n              messages,\n              hasMore,\n              lastMessageTimestamp,\n            }\n          });\n          setTimeout(() => {\n            callback();\n          });\n        } else {\n          logger.error('OpenChannel | useScrollCallback: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.GET_PREV_MESSAGES_FAIL,\n            payload: {\n              currentOpenChannel,\n              messages: [],\n              hasMore: false,\n              lastMessageTimestamp: 0,\n            }\n          });\n        }\n      });\n    }\n  }, [currentOpenChannel, lastMessageTimestamp, fetchMore]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\n\ninterface DynamicParams {\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n}\n\nfunction useCheckScrollBottom(\n  { conversationScrollRef }: DynamicParams,\n  { logger }: StaticParams,\n): () => boolean {\n  return useCallback(() => {\n    let isBottom = true;\n    if (conversationScrollRef && conversationScrollRef?.current) {\n      try {\n        const conversationScroll = conversationScrollRef.current;\n        isBottom = conversationScroll.scrollHeight <= conversationScroll.scrollTop + conversationScroll.clientHeight;\n      } catch(error) {\n        logger.error('OpenChannel | useCheckScrollBottom', error);\n      }\n    }\n    return isBottom;\n  }, [conversationScrollRef])\n}\n\nexport default useCheckScrollBottom;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage: (text: string) => Sendbird.UserMessageParams;\n  checkScrollBottom: () => boolean;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\nfunction useSendMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): (props: { message: string }) => void {\n  return useCallback((props) => {\n    const text = props?.message || '';\n    if (sdk && sdk.UserMessageParams) {\n      const createParamsDefault = (txt: string | number): Sendbird.UserMessageParams => {\n        const message = typeof txt === 'string' ? txt.trim() : txt.toString(10).trim();\n        const params = new sdk.UserMessageParams();\n        params.message = message;\n        return params;\n      }\n      const createCustomParams = onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function';\n      if (createCustomParams) {\n        logger.info('OpenChannel | useSendMessageCallback: Creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n      const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n      logger.info('OpenChannel | useSendMessageCallback: Sending message has started', params);\n\n      const isBottom = checkScrollBottom();\n      const pendingMessage = currentOpenChannel.sendUserMessage(params, (message, error) => {\n        if (!error) {\n          logger.info('OpenChannel | useSendMessageCallback: Sending message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n            payload: message,\n          });\n          if (isBottom) {\n            setTimeout(() => {\n              utils.scrollIntoLast();\n            });\n          }\n        } else {\n          logger.warning('OpenChannel | useSendMessageCallback: Sending message failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.SENDING_MESSAGE_FAILED,\n            payload: message,\n          });\n          // https://sendbird.com/docs/chat/v3/javascript/guides/error-codes#2-server-error-codes\n          // TODO: Do we need to handle the error cases?\n          if (error?.code === 900041) {\n            messagesDispatcher({\n              type: messageActionTypes.ON_USER_MUTED,\n              payload: {\n                channel: currentOpenChannel,\n                user: sdk.currentUser,\n              },\n            });\n          }\n        }\n      });\n      messagesDispatcher({\n        type: messageActionTypes.SENDING_MESSAGE_START,\n        payload: {\n          message: pendingMessage,\n          channel: currentOpenChannel,\n        }\n      });\n    }\n  }, [currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom]);\n}\n\nexport default useSendMessageCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendFileMessage: (file: File) => Sendbird.FileMessageParams;\n  checkScrollBottom: () => boolean;\n  imageCompression?: {\n    compressionRate?: number,\n    resizingWidth?: number | string,\n    resizingHeight?: number | string,\n  };\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (file: File) => void;\n\nfunction useFileUploadCallback(\n  {\n    currentOpenChannel,\n    checkScrollBottom,\n    imageCompression = {},\n    onBeforeSendFileMessage,\n  }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((file) => {\n    if (sdk && sdk.FileMessageParams) {\n      const {\n        compressionRate,\n        resizingWidth,\n        resizingHeight,\n      } = imageCompression;\n      const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n      const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n      const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n      // pxToNumber returns null if values are invalid\n      const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n        || utils.pxToNumber(resizingHeight);\n\n      const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n      const createParamsDefault = (file_): Sendbird.FileMessageParams => {\n        const params = new sdk.FileMessageParams();\n        params.file = file_;\n        return params;\n      };\n\n      if (canCompressImage) { // Using image compression\n        try {\n          const image: HTMLImageElement = document.createElement('img');\n          image.src = URL.createObjectURL(file);\n          image.onload = () => {\n            URL.revokeObjectURL(image.src);\n            const canvas = document.createElement('canvas');\n            const imageWidth = image.naturalWidth || image.width;\n            const imageHeight = image.naturalHeight || image.height;\n            let targetWidth = utils.pxToNumber(resizingWidth) || imageWidth;\n            let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n            // In canvas.toBlob(callback, mimeType, qualityArgument)\n            // qualityArgument doesnt work\n            // so in case compressibleDiamensions are not present, we use ratio\n            if (file.type === 'image/png' && !compressibleDiamensions) {\n              targetWidth *= compressionRate;\n              targetHeight *= compressionRate;\n            }\n\n            canvas.width = targetWidth;\n            canvas.height = targetHeight;\n            const context = canvas.getContext('2d');\n            context.drawImage(image, 0, 0, targetWidth, targetHeight);\n            context.canvas.toBlob(\n              (newImageBlob) => {\n                const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n                if (createCustomParams) {\n                  logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n                }\n                const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(compressedFile) : createParamsDefault(compressedFile);\n                logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n                const isBottom = checkScrollBottom();\n                const pendingMessage = currentOpenChannel.sendFileMessage(\n                  params,\n                  (message: SendbirdUIKit.ClientFileMessage, error) => {\n                    if (!error) {\n                      logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                        payload: message,\n                      });\n                      if (isBottom) {\n                        setTimeout(() => {\n                          utils.scrollIntoLast();\n                        });\n                      }\n                    } else {\n                      logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n                      message.localUrl = URL.createObjectURL(file);\n                      message.file = file;\n                      messagesDispatcher({\n                        type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                        payload: message,\n                      });\n                    }\n                  },\n                );\n\n                messagesDispatcher({\n                  type: messageActionTypes.SENDING_MESSAGE_START,\n                  payload: {\n                    message: {\n                      ...pendingMessage,\n                      url: URL.createObjectURL(file),\n                      // pending thumbnail message seems to be failed\n                      requestState: 'pending',\n                    },\n                    channel: currentOpenChannel,\n                  }\n                });\n              },\n              file.type,\n              compressionRate,\n            );\n          }\n        } catch (error) {\n          logger.warning('OpenChannel | useFileUploadCallback: Sending file message with image compression failed', error);\n        }\n      } else { // Not using image compression\n        if (createCustomParams) {\n          logger.info('OpenChannel | useFileUploadCallback: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n        }\n        const params = onBeforeSendFileMessage ? onBeforeSendFileMessage(file) : createParamsDefault(file);\n        logger.info('OpenChannel | useFileUploadCallback: Uploading file message start', params);\n\n        const isBottom = checkScrollBottom();\n        const pendingMessage = currentOpenChannel.sendFileMessage(\n          params,\n          (message: SendbirdUIKit.ClientFileMessage, error) => {\n            if (!error) {\n              logger.info('OpenChannel | useFileUploadCallback: Sending message succeeded', message);\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n                payload: message,\n              });\n              if (isBottom) {\n                setTimeout(() => {\n                  utils.scrollIntoLast();\n                });\n              }\n            } else {\n              logger.error('OpenChannel | useFileUploadCallback: Sending file message failed', { message, error });\n              message.localUrl = URL.createObjectURL(file);\n              message.file = file;\n              messagesDispatcher({\n                type: messageActionTypes.SENDING_MESSAGE_FAILED,\n                payload: message,\n              });\n            }\n          }\n        );\n\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: {\n            message: {\n              ...pendingMessage,\n              url: URL.createObjectURL(file),\n              // pending thumbnail message seems to be failed\n              requestState: 'pending',\n            },\n            channel: currentOpenChannel,\n          }\n        });\n      }\n    }\n  }, [currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression]);\n}\n\nexport default useFileUploadCallback;\n","import Sendbird from 'sendbird';\nimport { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n  onBeforeSendUserMessage?: (text) => Sendbird.UserMessageParams;\n}\ninterface StaticParams {\n  sdk: SendbirdUIKit.Sdk;\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload :any }) => void;\n}\ntype CallbackReturn = (messageId, text, callback) => void;\n\nfunction useUpdateMessageCallback(\n  { currentOpenChannel, onBeforeSendUserMessage }: DynamicParams,\n  { sdk, logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((messageId, text, callback) => {\n    const createParamsDefault = (txt) => {\n      const params = new sdk.UserMessageParams();\n      params.message = txt;\n      return params;\n    };\n\n    if (onBeforeSendUserMessage && typeof onBeforeSendUserMessage === 'function') {\n      logger.info('OpenChannel | useUpdateMessageCallback: Creating params using onBeforeUpdateUserMessage');\n    }\n    const params = onBeforeSendUserMessage ? onBeforeSendUserMessage(text) : createParamsDefault(text);\n    currentOpenChannel.updateUserMessage(messageId, params, (message, error) => {\n      if (callback) {\n        callback();\n      }\n      if (!error) {\n        logger.info('OpenChannel | useUpdateMessageCallback: Updating message succeeded', { message, params });\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentOpenChannel,\n            message,\n          },\n        });\n      } else {\n        logger.warning('OpenChannel | useUpdateMessageCallback: Updating message failed', error);\n      }\n    });\n  }, [currentOpenChannel, onBeforeSendUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\n\ntype CallbackReturn = (\n  message: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage,\n  callback?: () => void,\n) => void;\n\nfunction useDeleteMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((message, callback) => {\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message', message);\n    const { sendingStatus } = message;\n    logger.info('OpenChannel | useDeleteMessageCallback: Deleting message requestState', sendingStatus);\n\n    if (sendingStatus === 'failed' || sendingStatus === 'pending') {\n      logger.info('OpenChannel | useDeleteMessageCallback: Deleted message from local', message);\n      messagesDispatcher({\n        type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n        payload: message.reqId,\n      });\n      if (callback) {\n        callback();\n      }\n    } else {\n      if (!(message.messageType ==='file' || message.messageType === 'user')) {\n        return;\n      }\n      const messageToDelete = message as SendBird.UserMessage;\n      currentOpenChannel.deleteMessage(messageToDelete, (error) => {\n        logger.info('OpenChannel | useDeleteMessageCallback: Deleting message on server', sendingStatus);\n        if (callback) {\n          callback();\n        }\n        if (!error) {\n          logger.info('OpenChannel | useDeleteMessageCallback: Deleting message succeeded', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: {\n              channel: currentOpenChannel,\n              messageId: message.messageId,\n            },\n          });\n        } else {\n          logger.warning('OpenChannel | useDeleteMessageCallback: Deleting message failed', error);\n        }\n      });\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  currentOpenChannel: SendbirdUIKit.OpenChannelType;\n}\ninterface StaticParams {\n  logger: SendbirdUIKit.Logger;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n}\ntype CallbackReturn = (failedMessage: SendbirdUIKit.ClientUserMessage | SendbirdUIKit.ClientFileMessage) => void;\n\nfunction useResendMessageCallback(\n  { currentOpenChannel }: DynamicParams,\n  { logger, messagesDispatcher }: StaticParams,\n): CallbackReturn {\n  return useCallback((failedMessage) => {\n    logger.info('OpenChannel | useResendMessageCallback: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function' && failedMessage.isResendable()) {\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESENDING_MESSAGE_START,\n        payload: {\n          channel: currentOpenChannel,\n          message: failedMessage,\n        },\n      });\n\n      // userMessage\n      if (messageType === 'user' && failedMessage.messageType === 'user') {\n        currentOpenChannel.resendUserMessage(failedMessage, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Reseding message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n        return;\n      }\n\n      // fileMessage\n      if (messageType === 'file' && failedMessage.messageType === 'file') {\n        currentOpenChannel.resendFileMessage(failedMessage, file, (message, error) => {\n          if (!error) {\n            logger.info('OpenChannel | useResendMessageCallback: Resending file message succeeded', message);\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n              payload: message,\n            });\n          } else {\n            logger.warning('OpenChannel | useResendMessageCallback: Resending file message failed', error);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SENDING_MESSAGE_FAILED,\n              payload: failedMessage,\n            });\n          }\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('OpenChannel | useResendMessageCallback: Message is not resendable');\n      logger.warning('OpenChannel | useResendMessageCallback: Message is not resendable', failedMessage);\n    }\n  }, [currentOpenChannel]);\n}\n\nexport default useResendMessageCallback;\n","import { useEffect, useState } from 'react';\nimport * as messageActionTypes from '../dux/actionTypes';\n\ninterface DynamicParams {\n  messagesLength: number;\n  messageLimit: number;\n}\n\ninterface StaticParams {\n  messagesDispatcher: ({\n    type: string,\n    payload: { messageLimit: number }\n  }) => void;\n  logger: SendbirdUIKit.Logger;\n}\n\nconst THROTTLE_TIMER = 5000;\n\n// to trim message list so that we wont keep thousands of messages in memory\n// We are throttling here; not debouncing\n// it will be called once very 5 sec if messagesLength, messageLimit changes\n// we check if messagesLength > messageLimit before dispatching action\nfunction useTrimMessageList(\n  { messagesLength, messageLimit }: DynamicParams,\n  { messagesDispatcher, logger }: StaticParams,\n): void {\n  const [inProgress, setInProgress] = useState(false);\n  useEffect(() => {\n    if (inProgress) {\n      return;\n    }\n    if (typeof messagesLength === 'number' && messagesLength > messageLimit) {\n      logger.info('Trimming MessageList');\n      messagesDispatcher({\n        type: messageActionTypes.TRIM_MESSAGE_LIST,\n        payload: { messageLimit },\n      });\n    }\n    setInProgress(true);\n    setTimeout(() => { setInProgress(false); }, THROTTLE_TIMER);\n  }, [messagesLength, messageLimit]);\n}\n\nexport default useTrimMessageList;\n","import React, {\n  useRef,\n  useEffect,\n  useReducer,\n  useMemo,\n} from 'react';\nimport SendBird from 'sendbird';\n\nimport * as utils from './utils';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { RenderUserProfileProps } from '../../../types';\nimport messagesReducer from './dux/reducers';\nimport messagesInitialState, {\n  State as MessageStoreState,\n} from './dux/initialState';\nimport * as messageActionTypes from './dux/actionTypes';\nimport { scrollIntoLast } from './utils';\nimport * as topics from '../../../lib/pubSub/topics';\n\n// hooks\nimport useSetChannel from './hooks/useSetChannel';\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useCheckScrollBottom from './hooks/useCheckScrollBottom';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useFileUploadCallback from './hooks/useFileUploadCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useTrimMessageList from './hooks/useTrimMessageList';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\n\ntype OpenChannelQueries = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  messageListParams?: {\n    replyType?: string,\n    messageType?: string,\n    prevResultSize?: number,\n    nextResultSize?: number,\n    reverse?: boolean,\n    isInclusive?: boolean,\n    includeMetaArray?: boolean,\n    // UIKit doesn't support emoji reaction in OpenChannel\n    // includeReactions?: boolean,\n    // UIKit doesn't support message threading in OpenChannel\n    // includeThreadInfo?: boolean,\n    includePollDetails?: boolean,\n    includeParentMessageInfo?: boolean,\n    showSubchannelMessagesOnly?: boolean,\n    customTypes?: Array<string>,\n    senderUserIds?: Array<string>,\n  },\n};\n\nexport interface OpenChannelProviderProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  useMessageGrouping?: boolean;\n  queries?: OpenChannelQueries;\n  messageLimit?: number;\n  onBeforeSendUserMessage?(text: string): SendBird.UserMessageParams;\n  onBeforeSendFileMessage?(file_: File): SendBird.FileMessageParams;\n  onChatHeaderActionClick?(): void;\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n}\n\n\ninterface OpenChannelInterface extends OpenChannelProviderProps, MessageStoreState {\n  // derived/utils\n  messageInputRef: React.RefObject<HTMLInputElement>;\n  conversationScrollRef: React.RefObject<HTMLDivElement>;\n  disabled: boolean;\n  amIBanned: boolean;\n  amIMuted: boolean;\n  amIOperator: boolean;\n  fetchMore: boolean;\n  checkScrollBottom: () => boolean;\n  onScroll: (callback: () => void) => void;\n  handleSendMessage: any;\n  handleFileUpload: any;\n  updateMessage: any;\n  deleteMessage: any;\n  resendMessage: any;\n}\n\nconst OpenChannelContext = React.createContext<OpenChannelInterface | null>(undefined);\n\nconst OpenChannelProvider: React.FC<OpenChannelProviderProps> = (props: OpenChannelProviderProps) => {\n  const {\n    channelUrl,\n    children,\n    useMessageGrouping,\n    queries,\n    onBeforeSendUserMessage,\n    messageLimit,\n    onBeforeSendFileMessage,\n    onChatHeaderActionClick,\n  } = props;\n\n  // We didn't decide to support fetching participant list\n  const fetchingParticipants = false;\n  const globalStore = useSendbirdStateContext();\n\n  const sdk = globalStore?.stores?.sdkStore?.sdk;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n  const user = globalStore?.stores?.userStore?.user;\n  const config = globalStore?.config;\n  const {\n    userId,\n    isOnline,\n    logger,\n    pubSub,\n    imageCompression,\n  } = config;\n\n  // hook variables\n  const [messagesStore, messagesDispatcher] = useReducer(messagesReducer, messagesInitialState);\n  const {\n    allMessages,\n    loading,\n    initialized,\n    currentOpenChannel,\n    isInvalid,\n    hasMore,\n    lastMessageTimestamp,\n    operators,\n    bannedParticipantIds,\n    mutedParticipantIds,\n  } = messagesStore;\n  // ref\n  const messageInputRef = useRef(null); // useSendMessageCallback\n  const conversationScrollRef = useRef(null); // useScrollAfterSendMessageCallback\n\n  // const\n  const userFilledMessageListParams = queries?.messageListParams;\n  const disabled = !initialized\n    || !isOnline\n    || utils.isDisabledBecauseFrozen(currentOpenChannel, userId)\n    || utils.isDisabledBecauseMuted(mutedParticipantIds, userId);\n\n  // useMemo\n  const amIBanned = useMemo(() => {\n    return bannedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, bannedParticipantIds, user]);\n  const amIMuted = useMemo(() => {\n    return mutedParticipantIds.indexOf(user.userId) >= 0;\n  }, [channelUrl, mutedParticipantIds, user]);\n  const amIOperator = useMemo(() => {\n    return operators.map(operator => operator.userId).indexOf(user.userId) >= 0;\n  }, [channelUrl, operators, user]);\n\n  // use hooks\n  useSetChannel(\n    { channelUrl, sdkInit, fetchingParticipants, userId },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  const checkScrollBottom = useCheckScrollBottom(\n    { conversationScrollRef },\n    { logger },\n  );\n  useHandleChannelEvents(\n    { currentOpenChannel, checkScrollBottom },\n    { sdk, logger, messagesDispatcher },\n  );\n  useInitialMessagesFetch(\n    { currentOpenChannel, userFilledMessageListParams },\n    { sdk, logger, messagesDispatcher },\n  );\n\n  const fetchMore: boolean = utils.shouldFetchMore(allMessages?.length, messageLimit);\n  // donot fetch more for streaming\n  const onScroll = useScrollCallback(\n    { currentOpenChannel, lastMessageTimestamp, fetchMore },\n    { sdk, logger, messagesDispatcher, hasMore, userFilledMessageListParams },\n  );\n  const handleSendMessage = useSendMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage, checkScrollBottom },\n    { sdk, logger, messagesDispatcher },\n  );\n  const handleFileUpload = useFileUploadCallback(\n    { currentOpenChannel, onBeforeSendFileMessage, checkScrollBottom, imageCompression },\n    { sdk, logger, messagesDispatcher },\n  );\n  const updateMessage = useUpdateMessageCallback(\n    { currentOpenChannel, onBeforeSendUserMessage },\n    { sdk, logger, messagesDispatcher },\n  );\n  const deleteMessage = useDeleteMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentOpenChannel },\n    { logger, messagesDispatcher },\n  );\n\n  useTrimMessageList(\n    { messagesLength: allMessages?.length, messageLimit },\n    { messagesDispatcher, logger }\n  );\n\n  // handle API calls from withSendbird\n  useEffect(() => {\n    const subscriber = new Map();\n    if (!pubSub || !pubSub.subscribe) {\n      return;\n    }\n    subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: message,\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n      const { channel, message } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_START,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n      const { channel, message } = msg;\n      scrollIntoLast();\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.SENDING_MESSAGE_SUCCEEDED,\n          payload: { message, channel },\n        });\n      }\n    }));\n    subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n      const { channel, message, fromSelector } = msg;\n      if (fromSelector && channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      }\n    }));\n    subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n      const { channel, messageId } = msg;\n      if (channel && (channelUrl === channel.url)) {\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      }\n    }));\n\n    return () => {\n      if (subscriber) {\n        subscriber.forEach((s) => {\n          try {\n            s.remove();\n          } catch {\n            //\n          }\n        });\n      }\n    };\n  }, [channelUrl, sdkInit]);\n  return (\n    <OpenChannelContext.Provider value={{\n      // props\n      channelUrl,\n      children,\n      useMessageGrouping,\n      queries,\n      onBeforeSendUserMessage,\n      messageLimit,\n      onBeforeSendFileMessage,\n      onChatHeaderActionClick,\n      // store\n      allMessages,\n      loading,\n      initialized,\n      currentOpenChannel,\n      isInvalid,\n      hasMore,\n      lastMessageTimestamp,\n      operators,\n      bannedParticipantIds,\n      mutedParticipantIds,\n      // derived/utils\n      messageInputRef,\n      conversationScrollRef,\n      disabled,\n      amIBanned,\n      amIMuted,\n      amIOperator,\n      checkScrollBottom,\n      fetchMore,\n      onScroll,\n      handleSendMessage,\n      handleFileUpload,\n      updateMessage,\n      deleteMessage,\n      resendMessage,\n    }}>\n      <UserProfileProvider\n        isOpenChannel\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </OpenChannelContext.Provider>\n  );\n}\n\nexport type UseOpenChannelType = () => OpenChannelInterface;\nconst useOpenChannel: UseOpenChannelType = () => React.useContext(OpenChannelContext);\n\nexport { OpenChannelProvider, useOpenChannel };\n"],"names":["getMessageCreatedAt","message","format","createdAt","shouldFetchMore","messageLength","maxMessages","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","isSameGroup","comparingMessage","messageType","sender","userId","sendingStatus","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","kFormatter","num","Math","abs","toFixed","isOperator","openChannel","operators","map","operator","indexOf","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","mutedParticipantIds","fetchWithListQuery","listQuery","logger","eachQueryNextCallback","fetchList","query","hasNext","next","users","warning","info","pxToNumber","px","parsed","Number","parseFloat","isNaN","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","RESET_MESSAGES","GET_PREV_MESSAGES_START","GET_PREV_MESSAGES_SUCESS","GET_PREV_MESSAGES_FAIL","SENDING_MESSAGE_FAILED","SENDING_MESSAGE_SUCCEEDED","SENDING_MESSAGE_START","RESENDING_MESSAGE_START","FETCH_PARTICIPANT_LIST","FETCH_BANNED_USER_LIST","FETCH_MUTED_USER_LIST","TRIM_MESSAGE_LIST","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","ON_OPERATOR_UPDATED","ON_USER_ENTERED","ON_USER_EXITED","ON_USER_MUTED","ON_USER_UNMUTED","ON_USER_BANNED","ON_USER_UNBANNED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_CHANNEL_CHANGED","ON_META_DATA_CREATED","ON_META_DATA_UPDATED","ON_META_DATA_DELETED","ON_META_COUNTERS_CREATED","ON_META_COUNTERS_UPDATED","ON_META_COUNTERS_DELETED","ON_MENTION_RECEIVED","reducer","state","action","type","actionTypes","allMessages","gottenChannel","payload","isInvalid","currentOpenChannel","url","participants","bannedParticipantIds","loading","isFailed","_b","_c","_d","messages","hasMore","lastMessageTimestamp","actionChannelUrl","receivedMessages_1","_hasMore","_lastMessageTimestamp","stateChannel","stateChannelUrl","filteredAllMessages","filter","find","_a","messageId","compareIds","initialized","_e","message_1","channel","some","m","reqId","sentMessage_1","newMessages","sentMessage_2","messageLimit","length","sliceAt","slice","eventedChannel","resentMessage_1","fetchedParticipantList","fetchedBannedUserList","every","user","fetchedMutedUserList","receivedMessage","updatedMessage_1","currentChannel","isIdentical","deletedMessageId_1","updatedOperators","enteredUser","exitedUser_1","participant","mutedUser","unmutedUser_1","bannedUser","unbannedUser_1","frozenChannel","frozen","unfrozenChannel","changedChannel","initialState","useSetChannel","channelUrl","sdkInit","fetchingParticipants","sdk","messagesDispatcher","useEffect","OpenChannel","getChannel","messageActionTypes","enter","_","isOperatorWithUserId","bannedParticipantListQuery","createBannedUserListQuery","mutedParticipantListQuery","createMutedUserListQuery","utils","participantListQuery","createParticipantListQuery","useHandleChannelEvents","checkScrollBottom","messageReceiverId","uuidv4","ChannelHandler","onMessageReceived","scrollToEnd","onMessageUpdated","onMessageDeleted","onOperatorUpdated","onUserEntered","onUserExited","onUserMuted","onUserUnmuted","onUserBanned","onUserUnbanned","onChannelFrozen","onChannelUnfrozen","onChannelChanged","onMetaDataCreated","metaData","onMetaDataUpdated","onMetaDataDeleted","metaDataKeys","onMetaCountersCreated","metaCounter","onMetaCountersUpdated","onMetaCountersDeleted","metaCounterKeys","onMentionReceived","addChannelHandler","removeChannelHandler","useInitialMessagesFetch","userFilledMessageListParams","MessageListParams","getMessagesByTimestamp","messageListParams_1","prevResultSize","isInclusive","includeReplies","includeReactions","Object","keys","forEach","key","messageListParams","Date","getTime","useScrollCallback","fetchMore","useCallback","callback","hasMore_1","lastMessageTimestamp_1","useCheckScrollBottom","conversationScrollRef","isBottom","current","conversationScroll","clientHeight","useSendMessageCallback","onBeforeSendUserMessage","props","text","UserMessageParams","createParamsDefault","txt","trim","toString","params","createCustomParams","isBottom_1","pendingMessage","sendUserMessage","code","currentUser","useFileUploadCallback","imageCompression","onBeforeSendFileMessage","file","FileMessageParams","compressionRate_1","resizingWidth_1","resizingHeight_1","createCustomParams_1","compressibleFileType","compressibleRatio","compressibleDiamensions_1","canCompressImage","createParamsDefault_1","file_","image_1","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWidth","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","sendFileMessage","localUrl","requestState","useUpdateMessageCallback","updateUserMessage","useDeleteMessageCallback","messageToDelete","deleteMessage","useResendMessageCallback","failedMessage","isResendable","resendUserMessage","resendFileMessage","console","THROTTLE_TIMER","useTrimMessageList","messagesLength","useState","inProgress","setInProgress","OpenChannelContext","React","createContext","undefined","OpenChannelProvider","children","useMessageGrouping","queries","onChatHeaderActionClick","globalStore","useSendbirdStateContext","stores","sdkStore","userStore","config","isOnline","pubSub","_g","useReducer","messagesReducer","messagesInitialState","messagesStore","messageInputRef","useRef","disabled","amIBanned","useMemo","amIMuted","amIOperator","onScroll","handleSendMessage","handleFileUpload","updateMessage","resendMessage","subscriber","Map","subscribe","set","topics","msg","fromSelector","s","remove","renderUserProfile","disableUserProfile","useOpenChannel","useContext"],"mappings":"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"}