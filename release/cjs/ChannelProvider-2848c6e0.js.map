{"version":3,"file":"ChannelProvider-2848c6e0.js","sources":["../../src/smart-components/Channel/context/dux/actionTypes.js","../../src/smart-components/Channel/context/utils.js","../../src/smart-components/Channel/context/dux/initialState.js","../../src/smart-components/Channel/context/dux/reducers.js","../../src/smart-components/Channel/context/hooks/useHandleChannelEvents.js","../../src/smart-components/Channel/context/hooks/useGetChannel.js","../../src/smart-components/Channel/context/hooks/useInitialMessagesFetch.js","../../src/smart-components/Channel/context/hooks/useHandleReconnect.ts","../../src/smart-components/Channel/context/hooks/useScrollCallback.js","../../src/smart-components/Channel/context/hooks/useScrollDownCallback.js","../../src/smart-components/Channel/context/hooks/useDeleteMessageCallback.js","../../src/smart-components/Channel/context/hooks/useUpdateMessageCallback.js","../../src/smart-components/Channel/context/hooks/useResendMessageCallback.js","../../src/smart-components/Channel/context/hooks/useSendMessageCallback.js","../../src/smart-components/Channel/context/hooks/useSendFileMessageCallback.js","../../src/smart-components/Channel/context/hooks/useMemoizedEmojiListItems.jsx","../../src/smart-components/Channel/context/hooks/useToggleReactionCallback.js","../../src/smart-components/Channel/context/hooks/useScrollToMessage.ts","../../src/smart-components/Channel/context/ChannelProvider.tsx"],"sourcesContent":["export const RESET_MESSAGES = 'RESET_MESSAGES';\n\nexport const FETCH_INITIAL_MESSAGES_START = 'FETCH_INITIAL_MESSAGES_START';\nexport const FETCH_INITIAL_MESSAGES_SUCCESS = 'FETCH_INITIAL_MESSAGES_SUCCESS';\nexport const FETCH_INITIAL_MESSAGES_FAILURE = 'FETCH_INITIAL_MESSAGES_FAILURE';\nexport const FETCH_PREV_MESSAGES_SUCCESS = 'FETCH_PREV_MESSAGES_SUCCESS';\nexport const FETCH_PREV_MESSAGES_FAILURE = 'FETCH_PREV_MESSAGES_FAILURE';\nexport const FETCH_NEXT_MESSAGES_SUCCESS = 'FETCH_NEXT_MESSAGES_SUCCESS';\nexport const FETCH_NEXT_MESSAGES_FAILURE = 'FETCH_NEXT_MESSAGES_FAILURE';\n\nexport const SEND_MESSAGEGE_START = 'SEND_MESSAGEGE_START';\nexport const SEND_MESSAGEGE_SUCESS = 'SEND_MESSAGEGE_SUCESS';\nexport const SEND_MESSAGEGE_FAILURE = 'SEND_MESSAGEGE_FAILURE';\n\nexport const RESEND_MESSAGEGE_START = 'RESEND_MESSAGEGE_START';\n\nexport const ON_MESSAGE_RECEIVED = 'ON_MESSAGE_RECEIVED';\nexport const ON_MESSAGE_UPDATED = 'ON_MESSAGE_UPDATED';\nexport const ON_MESSAGE_THREAD_INFO_UPDATED = 'ON_MESSAGE_THREAD_INFO_UPDATED';\nexport const ON_MESSAGE_DELETED = 'ON_MESSAGE_DELETED';\nexport const ON_MESSAGE_DELETED_BY_REQ_ID = 'ON_MESSAGE_DELETED_BY_REQ_ID';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\nexport const SET_CHANNEL_INVALID = 'SET_CHANNEL_INVALID';\nexport const MARK_AS_READ = 'MARK_AS_READ';\n\nexport const ON_REACTION_UPDATED = 'ON_REACTION_UPDATED';\nexport const SET_EMOJI_CONTAINER = 'SET_EMOJI_CONTAINER';\n\nexport const MESSAGE_LIST_PARAMS_CHANGED = 'MESSAGE_LIST_PARAMS_CHANGED';\n","import format from 'date-fns/format';\nimport * as channelActions from './dux/actionTypes';\nimport * as topics from '../../../lib/pubSub/topics';\n\nimport {\n  getSendingMessageStatus,\n  getOutgoingMessageStates,\n  isReadMessage,\n} from '../../../utils';\n\nconst MessageStatusType = getOutgoingMessageStates();\nconst UNDEFINED = 'undefined';\nconst { SUCCEEDED, FAILED, PENDING } = getSendingMessageStatus();\n\nexport const scrollIntoLast = (intialTry = 0) => {\n  const MAX_TRIES = 10;\n  const currentTry = intialTry;\n  if (currentTry > MAX_TRIES) {\n    return;\n  }\n  try {\n    const scrollDOM = document.querySelector('.sendbird-conversation__messages-padding');\n    // eslint-disable-next-line no-multi-assign\n    scrollDOM.scrollTop = scrollDOM.scrollHeight;\n  } catch (error) {\n    setTimeout(() => {\n      scrollIntoLast(currentTry + 1);\n    }, 500 * currentTry);\n  }\n};\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (channelUrl, pubSub, dispatcher) => {\n  const subscriber = new Map();\n  if (!pubSub || !pubSub.subscribe) return subscriber;\n  subscriber.set(topics.SEND_USER_MESSAGE, pubSub.subscribe(topics.SEND_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel, message } = msg;\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_START,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.SEND_FILE_MESSAGE, pubSub.subscribe(topics.SEND_FILE_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    scrollIntoLast();\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.SEND_MESSAGEGE_SUCESS,\n        payload: message,\n      });\n    }\n  }));\n  subscriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message, fromSelector } = msg;\n    if (fromSelector && channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_UPDATED,\n        payload: { channel, message },\n      });\n    }\n  }));\n  subscriber.set(topics.DELETE_MESSAGE, pubSub.subscribe(topics.DELETE_MESSAGE, (msg) => {\n    const { channel, messageId } = msg;\n    if (channel && (channelUrl === channel.url)) {\n      dispatcher({\n        type: channelActions.ON_MESSAGE_DELETED,\n        payload: messageId,\n      });\n    }\n  }));\n\n  return subscriber;\n};\n\nexport const getParsedStatus = (message, currentGroupChannel) => {\n  if (message.requestState === FAILED) {\n    return MessageStatusType.FAILED;\n  }\n\n  if (message.requestState === PENDING) {\n    return MessageStatusType.PENDING;\n  }\n\n  if (message.requestState === SUCCEEDED) {\n    if (!currentGroupChannel) {\n      return MessageStatusType.SENT;\n    }\n\n    const unreadMemberCount = currentGroupChannel.getUnreadMemberCount(message);\n    if (unreadMemberCount === 0) {\n      return MessageStatusType.READ;\n    }\n\n    const isDelivered = currentGroupChannel.getDeliveryReceipt(message) === 0;\n    if (isDelivered) {\n      return MessageStatusType.DELIVERED;\n    }\n\n    return MessageStatusType.SENT;\n  }\n\n  return null;\n};\n\nexport const isOperator = (groupChannel = {}) => {\n  const { myRole } = groupChannel;\n  return myRole === 'operator';\n};\n\nexport const isDisabledBecauseFrozen = (groupChannel = {}) => {\n  const { isFrozen } = groupChannel;\n  return isFrozen && !isOperator(groupChannel);\n};\n\nexport const isDisabledBecauseMuted = (groupChannel = {}) => {\n  const { myMutedState } = groupChannel;\n  return myMutedState === 'muted';\n};\n\nexport const getEmojiCategoriesFromEmojiContainer = (emojiContainer = {}) => (\n  emojiContainer.emojiCategories ? emojiContainer.emojiCategories : []\n);\n\nexport const getAllEmojisFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojis = [];\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      allEmojis.push(emojis[emojiIndex]);\n    }\n  }\n  return allEmojis;\n};\n\nexport const getEmojisFromEmojiContainer = (emojiContainer = {}, emojiCategoryId = '') => (\n  emojiContainer.emojiCategories\n    ? emojiContainer.emojiCategories\n      .filter((emojiCategory) => emojiCategory.id === emojiCategoryId)[0].emojis\n    : []\n);\n\nexport const getAllEmojisMapFromEmojiContainer = (emojiContainer = {}) => {\n  const { emojiCategories = [] } = emojiContainer;\n  const allEmojisMap = new Map();\n\n  for (let categoryIndex = 0; categoryIndex < emojiCategories.length; categoryIndex += 1) {\n    const { emojis } = emojiCategories[categoryIndex];\n    for (let emojiIndex = 0; emojiIndex < emojis.length; emojiIndex += 1) {\n      const { key, url } = emojis[emojiIndex];\n      allEmojisMap.set(key, url);\n    }\n  }\n  return allEmojisMap;\n};\n\nexport const getNicknamesMapFromMembers = (members = []) => {\n  const nicknamesMap = new Map();\n  for (let memberIndex = 0; memberIndex < members.length; memberIndex += 1) {\n    const { userId, nickname } = members[memberIndex];\n    nicknamesMap.set(userId, nickname);\n  }\n  return nicknamesMap;\n};\n\nexport const getMessageCreatedAt = (message) => format(message.createdAt, 'p');\n\nexport const isSameGroup = (message, comparingMessage, currentChannel) => {\n  if (!(message\n    && comparingMessage\n    && message?.messageType !== 'admin'\n    && comparingMessage?.messageType !== 'admin'\n    && message?.sender\n    && comparingMessage?.sender\n    && message?.createdAt\n    && comparingMessage?.createdAt\n    && message?.sender?.userId\n    && comparingMessage?.sender?.userId\n  )) {\n    return false;\n  }\n  return (\n    message?.sendingStatus === comparingMessage?.sendingStatus\n    && message?.sender?.userId === comparingMessage?.sender?.userId\n    && getMessageCreatedAt(message) === getMessageCreatedAt(comparingMessage)\n    && isReadMessage(currentChannel, message) === isReadMessage(currentChannel, comparingMessage)\n  );\n};\n\nexport const compareMessagesForGrouping = (\n  prevMessage,\n  currMessage,\n  nextMessage,\n  currentChannel,\n) => {\n  const sendingStatus = currMessage?.sendingStatus || '';\n  const isAcceptable = sendingStatus !== 'pending' && sendingStatus !== 'failed';\n  return [\n    isSameGroup(prevMessage, currMessage, currentChannel) && isAcceptable,\n    isSameGroup(currMessage, nextMessage, currentChannel) && isAcceptable,\n  ];\n};\n\nexport const hasOwnProperty = (property) => (payload) => {\n  // eslint-disable-next-line no-prototype-builtins\n  if (payload && payload.hasOwnProperty && payload.hasOwnProperty(property)) {\n    return true;\n  }\n  return false;\n};\n\nexport const passUnsuccessfullMessages = (allMessages, newMessage) => {\n  const { sendingStatus = UNDEFINED } = newMessage;\n  if (sendingStatus === SUCCEEDED || sendingStatus === PENDING) {\n    const lastIndexOfSucceededMessage = allMessages\n      .map((message) => (\n        message.sendingStatus\n        || ((message.isAdminMessage && message.isAdminMessage()) ? SUCCEEDED : UNDEFINED)\n      ))\n      .lastIndexOf(SUCCEEDED);\n    if (lastIndexOfSucceededMessage + 1 < allMessages.length) {\n      const messages = [...allMessages];\n      messages.splice(lastIndexOfSucceededMessage + 1, 0, newMessage);\n      return messages;\n    }\n  }\n  return [\n    ...allMessages,\n    newMessage,\n  ];\n};\n\nexport const pxToNumber = (px) => {\n  if (typeof px === 'number') {\n    return px;\n  }\n  if (typeof px === 'string') {\n    const parsed = Number.parseFloat(px);\n    if (!Number.isNaN(parsed)) {\n      return parsed;\n    }\n  }\n  return null;\n};\n\nexport const isAboutSame = (a, b, px) => (Math.abs(a - b) <= px);\n\nexport default getParsedStatus;\n","export default {\n  initialized: false,\n  loading: false,\n  allMessages: [],\n  currentGroupChannel: { members: [] },\n  // for scrollup\n  hasMorePrev: false,\n  oldestMessageTimeStamp: 0,\n  // for scroll down\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  hasMoreNext: false,\n  latestMessageTimeStamp: 0,\n  emojiContainer: {},\n  unreadSince: null,\n  isInvalid: false,\n  messageListParams: null,\n};\n","import format from 'date-fns/format';\n\nimport * as actionTypes from './actionTypes';\nimport compareIds from '../../../../utils/compareIds';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\nimport { passUnsuccessfullMessages } from '../utils';\nimport { filterMessageListParams, getSendingMessageStatus } from '../../../../utils';\n\nconst {\n  SUCCEEDED,\n  FAILED,\n  PENDING,\n} = getSendingMessageStatus();\nconst getOldestMessageTimeStamp = (messages = []) => {\n  const oldestMessage = messages[0];\n  return (oldestMessage && oldestMessage.createdAt) || null;\n};\nconst getLatestMessageTimeStamp = (messages = []) => {\n  const latestMessage = messages[messages.length - 1];\n  return (latestMessage && latestMessage.createdAt) || null;\n};\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actionTypes.RESET_MESSAGES:\n      return {\n        ...state,\n        // when user switches channel, if the previous channel `hasMorePrev`\n        // the onScroll gets called twice, setting hasMorePrev false prevents this\n        hasMorePrev: false,\n        hasMoreNext: false,\n        allMessages: [],\n      };\n    case actionTypes.FETCH_INITIAL_MESSAGES_START: {\n      return {\n        ...state,\n        loading: true,\n        allMessages: [\n          ...state.allMessages.filter((m) => (\n            m.sendingStatus !== SUCCEEDED\n          )),\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n      return {\n        ...state,\n        loading: false,\n        initialized: true,\n        hasMorePrev: true,\n        hasMoreNext: true,\n        oldestMessageTimeStamp,\n        latestMessageTimeStamp,\n        allMessages: [...messages],\n      };\n    }\n    case actionTypes.FETCH_PREV_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMorePrev = messages && messages.length === PREV_RESULT_SIZE + 1;\n      const oldestMessageTimeStamp = getOldestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMorePrev,\n        oldestMessageTimeStamp,\n        allMessages: [\n          ...filteredNewMessages,\n          ...updatedOldMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_NEXT_MESSAGES_SUCCESS: {\n      const {\n        currentGroupChannel,\n        messages,\n      } = action.payload;\n      if (!(currentGroupChannel?.url === state.currentGroupChannel?.url)) {\n        return state;\n      }\n      const hasMoreNext = messages && messages.length === NEXT_RESULT_SIZE + 1;\n      const latestMessageTimeStamp = getLatestMessageTimeStamp(messages);\n\n      // Remove duplicated messages\n      const duplicatedMessageIds = [];\n      const updatedOldMessages = state.allMessages.map((msg) => {\n        const duplicatedMessage = messages.find(({ messageId }) => (\n          compareIds(messageId, msg.messageId)\n        ));\n        if (!duplicatedMessage) {\n          return msg;\n        }\n        duplicatedMessageIds.push(duplicatedMessage.messageId);\n        return (duplicatedMessage.updatedAt > msg.updatedAt) ? duplicatedMessage : msg;\n      });\n      const filteredNewMessages = (duplicatedMessageIds.length > 0)\n        ? messages.filter((msg) => (\n          !duplicatedMessageIds.find((messageId) => compareIds(messageId, msg.messageId))\n        ))\n        : messages;\n\n      return {\n        ...state,\n        hasMoreNext,\n        latestMessageTimeStamp,\n        allMessages: [\n          ...updatedOldMessages,\n          ...filteredNewMessages,\n        ],\n      };\n    }\n    case actionTypes.FETCH_INITIAL_MESSAGES_FAILURE:\n    case actionTypes.FETCH_PREV_MESSAGES_FAILURE:\n    case actionTypes.FETCH_NEXT_MESSAGES_FAILURE: {\n      const { currentGroupChannel } = action.payload;\n      if (currentGroupChannel?.url !== state?.currentGroupChannel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        loading: false,\n        initialized: false,\n        allMessages: [],\n        hasMorePrev: false,\n        hasMoreNext: false,\n        oldestMessageTimeStamp: null,\n        latestMessageTimeStamp: null,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: [\n          ...state.allMessages,\n          { ...action.payload },\n        ],\n      };\n    case actionTypes.SEND_MESSAGEGE_SUCESS: {\n      const newMessages = state.allMessages.map((m) => (\n        compareIds(m.reqId, action.payload.reqId) ? action.payload : m\n      ));\n      [...newMessages].sort((a, b) => (\n        (\n          a.sendingStatus\n          && b.sendingStatus\n          && a.sendingStatus === SUCCEEDED\n          && (\n            b.sendingStatus === PENDING\n            || b.sendingStatus === FAILED\n          )\n        ) ? -1 : 1\n      ));\n      return {\n        ...state,\n        allMessages: newMessages,\n      };\n    }\n    case actionTypes.SEND_MESSAGEGE_FAILURE: {\n      // eslint-disable-next-line no-param-reassign\n      action.payload.failed = true;\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    }\n    case actionTypes.SET_CURRENT_CHANNEL: {\n      return {\n        ...state,\n        currentGroupChannel: action.payload,\n        isInvalid: false,\n      };\n    }\n    case actionTypes.SET_CHANNEL_INVALID: {\n      return {\n        ...state,\n        isInvalid: true,\n      };\n    }\n    case actionTypes.ON_MESSAGE_RECEIVED: {\n      const { channel, message } = action.payload;\n      const { members } = channel;\n      const { sender } = message;\n      const { currentGroupChannel = {}, unreadSince } = state;\n      const currentGroupChannelUrl = currentGroupChannel.url;\n\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state;\n      }\n      // Excluded overlapping messages\n      if (state.allMessages.some((msg) => msg.messageId === message.messageId)) {\n        return state;\n      }\n      // Filter by userFilledQuery\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        return state;\n      }\n\n      if (message.isAdminMessage && message.isAdminMessage()) {\n        return {\n          ...state,\n          allMessages: passUnsuccessfullMessages(state.allMessages, message),\n        };\n      }\n\n      // Update members when sender profileUrl, nickname, friendName has been changed\n      const senderMember = members?.find((m) => (m?.userId === sender?.userId));\n      if ((senderMember?.profileUrl !== sender?.profileUrl)\n        || (senderMember?.friendName !== sender?.friendName)\n        || (senderMember?.nickname !== sender?.nickname)) {\n        channel.members = members.map((member) => {\n          if (member.userId === sender.userId) {\n            return sender;\n          }\n          return member;\n        });\n      }\n\n      return {\n        ...state,\n        currentGroupChannel: channel,\n        unreadSince: state?.unreadSince ? unreadSince : format(new Date(), 'p MMM dd'),\n        allMessages: passUnsuccessfullMessages(state.allMessages, message),\n      };\n    }\n    case actionTypes.ON_MESSAGE_UPDATED: {\n      const { channel, message } = action.payload;\n      const currentGroupChannelUrl = (state.currentGroupChannel && state.currentGroupChannel.url) || '';\n      if (!compareIds(channel.url, currentGroupChannelUrl)) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      if (state.messageListParams && !filterMessageListParams(state.messageListParams, message)) {\n        // Delete the message if it doesn't match to the params anymore\n        return {\n          ...state,\n          allMessages: state.allMessages.filter((m) => (\n            !compareIds(m.messageId, message?.messageId)\n          )),\n        };\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.messageId, action.payload.message.messageId)\n            ? action.payload.message\n            : m\n        )),\n      };\n    }\n    case actionTypes.ON_MESSAGE_THREAD_INFO_UPDATED: {\n      const { channel, event } = action.payload;\n      const { channelUrl, threadInfo, targetMessageId } = event;\n      const currentGroupChannelUrl = (state.currentGroupChannel && state.currentGroupChannel.url) || '';\n      if (\n        !compareIds(channel.url, currentGroupChannelUrl)\n        || !compareIds(channel.url, channelUrl)\n      ) {\n        return state; // Ignore event when it is not for the current channel\n      }\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, targetMessageId)) {\n            // eslint-disable-next-line no-param-reassign\n            m.threadInfo = threadInfo; // Upsert threadInfo to the target message\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.RESEND_MESSAGEGE_START:\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => (\n          compareIds(m.reqId, action.payload.reqId)\n            ? action.payload\n            : m\n        )),\n      };\n    case actionTypes.MARK_AS_READ:\n      if (state.currentGroupChannel?.url !== action.payload?.channel?.url) {\n        return state;\n      }\n      return {\n        ...state,\n        unreadSince: null,\n      };\n    case actionTypes.ON_MESSAGE_DELETED:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.messageId, action.payload)\n        )),\n      };\n    case actionTypes.ON_MESSAGE_DELETED_BY_REQ_ID:\n      return {\n        ...state,\n        allMessages: state.allMessages.filter((m) => (\n          !compareIds(m.reqId, action.payload)\n        )),\n      };\n    case actionTypes.SET_EMOJI_CONTAINER: {\n      return {\n        ...state,\n        emojiContainer: action.payload,\n      };\n    }\n    case actionTypes.ON_REACTION_UPDATED: {\n      return {\n        ...state,\n        allMessages: state.allMessages.map((m) => {\n          if (compareIds(m.messageId, action.payload.messageId)) {\n            if (m.applyReactionEvent && typeof m.applyReactionEvent === 'function') {\n              m.applyReactionEvent(action.payload);\n            }\n            return m;\n          }\n          return m;\n        }),\n      };\n    }\n    case actionTypes.MESSAGE_LIST_PARAMS_CHANGED: {\n      return {\n        ...state,\n        messageListParams: action.payload,\n      };\n    }\n    default:\n      return state;\n  }\n}\n","import { useEffect } from 'react';\n\nimport * as messageActions from '../dux/actionTypes';\nimport { uuidv4 } from '../../../../utils/uuid';\nimport compareIds from '../../../../utils/compareIds';\nimport { scrollIntoLast } from '../utils';\n\n/**\n * Handles ChannelEvents and send values to dispatcher using messagesDispatcher\n * messagesDispatcher: Dispatcher\n * sdk: sdkInstance\n * logger: loggerInstance\n * channelUrl: string\n * sdkInit: bool\n */\nfunction useHandleChannelEvents({ currentGroupChannel, sdkInit, hasMoreNext }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n  scrollRef,\n  setQuoteMessage,\n}) {\n  useEffect(() => {\n    const channelUrl = currentGroupChannel && currentGroupChannel?.url;\n    const messageReceiverId = uuidv4();\n    if (channelUrl && sdk && sdk.ChannelHandler) {\n      const ChannelHandler = new sdk.ChannelHandler();\n      logger.info('Channel | useHandleChannelEvents: Setup event handler', messageReceiverId);\n\n      ChannelHandler.onMessageReceived = (channel, message) => {\n        // Do not update when hasMoreNext\n        if (compareIds(channel.url, channelUrl) && !hasMoreNext) {\n          let scrollToEnd = false;\n          try {\n            const { current } = scrollRef;\n            scrollToEnd = current.offsetHeight + current.scrollTop >= current.scrollHeight;\n          } catch (error) {\n            //\n          }\n\n          logger.info('Channel | useHandleChannelEvents: onMessageReceived', message);\n          messagesDispatcher({\n            type: messageActions.ON_MESSAGE_RECEIVED,\n            payload: { channel, message },\n          });\n\n          if (scrollToEnd) {\n            try {\n              setTimeout(() => {\n                // currentGroupChannel.markAsRead();\n                scrollIntoLast();\n              });\n            } catch (error) {\n              logger.warning('Channel | onMessageReceived | scroll to end failed');\n            }\n          }\n        }\n      };\n\n      /**\n       * We need to update current channel with the channel,\n       * when onReadReceiptUpdated or onDeliveryReceiptUpdated are called,\n       * because cachedReadReceiptStatus and cachedDeliveryReceiptStatus properties were changed\n       */\n      ChannelHandler.onReadReceiptUpdated = (channel) => {\n        if (compareIds(channel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onReadReceiptUpdated', channel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: channel,\n          });\n        }\n      };\n      ChannelHandler.onDeliveryReceiptUpdated = (channel) => {\n        if (compareIds(channel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onDeliveryReceiptUpdated', channel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: channel,\n          });\n        }\n      };\n\n      ChannelHandler.onMessageUpdated = (channel, message) => {\n        logger.info('Channel | useHandleChannelEvents: onMessageUpdated', message);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_UPDATED,\n          payload: { channel, message },\n        });\n      };\n\n      ChannelHandler.onThreadInfoUpdated = (channel, event) => {\n        logger.info('Channel | useHandleChannelEvents: onThreadInfoUpdated', event);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_THREAD_INFO_UPDATED,\n          payload: { channel, event },\n        });\n      };\n\n      ChannelHandler.onMessageDeleted = (_, messageId) => {\n        logger.info('Channel | useHandleChannelEvents: onMessageDeleted', messageId);\n        setQuoteMessage(null);\n        messagesDispatcher({\n          type: messageActions.ON_MESSAGE_DELETED,\n          payload: messageId,\n        });\n      };\n\n      ChannelHandler.onReactionUpdated = (_, reactionEvent) => {\n        logger.info('Channel | useHandleChannelEvents: onReactionUpdated', reactionEvent);\n        messagesDispatcher({\n          type: messageActions.ON_REACTION_UPDATED,\n          payload: reactionEvent,\n        });\n      };\n\n      ChannelHandler.onChannelChanged = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelChanged', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onChannelFrozen = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelFrozen', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onChannelUnfrozen = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onChannelUnFrozen', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserMuted = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserMuted', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserUnmuted = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserUnmuted', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onUserBanned = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onUserBanned', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      ChannelHandler.onOperatorUpdated = (groupChannel) => {\n        if (compareIds(groupChannel.url, channelUrl)) {\n          logger.info('Channel | useHandleChannelEvents: onOperatorUpdated', groupChannel);\n          messagesDispatcher({\n            type: messageActions.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n        }\n      };\n\n      // Add this channel event handler to the SendBird object.\n      sdk.addChannelHandler(messageReceiverId, ChannelHandler);\n    }\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        logger.info('Channel | useHandleChannelEvents: Removing message reciver handler', messageReceiverId);\n        sdk.removeChannelHandler(messageReceiverId);\n      }\n    };\n  }, [currentGroupChannel?.url, sdkInit]);\n}\n\nexport default useHandleChannelEvents;\n","import { useEffect } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useSetChannel({ channelUrl, sdkInit }, {\n  messagesDispatcher,\n  sdk,\n  logger,\n}) {\n  useEffect(() => {\n    if (channelUrl && sdkInit && sdk && sdk.GroupChannel) {\n      logger.info('Channel | useSetChannel fetching channel', channelUrl);\n      sdk.GroupChannel.getChannel(channelUrl)\n        .then((groupChannel) => {\n          logger.info('Channel | useSetChannel fetched channel', groupChannel);\n          messagesDispatcher({\n            type: messageActionTypes.SET_CURRENT_CHANNEL,\n            payload: groupChannel,\n          });\n\n          logger.info('Channel: Mark as read', groupChannel);\n          // this order is important - this mark as read should update the event handler up above\n          // groupChannel.markAsRead();\n        })\n        .catch((e) => {\n          logger.warning('Channel | useSetChannel fetch channel failed', { channelUrl, e });\n          messagesDispatcher({\n            type: messageActionTypes.SET_CHANNEL_INVALID,\n          });\n        });\n      sdk.getAllEmoji((emojiContainer_, err) => {\n        if (err) {\n          logger.error('Channel: Getting emojis failed', err);\n          return;\n        }\n        logger.info('Channel: Getting emojis success', emojiContainer_);\n        messagesDispatcher({\n          type: messageActionTypes.SET_EMOJI_CONTAINER,\n          payload: emojiContainer_,\n        });\n      });\n    }\n  }, [channelUrl, sdkInit]);\n}\n\nexport default useSetChannel;\n","import { useEffect } from 'react';\n\nimport * as utils from '../utils';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE, NEXT_RESULT_SIZE } from '../const';\n\nfunction useInitialMessagesFetch({\n  currentGroupChannel,\n  userFilledMessageListQuery,\n  initialTimeStamp,\n  replyType,\n}, {\n  sdk,\n  logger,\n  messagesDispatcher,\n}) {\n  const channelUrl = currentGroupChannel && currentGroupChannel.url;\n  useEffect(() => {\n    logger.info('Channel useInitialMessagesFetch: Setup started', currentGroupChannel);\n    messagesDispatcher({\n      type: messageActionTypes.RESET_MESSAGES,\n      payload: null,\n    });\n\n    if (sdk && sdk.MessageListParams\n      && currentGroupChannel && currentGroupChannel.getMessagesByTimestamp) {\n      const messageListParams = new sdk.MessageListParams();\n      messageListParams.prevResultSize = PREV_RESULT_SIZE;\n      if (initialTimeStamp) {\n        messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n      }\n      messageListParams.isInclusive = true;\n      messageListParams.includeReplies = false;\n      messageListParams.includeReaction = true;\n      if (replyType && replyType === 'QUOTE_REPLY') {\n        messageListParams.includeThreadInfo = true;\n        messageListParams.includeParentMessageInfo = true;\n        messageListParams.replyType = 'only_reply_to_channel';\n      }\n      if (userFilledMessageListQuery) {\n        Object.keys(userFilledMessageListQuery).forEach((key) => {\n          messageListParams[key] = userFilledMessageListQuery[key];\n        });\n      }\n      if ((replyType && replyType === 'QUOTE_REPLY') || userFilledMessageListQuery) {\n        logger.info('Channel useInitialMessagesFetch: Setup messageListParams', messageListParams);\n        messagesDispatcher({\n          type: messageActionTypes.MESSAGE_LIST_PARAMS_CHANGED,\n          payload: messageListParams,\n        });\n      }\n\n      logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n      messagesDispatcher({\n        type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n        payload: null,\n      });\n\n      currentGroupChannel.getMessagesByTimestamp(\n        initialTimeStamp || new Date().getTime(),\n        messageListParams,\n      )\n        .then((messages) => {\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n            payload: {\n              currentGroupChannel,\n              messages,\n            },\n          });\n        })\n        .catch((error) => {\n          logger.error('Channel: Fetching messages failed', error);\n          messagesDispatcher({\n            type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n            payload: { currentGroupChannel },\n          });\n        })\n        .finally(() => {\n          if (!initialTimeStamp) {\n            setTimeout(() => utils.scrollIntoLast());\n          }\n        });\n    }\n  }, [channelUrl, userFilledMessageListQuery, initialTimeStamp]);\n  /**\n   * Note - useEffect(() => {}, [currentGroupChannel])\n   * was buggy, that is why we did\n   * const channelUrl = currentGroupChannel && currentGroupChannel.url;\n   * useEffect(() => {}, [channelUrl])\n   * Again, this hook is supposed to execute when currentGroupChannel changes\n   * The 'channelUrl' here is not the same memory reference from Conversation.props\n   */\n}\n\nexport default useInitialMessagesFetch;\n","import { useEffect } from 'react';\n\nimport * as utils from '../utils';\nimport { PREV_RESULT_SIZE } from '../const';\nimport * as messageActionTypes from '../dux/actionTypes';\nimport SendBird, { GroupChannel } from 'sendbird';\nimport { Logger } from '../../../../lib/SendbirdState';\n\ninterface DynamicParams {\n  isOnline: boolean;\n  replyType?: string;\n}\n\ninterface StaticParams {\n  logger: Logger;\n  sdk: SendBird.SendBirdInstance;\n  currentGroupChannel: GroupChannel;\n  messagesDispatcher: ({ type: string, payload: any }) => void;\n  userFilledMessageListQuery?: Record<string, any>;\n}\n\nfunction useHandleReconnect(\n  { isOnline, replyType }: DynamicParams,\n  {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  }: StaticParams,\n): void {\n  useEffect(() => {\n    const wasOffline = !isOnline;\n    return () => {\n      // state changed from offline to online\n      if (wasOffline && currentGroupChannel?.url) {\n        logger.info('Refreshing conversation state');\n        const useReaction = sdk?.appInfo?.isUsingReaction || false;\n\n        const messageListParams = new sdk.MessageListParams();\n        messageListParams.prevResultSize = PREV_RESULT_SIZE;\n        messageListParams.isInclusive = true;\n        messageListParams.includeReplies = false;\n        messageListParams.includeReaction = useReaction;\n        if (replyType && replyType === 'QUOTE_REPLY') {\n          messageListParams.includeThreadInfo = true;\n          messageListParams.includeParentMessageInfo = true;\n          messageListParams.replyType = 'only_reply_to_channel';\n        }\n        if (userFilledMessageListQuery) {\n          Object.keys(userFilledMessageListQuery).forEach((key) => {\n            messageListParams[key] = userFilledMessageListQuery[key];\n          });\n        }\n        logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_INITIAL_MESSAGES_START,\n          payload: null,\n        });\n\n        sdk.GroupChannel.getChannel(currentGroupChannel.url)\n          .then((groupChannel) => {\n            const lastMessageTime = new Date().getTime();\n\n            groupChannel.getMessagesByTimestamp(\n              lastMessageTime,\n              messageListParams,\n            )\n              .then((messages) => {\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_SUCCESS,\n                  payload: {\n                    currentGroupChannel,\n                    messages,\n                  },\n                });\n                setTimeout(() => utils.scrollIntoLast());\n              })\n              .catch((error) => {\n                logger.error('Channel: Fetching messages failed', error);\n                messagesDispatcher({\n                  type: messageActionTypes.FETCH_INITIAL_MESSAGES_FAILURE,\n                  payload: { currentGroupChannel },\n                });\n              })\n              .finally(() => {\n                // currentGroupChannel.markAsRead?.();\n              });\n          });\n      }\n    };\n  }, [isOnline, replyType]);\n}\n\nexport default useHandleReconnect;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { PREV_RESULT_SIZE } from '../const';\n\nfunction useScrollCallback({\n  currentGroupChannel,\n  oldestMessageTimeStamp,\n  userFilledMessageListQuery,\n  replyType,\n}, {\n  hasMorePrev,\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMorePrev) { return; }\n    const { appInfo = {} } = sdk;\n    const useReaction = appInfo.isUsingReaction || false;\n\n    const messageListParams = new sdk.MessageListParams();\n    messageListParams.prevResultSize = PREV_RESULT_SIZE;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      oldestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_PREV_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, oldestMessageTimeStamp, replyType]);\n}\n\nexport default useScrollCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport { NEXT_RESULT_SIZE } from '../const';\n\nfunction useScrollDownCallback({\n  currentGroupChannel,\n  latestMessageTimeStamp,\n  userFilledMessageListQuery,\n  hasMoreNext,\n  replyType,\n}, {\n  logger,\n  messagesDispatcher,\n  sdk,\n}) {\n  return useCallback((cb) => {\n    if (!hasMoreNext) { return; }\n    const { appInfo = {} } = sdk;\n    const useReaction = appInfo.isUsingReaction || false;\n\n    const messageListParams = new sdk.MessageListParams();\n    messageListParams.nextResultSize = NEXT_RESULT_SIZE;\n    messageListParams.isInclusive = true;\n    messageListParams.includeReplies = false;\n    messageListParams.includeReaction = useReaction;\n    if (replyType && replyType === 'QUOTE_REPLY') {\n      messageListParams.includeThreadInfo = true;\n      messageListParams.includeParentMessageInfo = true;\n      messageListParams.replyType = 'only_reply_to_channel';\n    }\n    if (userFilledMessageListQuery) {\n      Object.keys(userFilledMessageListQuery).forEach((key) => {\n        messageListParams[key] = userFilledMessageListQuery[key];\n      });\n    }\n    logger.info('Channel: Fetching later messages', { currentGroupChannel, userFilledMessageListQuery });\n\n    currentGroupChannel.getMessagesByTimestamp(\n      latestMessageTimeStamp || new Date().getTime(),\n      messageListParams,\n    )\n      .then((messages) => {\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_SUCCESS,\n          payload: { currentGroupChannel, messages },\n        });\n        cb([messages, null]);\n      })\n      .catch((error) => {\n        logger.error('Channel: Fetching later messages failed', error);\n        messagesDispatcher({\n          type: messageActionTypes.FETCH_NEXT_MESSAGES_FAILURE,\n          payload: { currentGroupChannel },\n        });\n        cb([null, error]);\n      });\n  }, [currentGroupChannel, latestMessageTimeStamp, hasMoreNext, replyType]);\n}\n\nexport default useScrollDownCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher }, { logger }) {\n  return useCallback((message) => {\n    logger.info('Channel | useDeleteMessageCallback: Deleting message', message);\n    const { requestState } = message;\n    return new Promise((resolve, reject) => {\n      logger.info('Channel | useDeleteMessageCallback: Deleting message requestState:', requestState);\n      // Message is only on local\n      if (requestState === 'failed' || requestState === 'pending') {\n        logger.info('Channel | useDeleteMessageCallback: Deleted message from local:', message);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_DELETED_BY_REQ_ID,\n          payload: message.reqId,\n        });\n        resolve(message);\n      }\n\n      // Message is on server\n      currentGroupChannel.deleteMessage(message, (err) => {\n        logger.info('Channel | useDeleteMessageCallback: Deleting message from remote:', requestState);\n        if (!err) {\n          logger.info('Channel | useDeleteMessageCallback: Deleting message success!', message);\n          messagesDispatcher({\n            type: messageActionTypes.ON_MESSAGE_DELETED,\n            payload: message.messageId,\n          });\n          resolve(message);\n        } else {\n          logger.warning('Channel | useDeleteMessageCallback: Deleting message failed!', err);\n          reject(err);\n        }\n      });\n    });\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useDeleteMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nfunction useUpdateMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n  onBeforeUpdateUserMessage,\n  isMentionEnabled,\n}, {\n  logger,\n  pubSub,\n  sdk,\n}) {\n  return useCallback((props, callback) => {\n    const {\n      messageId,\n      message,\n      mentionedUsers,\n      mentionTemplate,\n    } = props;\n    const createParamsDefault = () => {\n      const params = new sdk.UserMessageParams();\n      params.message = message;\n      if (isMentionEnabled && mentionedUsers?.length > 0) {\n        params.mentionedUsers = mentionedUsers;\n      }\n      if (isMentionEnabled && mentionTemplate) {\n        params.mentionedMessageTemplate = mentionTemplate;\n      } else {\n        params.mentionedMessageTemplate = message;\n      }\n      return params;\n    };\n\n    const createCustomPrams = onBeforeUpdateUserMessage\n      && typeof onBeforeUpdateUserMessage === 'function';\n\n    if (createCustomPrams) {\n      logger.info('Channel: creating params using onBeforeUpdateUserMessage', onBeforeUpdateUserMessage);\n    }\n\n    const params = onBeforeUpdateUserMessage\n      ? onBeforeUpdateUserMessage(message)\n      : createParamsDefault(message);\n\n    currentGroupChannel.updateUserMessage(messageId, params, (r, e) => {\n      logger.info('Channel: Updating message!', params);\n      const swapParams = sdk.getErrorFirstCallback();\n      let msg = r;\n      let err = e;\n      if (swapParams) {\n        msg = e;\n        err = r;\n      }\n      if (callback) {\n        callback(err, msg);\n      }\n      if (!err) {\n        logger.info('Channel: Updating message success!', msg);\n        messagesDispatcher({\n          type: messageActionTypes.ON_MESSAGE_UPDATED,\n          payload: {\n            channel: currentGroupChannel,\n            message: msg,\n          },\n        });\n        pubSub.publish(\n          topics.UPDATE_USER_MESSAGE,\n          {\n            message: msg,\n            channel: currentGroupChannel,\n          },\n        );\n      } else {\n        logger.warning('Channel: Updating message failed!', err);\n      }\n    });\n  }, [currentGroupChannel.url, messagesDispatcher, onBeforeUpdateUserMessage]);\n}\n\nexport default useUpdateMessageCallback;\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\n\nfunction useResendMessageCallback({\n  currentGroupChannel,\n  messagesDispatcher,\n}, {\n  logger,\n}) {\n  return useCallback((failedMessage) => {\n    logger.info('Channel: Resending message has started', failedMessage);\n    const { messageType, file } = failedMessage;\n    if (failedMessage && typeof failedMessage.isResendable === 'function'\n      && failedMessage.isResendable()\n    ) {\n      // Move the logic setting sendingStatus to pending into the reducer\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.requestState = 'pending';\n      // eslint-disable-next-line no-param-reassign\n      failedMessage.sendingStatus = 'pending';\n      messagesDispatcher({\n        type: messageActionTypes.RESEND_MESSAGEGE_START,\n        payload: failedMessage,\n      });\n\n      // userMessage\n      if (messageType === 'user') {\n        currentGroupChannel\n          .resendUserMessage(failedMessage)\n          .then((message) => {\n            logger.info('Channel: Resending message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n        return;\n      }\n\n      if (messageType === 'file') {\n        currentGroupChannel\n          .resendFileMessage(failedMessage, file)\n          .then((message) => {\n            logger.info('Channel: Resending file message success!', message);\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n              payload: message,\n            });\n          })\n          .catch((e) => {\n            logger.warning('Channel: Resending file message failed!', e);\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.requestState = 'failed';\n            // eslint-disable-next-line no-param-reassign\n            failedMessage.sendingStatus = 'failed';\n            messagesDispatcher({\n              type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n              payload: failedMessage,\n            });\n          });\n\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.requestState = 'pending';\n        // eslint-disable-next-line no-param-reassign\n        failedMessage.sendingStatus = 'pending';\n        messagesDispatcher({\n          type: messageActionTypes.RESEND_MESSAGEGE_START,\n          payload: failedMessage,\n        });\n      }\n    } else {\n      // to alert user on console\n      // eslint-disable-next-line no-console\n      console.error('Message is not resendable');\n      logger.warning('Message is not resendable', failedMessage);\n    }\n  }, [currentGroupChannel, messagesDispatcher]);\n}\n\nexport default useResendMessageCallback;\n","import { useRef, useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendMessageCallback({\n  isMentionEnabled,\n  currentGroupChannel,\n  onBeforeSendUserMessage,\n}, {\n  sdk,\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const messageInputRef = useRef(null);\n\n  const sendMessage = useCallback(\n    (props) => {\n      const {\n        quoteMessage = null,\n        message,\n        mentionTemplate,\n        // mentionedUserIds,\n        mentionedUsers,\n      } = props;\n      const createParamsDefault = () => {\n        const params = new sdk.UserMessageParams();\n        params.message = message?.trim() || message;\n        // if (isMentionEnabled && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionedUsers?.length > 0) {\n          // params.mentionedUserIds = mentionedUserIds;\n          params.mentionedUsers = mentionedUsers;\n        }\n        // if (isMentionEnabled && mentionTemplate && mentionedUserIds?.length > 0) {\n        if (isMentionEnabled && mentionTemplate && mentionedUsers?.length > 0) {\n          params.mentionedMessageTemplate = mentionTemplate?.trim() || mentionTemplate;\n        }\n        if (quoteMessage) {\n          params.isReplyToChannel = true;\n          params.parentMessageId = quoteMessage.messageId;\n        }\n        return params;\n      };\n\n      const createCustomPrams = onBeforeSendUserMessage\n        && typeof onBeforeSendUserMessage === 'function';\n\n      if (createCustomPrams) {\n        logger.info('Channel: creating params using onBeforeSendUserMessage', onBeforeSendUserMessage);\n      }\n\n      const params = onBeforeSendUserMessage\n        ? onBeforeSendUserMessage(message, quoteMessage)\n        : createParamsDefault();\n\n      logger.info('Channel: Sending message has started', params);\n      const pendingMsg = currentGroupChannel.sendUserMessage(params, (res, err) => {\n        const swapParams = sdk.getErrorFirstCallback();\n        let msg = res;\n        let error = err;\n        if (swapParams) {\n          msg = err;\n          error = res;\n        }\n        // sending params instead of pending message\n        // to make sure that we can resend the message once it fails\n        if (error) {\n          logger.warning('Channel: Sending message failed!', {\n            msg,\n          });\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: msg,\n          });\n          return;\n        }\n        logger.info('Channel: Sending message success!', msg);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: msg,\n        });\n      });\n      pubSub.publish(topics.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: pendingMsg,\n        channel: currentGroupChannel,\n      });\n      setTimeout(() => utils.scrollIntoLast());\n    },\n    [currentGroupChannel, onBeforeSendUserMessage],\n  );\n\n  return [messageInputRef, sendMessage];\n}\n","import { useCallback } from 'react';\n\nimport * as messageActionTypes from '../dux/actionTypes';\nimport * as utils from '../utils';\nimport * as topics from '../../../../lib/pubSub/topics';\n\nexport default function useSendFileMessageCallback({\n  currentGroupChannel,\n  onBeforeSendFileMessage,\n  imageCompression = {},\n}, {\n  sdk,\n  logger,\n  pubSub,\n  messagesDispatcher,\n}) {\n  const sendMessage = useCallback((file, quoteMessage = null) => {\n    const {\n      compressionRate,\n      resizingWidth,\n      resizingHeight,\n    } = imageCompression;\n    const createCustomParams = onBeforeSendFileMessage && typeof onBeforeSendFileMessage === 'function';\n\n    const compressibleFileType = (file.type === 'image/jpg' || file.type === 'image/png' || file.type === 'image/jpeg');\n    const compressibleRatio = (compressionRate > 0) && (compressionRate < 1);\n    // pxToNumber returns null if values are invalid\n    const compressibleDiamensions = utils.pxToNumber(resizingWidth)\n      || utils.pxToNumber(resizingHeight);\n\n    const canCompressImage = compressibleFileType && (compressibleRatio || compressibleDiamensions);\n\n    const createParamsDefault = (file_) => {\n      const params = new sdk.FileMessageParams();\n      params.file = file_;\n      if (quoteMessage) {\n        params.isReplyToChannel = true;\n        params.parentMessageId = quoteMessage.messageId;\n      }\n      return params;\n    };\n\n    if (canCompressImage) { // Using image compression\n      try {\n        const image = document.createElement('img');\n        image.src = URL.createObjectURL(file);\n        image.onload = () => {\n          URL.revokeObjectURL(image.src);\n          const canvas = document.createElement('canvas');\n          const imageWdith = image.naturalWidth || image.width;\n          const imageHeight = image.naturalHeight || image.height;\n\n          let targetWidth = utils.pxToNumber(resizingWidth) || imageWdith;\n          let targetHeight = utils.pxToNumber(resizingHeight) || imageHeight;\n\n          // In canvas.toBlob(callback, mimeType, qualityArgument)\n          // qualityArgument doesnt work\n          // so in case compressibleDiamensions are not present, we use ratio\n          if (file.type === 'image/png' && !compressibleDiamensions) {\n            targetWidth *= compressionRate;\n            targetHeight *= compressionRate;\n          }\n\n          canvas.width = targetWidth;\n          canvas.height = targetHeight;\n          const context = canvas.getContext('2d');\n          context.drawImage(image, 0, 0, targetWidth, targetHeight);\n          context.canvas.toBlob(\n            (newImageBlob) => {\n              const compressedFile = new File([newImageBlob], file.name, { type: file.type });\n              if (createCustomParams) {\n                logger.info('Channel: Creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n              }\n              const params = createCustomParams\n                ? onBeforeSendFileMessage(compressedFile, quoteMessage)\n                : createParamsDefault(compressedFile);\n              logger.info('Channel: Uploading file message start!', params);\n              const pendingMessage = currentGroupChannel.sendFileMessage(\n                params,\n                (response, err) => {\n                  const swapParams = sdk.getErrorFirstCallback();\n                  const [message, error] = swapParams ? [err, response] : [response, err];\n                  if (error) {\n                    // sending params instead of pending message\n                    // to make sure that we can resend the message once it fails\n                    logger.error('Channel: Sending file message failed!', { message, error });\n                    message.localUrl = URL.createObjectURL(compressedFile);\n                    message.file = compressedFile;\n                    messagesDispatcher({\n                      type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n                      payload: message,\n                    });\n                    return;\n                  }\n                  logger.info('Channel: Sending file message success!', message);\n                  messagesDispatcher({\n                    type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n                    payload: message,\n                  });\n                },\n              );\n              pubSub.publish(topics.SEND_MESSAGE_START, {\n                /* pubSub is used instead of messagesDispatcher\n                  to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n                message: {\n                  ...pendingMessage,\n                  url: URL.createObjectURL(compressedFile),\n                  // pending thumbnail message seems to be failed\n                  requestState: 'pending',\n                },\n                channel: currentGroupChannel,\n              });\n              setTimeout(() => utils.scrollIntoLast(), 1000);\n            },\n            file.type,\n            compressionRate,\n          );\n        };\n      } catch (error) {\n        logger.error('Channel: Sending file message failed!', error);\n      }\n    } else { // Not using image compression\n      if (createCustomParams) {\n        logger.info('Channel: creating params using onBeforeSendFileMessage', onBeforeSendFileMessage);\n      }\n      const params = onBeforeSendFileMessage\n        ? onBeforeSendFileMessage(file, quoteMessage)\n        : createParamsDefault(file);\n      logger.info('Channel: Uploading file message start!', params);\n\n      const pendingMsg = currentGroupChannel.sendFileMessage(params, (response, err) => {\n        const swapParams = sdk.getErrorFirstCallback();\n        const [message, error] = swapParams ? [err, response] : [response, err];\n        if (error) {\n          // sending params instead of pending message\n          // to make sure that we can resend the message once it fails\n          logger.error('Channel: Sending file message failed!', { message, error });\n          message.localUrl = URL.createObjectURL(file);\n          message.file = file;\n          messagesDispatcher({\n            type: messageActionTypes.SEND_MESSAGEGE_FAILURE,\n            payload: message,\n          });\n          return;\n        }\n        logger.info('Channel: Sending message success!', message);\n        messagesDispatcher({\n          type: messageActionTypes.SEND_MESSAGEGE_SUCESS,\n          payload: message,\n        });\n      });\n      pubSub.publish(topics.SEND_MESSAGE_START, {\n        /* pubSub is used instead of messagesDispatcher\n          to avoid redundantly calling `messageActionTypes.SEND_MESSAGEGE_START` */\n        message: {\n          ...pendingMsg,\n          url: URL.createObjectURL(file),\n          // pending thumbnail message seems to be failed\n          requestState: 'pending',\n        },\n        channel: currentGroupChannel,\n      });\n      setTimeout(() => utils.scrollIntoLast(), 1000);\n    }\n  }, [currentGroupChannel, onBeforeSendFileMessage, imageCompression]);\n  return [sendMessage];\n}\n","import React, { useMemo } from 'react';\n\nimport { EmojiListItems } from '../../../../ui/ContextMenu';\nimport ReactionButton from '../../../../ui/ReactionButton';\nimport ImageRenderer from '../../../../ui/ImageRenderer';\nimport Icon, { IconTypes } from '../../../../ui/Icon';\n\nexport default function useMemoizedEmojiListItems({\n  emojiContainer, toggleReaction,\n}, {\n  useReaction,\n  logger,\n  userId,\n  emojiAllList,\n}) {\n  /* eslint-disable react/prop-types */\n  return useMemo(() => ({\n    parentRef,\n    parentContainRef,\n    message,\n    closeDropdown,\n    spaceFromTrigger = {},\n  }) => {\n    if (!useReaction || !(parentRef || parentContainRef || message || closeDropdown)) {\n      logger.warning('Channel: Invalid Params in memoizedEmojiListItems');\n      return null;\n    }\n\n    return (\n      <EmojiListItems\n        parentRef={parentRef}\n        parentContainRef={parentContainRef}\n        closeDropdown={closeDropdown}\n        spaceFromTrigger={spaceFromTrigger}\n      >\n        {\n          emojiAllList.map((emoji) => {\n            const reactedReaction = message.reactions\n              .filter((reaction) => reaction.key === emoji.key)[0];\n            const isReacted = reactedReaction\n              ? !(reactedReaction.userIds.indexOf(userId) < 0)\n              : false;\n            return (\n              <ReactionButton\n                key={emoji.key}\n                width=\"36px\"\n                height=\"36px\"\n                selected={isReacted}\n                onClick={() => {\n                  closeDropdown();\n                  toggleReaction(message, emoji.key, isReacted);\n                }}\n              >\n                <ImageRenderer\n                  url={emoji.url}\n                  width=\"28px\"\n                  height=\"28px\"\n                  defaultComponent={\n                    <Icon width=\"28px\" height=\"28px\" type={IconTypes.QUESTION} />\n                  }\n                />\n              </ReactionButton>\n            );\n          })\n        }\n      </EmojiListItems>\n    );\n  }, [emojiContainer, toggleReaction]);\n}\n","import { useCallback } from 'react';\n\nexport default function useToggleReactionCallback({ currentGroupChannel }, { logger }) {\n  return useCallback((message, key, isReacted) => {\n    if (isReacted) {\n      currentGroupChannel.deleteReaction(message, key)\n        .then((res) => {\n          logger.info('Delete reaction success', res);\n        })\n        .catch((err) => {\n          logger.warning('Delete reaction failed', err);\n        });\n      return;\n    }\n    currentGroupChannel.addReaction(message, key)\n      .then((res) => {\n        logger.info('Add reaction success', res);\n      })\n      .catch((err) => {\n        logger.warning('Add reaction failed', err);\n      });\n  }, [currentGroupChannel]);\n}\n","import { useCallback } from 'react';\nimport { BaseMessageInstance } from 'sendbird';\n\nimport { Logger } from '../../../../index';\n\ninterface DynamicParams {\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  allMessages: BaseMessageInstance[];\n}\n\ninterface StaticParams {\n  logger: Logger;\n}\n\nfunction useScrollToMessage({\n  setInitialTimeStamp,\n  setAnimatedMessageId,\n  allMessages,\n}: DynamicParams,\n  { logger }: StaticParams,\n): (createdAt: number, messageId: number) => void {\n  return useCallback(\n    (createdAt: number, messageId: number) => {\n      const isPresent = allMessages.find((m) => (\n        m.messageId === messageId\n      ));\n      setAnimatedMessageId(null);\n      setTimeout(() => {\n        if (isPresent) {\n          logger.info('Channel: scroll to message - message is present');\n          setAnimatedMessageId(messageId);\n        } else {\n          logger.info('Channel: scroll to message - fetching older messages');\n          setInitialTimeStamp(null);\n          setInitialTimeStamp(createdAt);\n          setAnimatedMessageId(messageId);\n        }\n      });\n    }, [\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  ],\n  );\n}\n\nexport default useScrollToMessage;\n","\nimport React, {\n  useEffect,\n  useState,\n  useReducer,\n  useRef,\n  useMemo,\n} from 'react';\nimport SendBird, { FileMessage, GroupChannel, UserMessage, UserMessageParams } from 'sendbird';\n\nimport { ReplyType, RenderUserProfileProps } from '../../../types';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CoreMessageType } from '../../../utils';\n\nimport * as utils from './utils';\n\nimport messagesInitialState from './dux/initialState';\nimport messagesReducer from './dux/reducers';\nimport * as messageActionTypes from './dux/actionTypes';\n\nimport useHandleChannelEvents from './hooks/useHandleChannelEvents';\nimport useGetChannel from './hooks/useGetChannel';\nimport useInitialMessagesFetch from './hooks/useInitialMessagesFetch';\nimport useHandleReconnect from './hooks/useHandleReconnect';\nimport useScrollCallback from './hooks/useScrollCallback';\nimport useScrollDownCallback from './hooks/useScrollDownCallback';\nimport useDeleteMessageCallback from './hooks/useDeleteMessageCallback';\nimport useUpdateMessageCallback from './hooks/useUpdateMessageCallback';\nimport useResendMessageCallback from './hooks/useResendMessageCallback';\nimport useSendMessageCallback from './hooks/useSendMessageCallback';\nimport useSendFileMessageCallback from './hooks/useSendFileMessageCallback';\nimport useMemoizedEmojiListItems from './hooks/useMemoizedEmojiListItems';\nimport useToggleReactionCallback from './hooks/useToggleReactionCallback';\nimport useScrollToMessage from './hooks/useScrollToMessage';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\n\nexport type MessageListParams = {\n  // https://sendbird.github.io/core-sdk-javascript/module-model_params_messageListParams-MessageListParams.html\n  replyType?: string,\n  messageType?: string,\n  prevResultSize?: number,\n  nextResultSize?: number,\n  reverse?: boolean,\n  isInclusive?: boolean,\n  includeMetaArray?: boolean,\n  includeReactions?: boolean,\n  includeThreadInfo?: boolean,\n  includePollDetails?: boolean,\n  includeParentMessageInfo?: boolean,\n  showSubchannelMessagesOnly?: boolean,\n  customTypes?: Array<string>,\n  senderUserIds?: Array<string>,\n};\n\nexport type ChannelQueries = {\n  messageListParams?: MessageListParams;\n};\n\nexport type ChannelContextProps = {\n  children?: React.ReactNode;\n  channelUrl: string;\n  useMessageGrouping?: boolean;\n  useReaction?: boolean;\n  showSearchIcon?: boolean;\n  highlightedMessage?: number;\n  startingPoint?: number;\n  onBeforeSendUserMessage?(text: string, quotedMessage?: SendBird.UserMessage | SendBird.FileMessage): SendBird.UserMessageParams;\n  onBeforeSendFileMessage?(file: File, quotedMessage?: SendBird.UserMessage | SendBird.FileMessage): SendBird.FileMessageParams;\n  onBeforeUpdateUserMessage?(text: string): SendBird.UserMessageParams;\n  onChatHeaderActionClick?(event: React.MouseEvent<HTMLElement>): void;\n  onSearchClick?(): void;\n  replyType?: ReplyType;\n  queries?: ChannelQueries;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n  disableUserProfile?: boolean;\n};\n\ninterface MessageStoreInterface {\n  allMessages: CoreMessageType[];\n  loading: boolean;\n  initialized: boolean;\n  unreadSince: string;\n  isInvalid: boolean;\n  currentGroupChannel: GroupChannel;\n  hasMorePrev: boolean;\n  oldestMessageTimeStamp: number;\n  hasMoreNext: boolean;\n  latestMessageTimeStamp: number;\n  emojiContainer: any;\n  readStatus: any;\n}\n\ninterface SendMessageParams {\n  message: string;\n  quoteMessage?: UserMessage | FileMessage;\n  // mentionedUserIds?: Array<string>;\n  mentionedUsers?: Array<SendBird.User>;\n  mentionTemplate?: string;\n}\n\ninterface UpdateMessageProps {\n  messageId: string | number;\n  message: string;\n  mentionedUsers?: Array<SendBird.User>;\n  mentionTemplate?: string;\n}\n\ninterface ChannelProviderInterface extends ChannelContextProps, MessageStoreInterface {\n  scrollToMessage?(createdAt: number, messageId: number): void;\n  messageActionTypes: Record<string ,string>;\n  messagesDispatcher: CustomUseReducerDispatcher;\n  quoteMessage: UserMessage | FileMessage;\n  setQuoteMessage: React.Dispatch<React.SetStateAction<UserMessage | FileMessage>>;\n  initialTimeStamp: number;\n  setInitialTimeStamp: React.Dispatch<React.SetStateAction<number>>;\n  animatedMessageId: number;\n  highLightedMessageId: number;\n  nicknamesMap: Map<string, string>;\n  emojiAllMap: any;\n  onScrollCallback: any;\n  onScrollDownCallback: any;\n  memoizedEmojiListItems: any;\n  scrollRef: React.MutableRefObject<HTMLDivElement>;\n  setAnimatedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  setHighLightedMessageId: React.Dispatch<React.SetStateAction<number>>;\n  messageInputRef: React.MutableRefObject<HTMLInputElement>,\n  deleteMessage(message: CoreMessageType): Promise<CoreMessageType>,\n  updateMessage(props: UpdateMessageProps, callback?: (err: SendBird.SendBirdError, message: SendBird.UserMessage) => void): Promise<CoreMessageType>,\n  resendMessage(failedMessage: UserMessage | FileMessage): Promise<UserMessage | FileMessage>,\n  // TODO: Good to change interface to using params / This part need refactoring\n  sendMessage(props: SendMessageParams): Promise<SendBird.UserMessage>,\n  sendFileMessage(file: File, quoteMessage: UserMessage | FileMessage): Promise<SendBird.FileMessage>,\n  // sendMessage(messageParams: SendBird.UserMessageParams): Promise<SendBird.UserMessage>,\n  // sendFileMessage(messageParams: SendBird.FileMessageParams): Promise<SendBird.FileMessage>,\n  toggleReaction(message: SendBird.UserMessage | SendBird.FileMessage, emojiKey: string, isReacted: boolean): void,\n  renderUserMentionItem?: (props: { user: SendBird.User }) => JSX.Element;\n}\n\nconst ChannelContext = React.createContext<ChannelProviderInterface | null>(undefined);\n\nconst ChannelProvider: React.FC<ChannelContextProps> = (props: ChannelContextProps) => {\n  const {\n    channelUrl,\n    children,\n    useMessageGrouping,\n    useReaction,\n    showSearchIcon,\n    highlightedMessage,\n    startingPoint,\n    onBeforeSendUserMessage,\n    onBeforeSendFileMessage,\n    onBeforeUpdateUserMessage,\n    onChatHeaderActionClick,\n    onSearchClick,\n    replyType,\n    queries,\n  } = props;\n\n  const globalStore = useSendbirdStateContext();\n  const { config } = globalStore;\n  const { pubSub, logger, userId, isOnline, imageCompression, isMentionEnabled } = config;\n  const sdk = globalStore?.stores?.sdkStore?.sdk;\n  const sdkInit = globalStore?.stores?.sdkStore?.initialized;\n\n  const [initialTimeStamp, setInitialTimeStamp] = useState(startingPoint);\n  useEffect(() => {\n    setInitialTimeStamp(startingPoint);\n  }, [startingPoint, channelUrl]);\n  const [animatedMessageId, setAnimatedMessageId] = useState(null);\n  const [highLightedMessageId, setHighLightedMessageId] = useState(highlightedMessage);\n  useEffect(() => {\n    setHighLightedMessageId(highlightedMessage);\n  }, [highlightedMessage]);\n  const userFilledMessageListQuery = queries?.messageListParams;\n  const [quoteMessage, setQuoteMessage] = useState<UserMessage | FileMessage>(null);\n\n  const [messagesStore, messagesDispatcher] = useReducer(\n    messagesReducer,\n    messagesInitialState,\n  ) as [MessageStoreInterface, CustomUseReducerDispatcher];\n  const scrollRef = useRef(null);\n\n  const {\n    allMessages,\n    loading,\n    initialized,\n    unreadSince,\n    isInvalid,\n    currentGroupChannel,\n    hasMorePrev,\n    oldestMessageTimeStamp,\n    hasMoreNext,\n    latestMessageTimeStamp,\n    emojiContainer,\n    readStatus,\n  } = messagesStore;\n\n  const { isBroadcast, isSuper } = currentGroupChannel;\n  const { appInfo } = sdk;\n  const usingReaction = (\n    appInfo?.isUsingReaction && !isBroadcast && !isSuper && useReaction\n    // TODO: Make useReaction independent from appInfo.isUsingReaction\n  );\n\n  const emojiAllMap = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisMapFromEmojiContainer(emojiContainer)\n      : new Map()\n  ), [emojiContainer]);\n  const emojiAllList = useMemo(() => (\n    usingReaction\n      ? utils.getAllEmojisFromEmojiContainer(emojiContainer)\n      : []\n  ), [emojiContainer]);\n  const nicknamesMap: Map<string, string> = useMemo(() => (\n    usingReaction\n      ? utils.getNicknamesMapFromMembers(currentGroupChannel.members)\n      : new Map()\n  ), [currentGroupChannel.members]);\n\n  // Scrollup is default scroll for channel\n  const onScrollCallback = useScrollCallback({\n    currentGroupChannel, oldestMessageTimeStamp, userFilledMessageListQuery, replyType,\n  }, {\n    hasMorePrev,\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const scrollToMessage = useScrollToMessage({\n    setInitialTimeStamp,\n    setAnimatedMessageId,\n    allMessages,\n  }, { logger });\n\n  // onScrollDownCallback is added for navigation to different timestamps on messageSearch\n  // hasMorePrev, onScrollCallback -> scroll up(default behavior)\n  // hasMoreNext, onScrollDownCallback -> scroll down\n  const onScrollDownCallback = useScrollDownCallback({\n    currentGroupChannel,\n    latestMessageTimeStamp,\n    userFilledMessageListQuery,\n    hasMoreNext,\n    replyType,\n  }, {\n    logger,\n    messagesDispatcher,\n    sdk,\n  });\n\n  const toggleReaction = useToggleReactionCallback({ currentGroupChannel }, { logger });\n\n  const memoizedEmojiListItems = useMemoizedEmojiListItems({\n    emojiContainer, toggleReaction,\n  }, {\n    useReaction: usingReaction,\n    logger,\n    userId,\n    emojiAllList,\n  });\n\n  // to create message-datasource\n  // this hook sets currentGroupChannel asynchronously\n  useGetChannel(\n    { channelUrl, sdkInit },\n    { messagesDispatcher, sdk, logger },\n  );\n\n  // to set quote message as null\n  useEffect(() => {\n    setQuoteMessage(null);\n  }, [channelUrl]);\n\n  // Hook to handle ChannelEvents and send values to useReducer using messagesDispatcher\n  useHandleChannelEvents(\n    { currentGroupChannel, sdkInit, hasMoreNext },\n    {\n      messagesDispatcher,\n      sdk,\n      logger,\n      scrollRef,\n      setQuoteMessage,\n    },\n  );\n\n  // hook that fetches messages when channel changes\n  // to be clear here useGetChannel sets currentGroupChannel\n  // and useInitialMessagesFetch executes when currentGroupChannel changes\n  // p.s This one executes on initialTimeStamp change too\n  useInitialMessagesFetch({\n    currentGroupChannel,\n    userFilledMessageListQuery,\n    initialTimeStamp,\n    latestMessageTimeStamp,\n    replyType,\n  }, {\n    sdk,\n    logger,\n    messagesDispatcher,\n  });\n\n  // handles API calls from withSendbird\n  useEffect(() => {\n    const subScriber = utils.pubSubHandler(channelUrl, pubSub, messagesDispatcher);\n    return () => {\n      utils.pubSubHandleRemover(subScriber);\n    };\n  }, [channelUrl, sdkInit]);\n\n  // handling connection breaks\n  useHandleReconnect({ isOnline, replyType }, {\n    logger,\n    sdk,\n    currentGroupChannel,\n    messagesDispatcher,\n    userFilledMessageListQuery,\n  });\n\n  // callbacks for Message CURD actions\n  const deleteMessage = useDeleteMessageCallback({ currentGroupChannel, messagesDispatcher },\n    { logger });\n  const updateMessage = useUpdateMessageCallback(\n    { currentGroupChannel, messagesDispatcher, onBeforeUpdateUserMessage, isMentionEnabled },\n    { logger, sdk, pubSub },\n  );\n  const resendMessage = useResendMessageCallback(\n    { currentGroupChannel, messagesDispatcher },\n    { logger },\n  );\n  const [messageInputRef, sendMessage] = useSendMessageCallback(\n    { currentGroupChannel, onBeforeSendUserMessage, isMentionEnabled },\n    {\n      sdk,\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n  const [sendFileMessage] = useSendFileMessageCallback(\n    { currentGroupChannel, onBeforeSendFileMessage, imageCompression },\n    {\n      sdk,\n      logger,\n      pubSub,\n      messagesDispatcher,\n    },\n  );\n\n  return (\n    <ChannelContext.Provider value={{\n      // props\n      channelUrl,\n      useMessageGrouping,\n      useReaction: usingReaction,\n      showSearchIcon,\n      highlightedMessage,\n      startingPoint,\n      onBeforeSendUserMessage,\n      onBeforeSendFileMessage,\n      onBeforeUpdateUserMessage,\n      onChatHeaderActionClick,\n      onSearchClick,\n      replyType,\n      queries,\n\n      // messagesStore\n      allMessages,\n      loading,\n      initialized,\n      unreadSince,\n      isInvalid,\n      currentGroupChannel,\n      hasMorePrev,\n      hasMoreNext,\n      oldestMessageTimeStamp,\n      latestMessageTimeStamp,\n      emojiContainer,\n      readStatus,\n\n      // utils\n      scrollToMessage,\n      quoteMessage,\n      setQuoteMessage,\n      deleteMessage,\n      updateMessage,\n      resendMessage,\n      messageInputRef,\n      sendMessage,\n      sendFileMessage,\n      initialTimeStamp,\n      messageActionTypes,\n      messagesDispatcher,\n      setInitialTimeStamp,\n      setAnimatedMessageId,\n      setHighLightedMessageId,\n      animatedMessageId,\n      highLightedMessageId,\n      nicknamesMap,\n      emojiAllMap,\n      onScrollCallback,\n      onScrollDownCallback,\n      memoizedEmojiListItems,\n      scrollRef,\n      toggleReaction,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={props?.disableUserProfile}\n        renderUserProfile={props?.renderUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </ChannelContext.Provider>\n  );\n}\n\nexport type UseChannelType = () => ChannelProviderInterface;\nconst useChannel: UseChannelType = () => React.useContext(ChannelContext);\n\nexport { ChannelProvider, useChannel };\n"],"names":["RESET_MESSAGES","FETCH_INITIAL_MESSAGES_START","FETCH_INITIAL_MESSAGES_SUCCESS","FETCH_INITIAL_MESSAGES_FAILURE","FETCH_PREV_MESSAGES_SUCCESS","FETCH_PREV_MESSAGES_FAILURE","FETCH_NEXT_MESSAGES_SUCCESS","FETCH_NEXT_MESSAGES_FAILURE","SEND_MESSAGEGE_START","SEND_MESSAGEGE_SUCESS","SEND_MESSAGEGE_FAILURE","RESEND_MESSAGEGE_START","ON_MESSAGE_RECEIVED","ON_MESSAGE_UPDATED","ON_MESSAGE_THREAD_INFO_UPDATED","ON_MESSAGE_DELETED","ON_MESSAGE_DELETED_BY_REQ_ID","SET_CURRENT_CHANNEL","SET_CHANNEL_INVALID","MARK_AS_READ","ON_REACTION_UPDATED","SET_EMOJI_CONTAINER","MESSAGE_LIST_PARAMS_CHANGED","getOutgoingMessageStates","UNDEFINED","getSendingMessageStatus","SUCCEEDED","FAILED","PENDING","scrollIntoLast","intialTry","MAX_TRIES","currentTry","scrollDOM","document","querySelector","scrollTop","scrollHeight","error","setTimeout","pubSubHandleRemover","subscriber","forEach","s","remove","pubSubHandler","channelUrl","pubSub","dispatcher","Map","subscribe","set","topics","msg","channel","message","url","type","channelActions","payload","fromSelector","messageId","isOperator","groupChannel","myRole","isDisabledBecauseFrozen","isFrozen","isDisabledBecauseMuted","myMutedState","getAllEmojisFromEmojiContainer","emojiContainer","emojiCategories","allEmojis","categoryIndex","length","emojis","emojiIndex","push","getAllEmojisMapFromEmojiContainer","allEmojisMap","key","getNicknamesMapFromMembers","members","nicknamesMap","memberIndex","userId","nickname","getMessageCreatedAt","format","createdAt","isSameGroup","comparingMessage","currentChannel","messageType","sender","sendingStatus","isReadMessage","compareMessagesForGrouping","prevMessage","currMessage","nextMessage","isAcceptable","passUnsuccessfullMessages","allMessages","newMessage","lastIndexOfSucceededMessage","map","isAdminMessage","lastIndexOf","messages","splice","pxToNumber","px","parsed","Number","parseFloat","isNaN","isAboutSame","a","b","Math","abs","initialized","loading","currentGroupChannel","hasMorePrev","oldestMessageTimeStamp","hasMoreNext","latestMessageTimeStamp","unreadSince","isInvalid","messageListParams","getOldestMessageTimeStamp","oldestMessage","getLatestMessageTimeStamp","latestMessage","reducer","state","action","actionTypes","filter","m","PREV_RESULT_SIZE","duplicatedMessageIds","updatedOldMessages","duplicatedMessage","find","compareIds","updatedAt","filteredNewMessages","NEXT_RESULT_SIZE","newMessages","reqId","sort","failed","currentGroupChannelUrl","some","filterMessageListParams","senderMember","profileUrl","friendName","member","Date","event","threadInfo","targetMessageId","applyReactionEvent","useHandleChannelEvents","sdkInit","messagesDispatcher","sdk","logger","scrollRef","setQuoteMessage","useEffect","messageReceiverId","uuidv4","ChannelHandler","info","onMessageReceived","scrollToEnd","current","offsetHeight","messageActions","warning","onReadReceiptUpdated","onDeliveryReceiptUpdated","onMessageUpdated","onThreadInfoUpdated","onMessageDeleted","_","onReactionUpdated","reactionEvent","onChannelChanged","onChannelFrozen","onChannelUnfrozen","onUserMuted","onUserUnmuted","onUserBanned","onOperatorUpdated","addChannelHandler","removeChannelHandler","useSetChannel","GroupChannel","getChannel","then","messageActionTypes","catch","e","getAllEmoji","emojiContainer_","err","useInitialMessagesFetch","userFilledMessageListQuery","initialTimeStamp","replyType","MessageListParams","getMessagesByTimestamp","prevResultSize","nextResultSize","isInclusive","includeReplies","includeReaction","includeThreadInfo","includeParentMessageInfo","Object","keys","getTime","finally","utils","useHandleReconnect","_a","_b","isOnline","wasOffline","useReaction","appInfo","isUsingReaction","messageListParams_1","lastMessageTime","useScrollCallback","useCallback","cb","useScrollDownCallback","useDeleteMessageCallback","requestState","Promise","resolve","reject","deleteMessage","useUpdateMessageCallback","onBeforeUpdateUserMessage","isMentionEnabled","props","callback","mentionedUsers","mentionTemplate","createParamsDefault","params","UserMessageParams","mentionedMessageTemplate","createCustomPrams","updateUserMessage","r","swapParams","getErrorFirstCallback","publish","useResendMessageCallback","failedMessage","file","isResendable","resendUserMessage","resendFileMessage","console","useSendMessageCallback","onBeforeSendUserMessage","messageInputRef","useRef","sendMessage","quoteMessage","trim","isReplyToChannel","parentMessageId","pendingMsg","sendUserMessage","res","useSendFileMessageCallback","onBeforeSendFileMessage","imageCompression","compressionRate","resizingWidth","resizingHeight","createCustomParams","compressibleFileType","compressibleRatio","compressibleDiamensions","canCompressImage","file_","FileMessageParams","image","createElement","src","URL","createObjectURL","onload","revokeObjectURL","canvas","imageWdith","naturalWidth","width","imageHeight","naturalHeight","height","targetWidth","targetHeight","context","getContext","drawImage","toBlob","newImageBlob","compressedFile","File","name","pendingMessage","sendFileMessage","response","localUrl","useMemoizedEmojiListItems","toggleReaction","emojiAllList","useMemo","parentRef","parentContainRef","closeDropdown","spaceFromTrigger","React","EmojiListItems","emoji","reactedReaction","reactions","reaction","isReacted","userIds","indexOf","ReactionButton","ImageRenderer","Icon","IconTypes","QUESTION","useToggleReactionCallback","deleteReaction","addReaction","useScrollToMessage","setInitialTimeStamp","setAnimatedMessageId","isPresent","ChannelContext","createContext","undefined","ChannelProvider","children","useMessageGrouping","showSearchIcon","highlightedMessage","startingPoint","onChatHeaderActionClick","onSearchClick","queries","globalStore","useSendbirdStateContext","config","stores","sdkStore","_e","useState","_f","animatedMessageId","_g","highLightedMessageId","setHighLightedMessageId","_h","_j","useReducer","messagesReducer","messagesInitialState","messagesStore","readStatus","isBroadcast","isSuper","usingReaction","emojiAllMap","onScrollCallback","scrollToMessage","onScrollDownCallback","memoizedEmojiListItems","useGetChannel","subScriber","updateMessage","resendMessage","_k","UserProfileProvider","disableUserProfile","renderUserProfile","useChannel","useContext"],"mappings":"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"}