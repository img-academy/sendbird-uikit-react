{"version":3,"file":"context.js","sources":["../../../src/smart-components/OpenChannelSettings/context/OpenChannelSettingsProvider.tsx"],"sourcesContent":["\nimport React, {\n  useEffect,\n  useState,\n} from 'react';\nimport Sendbird from 'sendbird';\n\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport { RenderUserProfileProps } from '../../../types';\n\nexport interface OpenChannelSettingsContextProps {\n  channelUrl: string;\n  children?: React.ReactNode;\n  onCloseClick?(): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): Sendbird.OpenChannelParams;\n  onChannelModified?(channel: Sendbird.OpenChannel): void;\n  onDeleteChannel?(channel: Sendbird.OpenChannel): void;\n  disableUserProfile?: boolean;\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n}\n\ninterface OpenChannelSettingsContextType {\n  channelUrl: string;\n  channel?: Sendbird.OpenChannel;\n  setChannel?: React.Dispatch<React.SetStateAction<Sendbird.OpenChannel>>;\n  onCloseClick?(): void;\n  onBeforeUpdateChannel?(currentTitle: string, currentImg: File, data: string): Sendbird.OpenChannelParams;\n  onChannelModified?(channel: Sendbird.OpenChannel): void;\n  onDeleteChannel?(channel: Sendbird.OpenChannel): void;\n}\n\nconst OpenChannelSettingsContext = React.createContext<OpenChannelSettingsContextType|null>(undefined);\n\nconst OpenChannelSettingsProvider: React.FC<OpenChannelSettingsContextProps> = (props: OpenChannelSettingsContextProps) => {\n  const {\n    children,\n    channelUrl,\n    onCloseClick,\n    onChannelModified,\n    onBeforeUpdateChannel,\n  } = props;\n\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const sdk = globalStore?.stores?.sdkStore?.sdk;\n\n  const logger = globalStore?.config?.logger;\n\n  const [channel, setChannel] = useState<SendBird.OpenChannel | null>(null);\n  useEffect(() => {\n    if (!channelUrl || !sdk || !sdk.getConnectionState) {\n      setChannel(null);\n      return;\n    }\n\n    sdk.OpenChannel.getChannel(channelUrl, (openChannel, error) => {\n      if (!error) {\n        logger.error('open channel setting: fetched', openChannel);\n        setChannel(openChannel);\n      } else {\n        logger.error('open channel setting: error fetching', error);\n        setChannel(null);\n      }\n    });\n  }, [channelUrl, sdk]);\n\n  return (\n    <OpenChannelSettingsContext.Provider value={{\n      channelUrl,\n      channel,\n      setChannel,\n      onCloseClick,\n      onChannelModified,\n      onBeforeUpdateChannel,\n    }}>\n      <UserProfileProvider\n        isOpenChannel\n        renderUserProfile={props?.renderUserProfile}\n        disableUserProfile={props?.disableUserProfile}\n      >\n        {children}\n      </UserProfileProvider>\n    </OpenChannelSettingsContext.Provider>\n  );\n}\n\ntype useOpenChannelSettingsType = () => OpenChannelSettingsContextType;\nconst useOpenChannelSettings: useOpenChannelSettingsType = () => React.useContext(OpenChannelSettingsContext);\n\nexport { OpenChannelSettingsProvider, useOpenChannelSettings };\n"],"names":["OpenChannelSettingsContext","React","createContext","undefined","OpenChannelSettingsProvider","props","children","channelUrl","onCloseClick","onChannelModified","onBeforeUpdateChannel","globalStore","useSendbirdStateContext","sdk","stores","sdkStore","logger","config","_d","useState","channel","setChannel","useEffect","getConnectionState","OpenChannel","getChannel","openChannel","error","UserProfileProvider","renderUserProfile","disableUserProfile","useOpenChannelSettings","useContext"],"mappings":";;;;;;;;;;;;;;;AAgCA,IAAMA,0BAA0B,gBAAGC,yBAAK,CAACC,aAAN,CAAyDC,SAAzD,CAAnC;;IAEMC,2BAA2B,GAA8C,SAAzEA,2BAAyE,CAACC,KAAD;;;AAE3E,MAAAC,QAAQ,GAKND,KAAK,SALP;AAAA,MACAE,UAAU,GAIRF,KAAK,WALP;AAAA,MAEAG,YAAY,GAGVH,KAAK,aALP;AAAA,MAGAI,iBAAiB,GAEfJ,KAAK,kBALP;AAAA,MAIAK,qBAAqB,GACnBL,KAAK,sBALP;;AAQF,MAAMM,WAAW,GAAGC,uBAAuB,EAA3C;AACA,MAAMC,GAAG,GAAG,MAAA,MAAAF,WAAW,SAAX,IAAAA,WAAW,WAAX,SAAA,GAAAA,WAAW,CAAEG,MAAb,UAAA,iBAAA,SAAA,MAAqBC,QAArB,UAAA,iBAAA,SAAA,MAA+BF,GAA3C;AAEA,MAAMG,MAAM,GAAG,MAAAL,WAAW,SAAX,IAAAA,WAAW,WAAX,SAAA,GAAAA,WAAW,CAAEM,MAAb,UAAA,iBAAA,SAAA,MAAqBD,MAApC;;AAEM,MAAAE,KAAwBC,cAAQ,CAA8B,IAA9B,CAAhC;AAAA,MAACC,OAAO,QAAR;AAAA,MAAUC,UAAU,QAApB;;AACNC,EAAAA,eAAS,CAAC;AACR,QAAI,CAACf,UAAD,IAAe,CAACM,GAAhB,IAAuB,CAACA,GAAG,CAACU,kBAAhC,EAAoD;AAClDF,MAAAA,UAAU,CAAC,IAAD,CAAV;AACA;AACD;;AAEDR,IAAAA,GAAG,CAACW,WAAJ,CAAgBC,UAAhB,CAA2BlB,UAA3B,EAAuC,UAACmB,WAAD,EAAcC,KAAd;AACrC,UAAI,CAACA,KAAL,EAAY;AACVX,QAAAA,MAAM,CAACW,KAAP,CAAa,+BAAb,EAA8CD,WAA9C;AACAL,QAAAA,UAAU,CAACK,WAAD,CAAV;AACD,OAHD,MAGO;AACLV,QAAAA,MAAM,CAACW,KAAP,CAAa,sCAAb,EAAqDA,KAArD;AACAN,QAAAA,UAAU,CAAC,IAAD,CAAV;AACD;AACF,KARD;AASD,GAfQ,EAeN,CAACd,UAAD,EAAaM,GAAb,CAfM,CAAT;AAiBA,sBACEZ,wCAAC,0BAAD,CAA4B,QAA5B;AAAqC,IAAA,KAAK,EAAE;AAC1CM,MAAAA,UAAU,YADgC;AAE1Ca,MAAAA,OAAO,SAFmC;AAG1CC,MAAAA,UAAU,YAHgC;AAI1Cb,MAAAA,YAAY,cAJ8B;AAK1CC,MAAAA,iBAAiB,mBALyB;AAM1CC,MAAAA,qBAAqB;AANqB;AAA5C,kBAQET,wCAAC2B,sCAAD;AACE,IAAA,aAAa,MADf;AAEE,IAAA,iBAAiB,EAAEvB,KAAK,SAAL,IAAAA,KAAK,WAAL,SAAA,GAAAA,KAAK,CAAEwB,iBAF5B;AAGE,IAAA,kBAAkB,EAAExB,KAAK,SAAL,IAAAA,KAAK,WAAL,SAAA,GAAAA,KAAK,CAAEyB;AAH7B,KAKGxB,QALH,CARF,CADF;AAkBD;;IAGKyB,sBAAsB,GAA+B,SAArDA,sBAAqD;AAAM,SAAA9B,yBAAK,CAAC+B,UAAN,CAAiBhC,0BAAjB,CAAA;AAA4C;;;;;"}