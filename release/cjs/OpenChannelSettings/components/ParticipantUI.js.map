{"version":3,"file":"ParticipantUI.js","sources":["../../../../src/smart-components/OpenChannelSettings/components/ParticipantUI/ParticipantItem.tsx","../../../../src/smart-components/OpenChannelSettings/components/ParticipantUI/index.tsx"],"sourcesContent":["import React, {\n  ReactElement,\n  useContext,\n  useEffect,\n  useRef,\n  useState,\n} from 'react'\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\n\nimport { UserProfileContext } from '../../../../lib/UserProfileContext';\nimport Button, { ButtonTypes, ButtonSizes } from '../../../../ui/Button';\nimport Accordion from '../../../../ui/Accordion';\nimport Icon, { IconTypes, IconColors } from '../../../../ui/Icon';\nimport Avatar from '../../../../ui/Avatar/index';\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport ParticipantsModal from './ParticipantsModal';\nimport UserProfile from '../../../../ui/UserProfile';\nimport ContextMenu, { MenuItems } from '../../../../ui/ContextMenu';\nimport { useOpenChannelSettings } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nconst SHOWN_MEMBER_MAX = 10;\n\ninterface UserListItemProps {\n  member: SendBird.User;\n  currentUser?: string;\n}\n\nexport const UserListItem: React.FC<UserListItemProps> = ({\n  member,\n  currentUser,\n}: UserListItemProps) => {\n  const avatarRef = useRef(null);\n  const {\n    disableUserProfile,\n    renderUserProfile,\n  } = useContext(UserProfileContext);\n  const { stringSet } = useContext(LocalizationContext);\n  return (\n    <div className=\"sendbird-participants-accordion__member\">\n      <div className=\"sendbird-participants-accordion__member-avatar\">\n        <ContextMenu\n          menuTrigger={(toggleDropdown) => (\n            <Avatar\n              onClick={() => {\n                if (!disableUserProfile) {\n                  toggleDropdown();\n                }\n              }}\n              ref={avatarRef}\n              src={member.profileUrl}\n              width={24}\n              height={24}\n            />\n          )}\n          menuItems={(closeDropdown) => (\n            <MenuItems\n              openLeft\n              parentRef={avatarRef}\n              // for catching location(x, y) of MenuItems\n              parentContainRef={avatarRef}\n              // for toggling more options(menus & reactions)\n              closeDropdown={closeDropdown}\n              style={{ paddingTop: 0, paddingBottom: 0 }}\n            >\n              {\n                renderUserProfile\n                  ? renderUserProfile({\n                    user: member,\n                    currentUserId: currentUser,\n                    close: closeDropdown,\n                  })\n                  : (\n                    <UserProfile\n                      disableMessaging\n                      user={member}\n                      currentUserId={currentUser}\n                      onSuccess={closeDropdown}\n                    />\n                  )\n              }\n            </MenuItems>\n          )}\n        />\n      </div>\n      <Label type={LabelTypography.SUBTITLE_2} color={LabelColors.ONBACKGROUND_1}>\n        {member.nickname || stringSet.NO_NAME}\n        {\n          (currentUser === member.userId) && (\n            stringSet.CHANNEL_SETTING__MEMBERS__YOU\n          )\n        }\n      </Label>\n    </div>\n  );\n};\n\nexport interface ParticipantsAccordionProps {\n  maxMembers?: number;\n}\n\nexport default function ParticipantsAccordion(props: ParticipantsAccordionProps): ReactElement {\n  const maxMembers = props?.maxMembers || SHOWN_MEMBER_MAX;\n  const { channel } = useOpenChannelSettings();\n  const globalState = useSendbirdStateContext();\n  const currentUser = globalState?.config?.userId;\n  const [participants, setParticipants] = useState([]);\n  const [showMoreModal, setShowMoreModal] = useState(false);\n  const { stringSet } = useContext(LocalizationContext);\n\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n\n  return (\n    <Accordion\n      className=\"sendbird-participants-accordion\"\n      id=\"participants\"\n      renderTitle={() => (\n        <>\n          <Icon\n            type={IconTypes.MEMBERS}\n            fillColor={IconColors.PRIMARY}\n            width={24}\n            height={24}\n            className=\"sendbird-openchannel-settings__accordion-icon\"\n          />\n          <Label\n            type={LabelTypography.SUBTITLE_1}\n            color={LabelColors.ONBACKGROUND_1}\n          >\n            {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_ACCORDION_TITLE}\n          </Label>\n        </>\n      )}\n      renderContent={() => (\n        <div className=\"\">\n          <div className=\"sendbird-participants-accordion__list\">\n            {\n              participants.slice(0, maxMembers).map((p) => (\n                <UserListItem\n                  member={p}\n                  currentUser={currentUser}\n                  key={p.userId}\n                />\n              ))\n            }\n            {\n              (participants && participants.length === 0)\n                ? (\n                    <Label\n                      className=\"sendbird-channel-settings__empty-list\"\n                      type={LabelTypography.SUBTITLE_2}\n                      color={LabelColors.ONBACKGROUND_3}\n                    >\n                      {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                    </Label>\n                ): null\n            }\n          </div>\n          {\n            participants.length >= maxMembers && (\n              <div className=\"sendbird-participants-accordion__footer\">\n                <Button\n                  className=\"sendbird-participants-accordion__footer__all-participants\"\n                  type={ButtonTypes.SECONDARY}\n                  size={ButtonSizes.SMALL}\n                  onClick={() => setShowMoreModal(true)}\n                >\n                  {stringSet.OPEN_CHANNEL_SETTINGS__SEE_ALL}\n                </Button>\n                {\n                  showMoreModal && (\n                    <ParticipantsModal\n                      onCancel={() => {\n                        setShowMoreModal(false);\n                      }}\n                    />\n                  )\n                }\n              </div>\n            )\n          }\n        </div>\n      )}\n    />\n  );\n}\n","import React, {\n  ReactElement,\n  useContext,\n  useState,\n  useEffect,\n} from 'react';\n\nimport Label, { LabelTypography, LabelColors } from '../../../../ui/Label';\nimport Icon, { IconTypes } from '../../../../ui/Icon';\n\nimport { UserListItem } from './ParticipantItem';\nimport { LocalizationContext } from '../../../../lib/LocalizationContext';\nimport { useOpenChannelSettings } from '../../context/OpenChannelSettingsProvider';\nimport useSendbirdStateContext from '../../../../hooks/useSendbirdStateContext';\n\nexport default function ParticipantsList(): ReactElement {\n  const globalState = useSendbirdStateContext();\n  const currentUser = globalState?.config?.userId;\n  const { channel, onCloseClick } = useOpenChannelSettings();\n  const { stringSet } = useContext(LocalizationContext);\n  const [participants, setParticipants] = useState<Array<SendBird.User>|null>([]);\n  const [participantListQuery, setParticipantListQuery] = useState<SendBird.ParticipantListQuery | null>(null);\n  useEffect(() => {\n    if (!channel || !channel.createParticipantListQuery) {\n      return;\n    }\n    const participantListQuery = channel.createParticipantListQuery();\n    setParticipantListQuery(participantListQuery);\n    participantListQuery.next((participantList, error) => {\n      if (error) {\n        return;\n      }\n      setParticipants(participantList);\n    });\n  }, [channel]);\n  return (\n    <div className=\"sendbird-openchannel-settings__participant\">\n      <div className=\"sendbird-openchannel-settings__header\">\n        <Label type={LabelTypography.H_2} color={LabelColors.ONBACKGROUND_1}>\n          {stringSet.OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE}\n        </Label>\n        <Icon\n          type={IconTypes.CLOSE}\n          className=\"sendbird-openchannel-settings__close-icon\"\n          height=\"24px\"\n          width=\"24px\"\n          onClick={() => {\n            onCloseClick();\n          }}\n        />\n      </div>\n      <div\n        className=\"sendbird-openchannel-settings__participants-list\"\n        onScroll={(e) => {\n          const { hasNext } = participantListQuery;\n          const target = e.target as HTMLTextAreaElement;\n          const fetchMore = (\n            target.clientHeight + target.scrollTop === target.scrollHeight\n          );\n\n          if (hasNext && fetchMore) {\n            participantListQuery.next((fetchedParticipants, error) => {\n              if (error) {\n                return;\n              }\n              setParticipants([\n                ...participants,\n                ...fetchedParticipants,\n              ])\n            });\n          }\n        }}\n      >\n        <div>\n          {\n            participants.map((p: SendBird.User) => (\n              <UserListItem\n                member={p}\n                currentUser={currentUser}\n                key={p.userId}\n              />\n            ))\n          }\n          {\n            (participants && participants.length === 0)\n              ? (\n                  <Label\n                    className=\"sendbird-channel-settings__empty-list\"\n                    type={LabelTypography.SUBTITLE_2}\n                    color={LabelColors.ONBACKGROUND_3}\n                  >\n                    {stringSet.OPEN_CHANNEL_SETTINGS__EMPTY_LIST}\n                  </Label>\n              ): null\n          }\n        </div>\n      </div>\n    </div>\n  )\n}\n"],"names":["UserListItem","_a","member","currentUser","avatarRef","useRef","_b","useContext","UserProfileContext","disableUserProfile","renderUserProfile","stringSet","LocalizationContext","React","ContextMenu","toggleDropdown","Avatar","profileUrl","closeDropdown","MenuItems","paddingTop","paddingBottom","user","currentUserId","close","UserProfile","Label","LabelTypography","SUBTITLE_2","LabelColors","ONBACKGROUND_1","nickname","NO_NAME","userId","CHANNEL_SETTING__MEMBERS__YOU","ParticipantsList","globalState","useSendbirdStateContext","config","useOpenChannelSettings","channel","onCloseClick","_c","useState","participants","setParticipants","_d","participantListQuery","setParticipantListQuery","useEffect","createParticipantListQuery","next","participantList","error","H_2","OPEN_CHANNEL_SETTINGS__PARTICIPANTS_TITLE","Icon","IconTypes","CLOSE","e","hasNext","target","fetchMore","clientHeight","scrollTop","scrollHeight","fetchedParticipants","map","p","length","ONBACKGROUND_3","OPEN_CHANNEL_SETTINGS__EMPTY_LIST"],"mappings":"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"}