{"version":3,"file":"ChannelListProvider-b0da6dab.js","sources":["../../src/smart-components/ChannelList/dux/actionTypes.js","../../src/smart-components/ChannelList/utils.js","../../src/smart-components/ChannelList/dux/initialState.js","../../src/smart-components/ChannelList/dux/reducers.js","../../src/smart-components/ChannelList/context/ChannelListProvider.tsx"],"sourcesContent":["export const RESET_CHANNEL_LIST = 'RESET_CHANNEL_LIST';\nexport const CREATE_CHANNEL = 'CREATE_CHANNEL';\nexport const UNLOAD_CHANNELS = 'UNLOAD_CHANNELS';\nexport const SET_CHANNEL_LOADING = 'SET_CHANNEL_LOADING';\nexport const LEAVE_CHANNEL_SUCCESS = 'LEAVE_CHANNEL_SUCCESS';\n\nexport const SET_CURRENT_CHANNEL = 'SET_CURRENT_CHANNEL';\n\nexport const SHOW_CHANNEL_SETTINGS = 'SHOW_CHANNEL_SETTINGS';\nexport const HIDE_CHANNEL_SETTINGS = 'HIDE_CHANNEL_SETTINGS';\n\nexport const FETCH_CHANNELS_START = 'FETCH_CHANNELS_START';\nexport const FETCH_CHANNELS_SUCCESS = 'FETCH_CHANNELS_SUCCESS';\nexport const FETCH_CHANNELS_FAILURE = 'FETCH_CHANNELS_FAILURE';\n\nexport const INIT_CHANNELS_START = 'INIT_CHANNELS_START';\nexport const INIT_CHANNELS_SUCCESS = 'INIT_CHANNELS_SUCCESS';\nexport const INIT_CHANNELS_FAILURE = 'INIT_CHANNELS_FAILURE';\n\nexport const INVITE_MEMBERS_SUCESS = 'INVITE_MEMBERS_SUCESS';\n\nexport const ON_USER_JOINED = 'ON_USER_JOINED';\nexport const ON_CHANNEL_DELETED = 'ON_CHANNEL_DELETED';\nexport const ON_LAST_MESSAGE_UPDATED = 'ON_LAST_MESSAGE_UPDATED';\nexport const ON_USER_LEFT = 'ON_USER_LEFT';\nexport const ON_CHANNEL_CHANGED = 'ON_CHANNEL_CHANGED';\nexport const ON_CHANNEL_ARCHIVED = 'ON_CHANNEL_ARCHIVED';\nexport const ON_CHANNEL_FROZEN = 'ON_CHANNEL_FROZEN';\nexport const ON_CHANNEL_UNFROZEN = 'ON_CHANNEL_UNFROZEN';\n\nexport const ON_READ_RECEIPT_UPDATED = 'ON_READ_RECEIPT_UPDATED';\nexport const ON_DELIVERY_RECEIPT_UPDATED = 'ON_DELIVERY_RECEIPT_UPDATED';\n\nexport const CHANNEL_REPLACED_TO_TOP = 'CHANNEL_REPLACED_TO_TOP';\nexport const CHANNEL_LIST_PARAMS_UPDATED = 'CHANNEL_LIST_PARAMS_UPDATED';\n","import * as channelActions from './dux/actionTypes';\nimport * as topics from '../../lib/pubSub/topics';\n\nconst DELIVERY_RECIPT = 'delivery_receipt';\n\nconst createEventHandler = ({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  logger,\n}) => {\n  const ChannelHandler = new sdk.ChannelHandler();\n\n  ChannelHandler.onChannelChanged = (channel) => {\n    logger.info('ChannelList: onChannelChanged', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_CHANGED,\n      payload: channel,\n    });\n  };\n  ChannelHandler.onChannelDeleted = (channelUrl) => {\n    logger.info('ChannelList: onChannelDeleted', channelUrl);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_DELETED,\n      payload: channelUrl,\n    });\n  };\n  ChannelHandler.onUserJoined = (channel) => {\n    logger.info('ChannelList: onUserJoined', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_JOINED,\n        payload: channel,\n      });\n    }\n  };\n  ChannelHandler.onUserBanned = (channel, user) => {\n    const { currentUser } = sdk;\n    logger.info('Channel | useHandleChannelEvents: onUserBanned', channel);\n    if (user.userId === currentUser.userId) {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: true,\n        },\n      });\n    } else {\n      channelListDispatcher({\n        type: channelActions.ON_USER_LEFT,\n        payload: {\n          channel,\n          isMe: false,\n        },\n      });\n    }\n  };\n  ChannelHandler.onUserLeft = (channel, leftUser) => {\n    const { currentUser } = sdk;\n    const isMe = (currentUser.userId === leftUser.userId);\n    logger.info('ChannelList: onUserLeft', channel);\n    channelListDispatcher({\n      type: channelActions.ON_USER_LEFT,\n      payload: {\n        channel,\n        isMe,\n      },\n    });\n  };\n\n  ChannelHandler.onReadStatus = (channel) => {\n    logger.info('ChannelList: onReadStatus', channel);\n    channelListDispatcher({\n      type: channelActions.ON_READ_RECEIPT_UPDATED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onDeliveryReceiptUpdated = (channel) => {\n    logger.info('ChannelList: onDeliveryReceiptUpdated', channel);\n    if (channel.lastMessage) {\n      channelListDispatcher({\n        type: channelActions.ON_DELIVERY_RECEIPT_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onMessageUpdated = (channel, message) => {\n    if (channel.lastMessage.isEqual(message)) {\n      logger.info('ChannelList: onMessageUpdated', channel);\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: channel,\n      });\n    }\n  };\n\n  ChannelHandler.onChannelHidden = (channel) => {\n    logger.info('ChannelList: onChannelHidden', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_ARCHIVED,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelFrozen = (channel) => {\n    logger.info('ChannelList: onChannelFrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_FROZEN,\n      payload: channel,\n    });\n  };\n\n  ChannelHandler.onChannelUnfrozen = (channel) => {\n    logger.info('ChannelList: onChannelUnfrozen', channel);\n    channelListDispatcher({\n      type: channelActions.ON_CHANNEL_UNFROZEN,\n      payload: channel,\n    });\n  };\n\n  logger.info('ChannelList: Added channelHandler');\n  sdk.addChannelHandler(sdkChannelHandlerId, ChannelHandler);\n};\n\nconst createChannelListQuery = ({ sdk, userFilledChannelListQuery = {} }) => {\n  const channelListQuery = sdk.GroupChannel.createMyGroupChannelListQuery();\n  channelListQuery.includeEmpty = false;\n  channelListQuery.order = 'latest_last_message'; // 'chronological', 'latest_last_message', 'channel_name_alphabetical', and 'metadata_value_alphabetical'\n  channelListQuery.limit = 20; // The value of pagination limit could be set up to 100.\n\n  if (userFilledChannelListQuery) {\n    Object.keys(userFilledChannelListQuery).forEach((key) => {\n      channelListQuery[key] = userFilledChannelListQuery[key];\n    });\n  }\n\n  return channelListQuery;\n};\n\n/**\n * Setup event listener\n * create channel source query\n * addloading screen\n */\nfunction setupChannelList({\n  sdk,\n  sdkChannelHandlerId,\n  channelListDispatcher,\n  setChannelSource,\n  onChannelSelect,\n  userFilledChannelListQuery,\n  logger,\n  sortChannelList,\n  disableAutoSelect,\n}) {\n  if (sdk && sdk.ChannelHandler) {\n    createEventHandler({\n      sdk,\n      channelListDispatcher,\n      sdkChannelHandlerId,\n      logger,\n    });\n  } else {\n    logger.console.warning('ChannelList - createEventHandler: sdk or sdk.ChannelHandler does not exist', sdk);\n  }\n\n  logger.info('ChannelList - creating query', { userFilledChannelListQuery });\n  const channelListQuery = createChannelListQuery({ sdk, userFilledChannelListQuery });\n  logger.info('ChannelList - created query', channelListQuery);\n\n  setChannelSource(channelListQuery);\n\n  channelListDispatcher({\n    type: channelActions.INIT_CHANNELS_START,\n  });\n\n  if (userFilledChannelListQuery) {\n    logger.info('ChannelList - setting up channelListQuery', channelListQuery);\n    channelListDispatcher({\n      type: channelActions.CHANNEL_LIST_PARAMS_UPDATED,\n      payload: {\n        channelListQuery,\n        currentUserId: sdk && sdk.currentUser && sdk.currentUser.userId,\n      },\n    });\n  }\n\n  logger.info('ChannelList - fetching channels');\n  if (channelListQuery.hasNext) {\n    channelListQuery.next((response, error) => {\n      const swapParams = sdk.getErrorFirstCallback();\n      let channelList = response;\n      let err = error;\n      if (swapParams) {\n        channelList = error;\n        err = response;\n      }\n      logger.info('ChannelList - fetched channels', channelList);\n      if (err) {\n        logger.error('ChannelList - couldnt fetch channels', err);\n        channelListDispatcher({\n          type: channelActions.INIT_CHANNELS_FAILURE,\n        });\n        return;\n      }\n      // select first channel\n      logger.info('ChannelList - highlight channel', channelList[0]);\n      let sortedChannelList = channelList;\n      if (sortChannelList && typeof sortChannelList === 'function') {\n        sortedChannelList = sortChannelList(channelList);\n        logger.info('ChannelList - channel list sorted', sortedChannelList);\n      }\n      if (!disableAutoSelect) {\n        onChannelSelect(sortedChannelList[0]);\n      }\n      channelListDispatcher({\n        type: channelActions.INIT_CHANNELS_SUCCESS,\n        payload: { channelList: sortedChannelList, disableAutoSelect },\n      });\n      const canSetMarkAsDelivered = sdk?.appInfo?.premiumFeatureList\n        ?.find((feature) => (feature === DELIVERY_RECIPT));\n\n      if (canSetMarkAsDelivered) {\n        logger.info('ChannelList: Marking all channels as read');\n        // eslint-disable-next-line no-unused-expressions\n        channelList?.forEach((c, idx) => {\n          // Plan-based rate limits - minimum limit is 5 requests per second\n          setTimeout(() => {\n            // eslint-disable-next-line no-unused-expressions\n            sdk?.markAsDelivered(c?.url);\n          }, 300 * idx);\n        });\n      }\n    });\n  } else {\n    logger.warning('ChannelList - there are no more channels');\n  }\n}\n\nexport const pubSubHandleRemover = (subscriber) => {\n  subscriber.forEach((s) => {\n    try {\n      s.remove();\n    } catch {\n      //\n    }\n  });\n};\n\nexport const pubSubHandler = (pubSub, channelListDispatcher) => {\n  const subScriber = new Map();\n  if (!pubSub) return subScriber;\n  subScriber.set(topics.CREATE_CHANNEL, pubSub.subscribe(topics.CREATE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: 'CREATE_CHANNEL',\n      payload: channel,\n    });\n  }));\n\n  subScriber.set(topics.UPDATE_USER_MESSAGE, pubSub.subscribe(topics.UPDATE_USER_MESSAGE, (msg) => {\n    const { channel, message } = msg;\n    const updatedChannel = channel;\n    if (updatedChannel?.lastMessage?.messageId === message.messageId) {\n      updatedChannel.lastMessage = message;\n    }\n    if (channel) {\n      channelListDispatcher({\n        type: channelActions.ON_LAST_MESSAGE_UPDATED,\n        payload: updatedChannel,\n      });\n    }\n  }));\n\n  subScriber.set(topics.LEAVE_CHANNEL, pubSub.subscribe(topics.LEAVE_CHANNEL, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.LEAVE_CHANNEL_SUCCESS,\n      payload: channel.url,\n    });\n  }));\n\n  subScriber.set(topics.SEND_MESSAGE_START, pubSub.subscribe(topics.SEND_MESSAGE_START, (msg) => {\n    const { channel } = msg;\n    channelListDispatcher({\n      type: channelActions.CHANNEL_REPLACED_TO_TOP,\n      payload: channel,\n    });\n  }));\n\n  return subScriber;\n};\n\nexport default setupChannelList;\n","export default {\n  // we might not need this initialized state -> should remove\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: null,\n  currentUserId: '',\n  disableAutoSelect: false,\n};\n","import { filterChannelListParams, getChannelsWithUpsertedChannel } from '../../../utils';\nimport * as actions from './actionTypes';\nimport initialState from './initialState';\n\nexport default function reducer(state, action) {\n  switch (action.type) {\n    case actions.INIT_CHANNELS_START:\n      return {\n        ...state,\n        loading: true,\n      };\n    case actions.RESET_CHANNEL_LIST:\n      return initialState;\n    case actions.INIT_CHANNELS_SUCCESS: {\n      const { channelList, disableAutoSelect } = action.payload;\n      return {\n        ...state,\n        initialized: true,\n        loading: false,\n        allChannels: channelList,\n        disableAutoSelect,\n        currentChannel: (\n          !disableAutoSelect\n          && channelList\n          && channelList.length\n          && channelList.length > 0\n        )\n          ? channelList[0]\n          : null,\n      };\n    }\n    case actions.FETCH_CHANNELS_SUCCESS: {\n      const currentChannels = state.allChannels.map((c) => c.url);\n      const filteredChannels = action.payload.filter(\n        ({ url }) => !(currentChannels.find((c) => c === url)),\n      );\n      return {\n        ...state,\n        allChannels: [\n          ...state.allChannels,\n          ...filteredChannels,\n        ],\n      };\n    }\n    case actions.CREATE_CHANNEL: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        return {\n          ...state,\n          currentChannel: channel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: [channel, ...state.allChannels.filter((ch) => ch.url !== channel.url)],\n        currentChannel: channel,\n      };\n    }\n    case actions.ON_CHANNEL_ARCHIVED: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n          // TODO: Check if we have to set current channel\n        }\n      }\n      const nextChannel = (channel.url === state.currentChannel?.url)\n        ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0]\n        : state.currentChannel;\n      return {\n        ...state,\n        allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n      };\n    }\n    case actions.LEAVE_CHANNEL_SUCCESS:\n    case actions.ON_CHANNEL_DELETED: {\n      const channelUrl = action.payload;\n      return {\n        ...state,\n        currentChannel: (channelUrl === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel,\n        allChannels: state.allChannels.filter(({ url }) => url !== channelUrl),\n      };\n    }\n    case actions.ON_USER_LEFT: {\n      const { channel, isMe } = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          const filteredChannels = getChannelsWithUpsertedChannel(state.allChannels, channel);\n          const nextChannel = (isMe && (channel.url === state.currentChannel?.url))\n            ? filteredChannels[0]\n            : state.currentChannel;\n          return {\n            ...state,\n            currentChannel: state.disableAutoSelect ? null : nextChannel,\n            allChannels: filteredChannels,\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel?.url)\n          ? state.allChannels[0]\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      const filteredChannels = state.allChannels.filter((c) => !(c.url === channel.url && isMe));\n      const nextChannel = (isMe && (channel.url === state.currentChannel?.url))\n        ? filteredChannels[0]\n        : state.currentChannel;\n      return {\n        ...state,\n        currentChannel: state.disableAutoSelect ? null : nextChannel,\n        allChannels: filteredChannels,\n      };\n    }\n    case actions.ON_USER_JOINED:\n    case actions.ON_CHANNEL_CHANGED:\n    case actions.ON_READ_RECEIPT_UPDATED:\n    case actions.ON_DELIVERY_RECEIPT_UPDATED: {\n      const { allChannels = [] } = state;\n      const channel = action.payload;\n      const { unreadMessageCount } = channel;\n      if (!channel.lastMessage) return state;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n        };\n      }\n      // if its only an unread message count change, dont push to top\n      if (unreadMessageCount === 0) {\n        const currentChannel = allChannels.find(({ url }) => url === channel.url);\n        const currentUnreadCount = currentChannel && currentChannel.unreadMessageCount;\n        if (currentUnreadCount === 0) {\n          return {\n            ...state,\n            allChannels: state.allChannels.map((ch) => (ch.url === channel.url ? channel : ch)),\n          };\n        }\n      }\n      return {\n        ...state,\n        allChannels: [\n          channel,\n          ...state.allChannels.filter(({ url }) => url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.SET_CURRENT_CHANNEL:\n      return {\n        ...state,\n        currentChannel: action.payload,\n      };\n    case actions.SHOW_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: true,\n      };\n    case actions.HIDE_CHANNEL_SETTINGS:\n      return {\n        ...state,\n        showSettings: false,\n      };\n    case actions.ON_LAST_MESSAGE_UPDATED:\n      return {\n        ...state,\n        allChannels: state.allChannels.map((channel) => (\n          channel.url === action.payload.url ? action.payload : channel)),\n      };\n    case actions.ON_CHANNEL_FROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = true;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.ON_CHANNEL_UNFROZEN: {\n      const channel = action.payload;\n      if (state.channelListQuery) {\n        if (filterChannelListParams(state.channelListQuery, channel, state.currentUserId)) {\n          return {\n            ...state,\n            allChannels: getChannelsWithUpsertedChannel(state.allChannels, channel),\n          };\n        }\n        const nextChannel = (channel.url === state.currentChannel?.url)\n          ? state.allChannels[state.allChannels[0].url === channel.url ? 1 : 0]\n          // if coming channel is first of channel list, current channel will be the next one\n          : state.currentChannel;\n        return {\n          ...state,\n          allChannels: state.allChannels.filter(({ url }) => url !== channel.url),\n          currentChannel: state.disableAutoSelect ? null : nextChannel,\n        };\n      }\n      return {\n        ...state,\n        allChannels: state.allChannels.map((ch) => {\n          if (ch.url === channel.url) {\n            // eslint-disable-next-line no-param-reassign\n            ch.isFrozen = false;\n            return ch;\n          }\n          return ch;\n        }),\n      };\n    }\n    case actions.CHANNEL_REPLACED_TO_TOP: {\n      return {\n        ...state,\n        allChannels: [\n          action.payload,\n          ...state.allChannels.filter((channel) => channel.url !== action.payload.url),\n        ],\n      };\n    }\n    case actions.CHANNEL_LIST_PARAMS_UPDATED:\n      return {\n        ...state,\n        currentUserId: action.payload.currentUserId,\n        channelListQuery: action.payload.channelListQuery,\n      };\n    default:\n      return state;\n  }\n}\n","import React, {\n  useState,\n  useEffect,\n  useContext,\n  useReducer,\n  useMemo,\n} from 'react';\nimport Sendbird from 'sendbird';\n\nimport { RenderUserProfileProps } from '../../../types';\n\nimport setupChannelList, {\n  pubSubHandler,\n  pubSubHandleRemover,\n} from '../utils';\nimport { uuidv4 } from '../../../utils/uuid';\nimport { noop } from '../../../utils/utils';\n\nimport * as channelListActions from '../dux/actionTypes';\n\nimport { UserProfileProvider } from '../../../lib/UserProfileContext';\nimport useSendbirdStateContext from '../../../hooks/useSendbirdStateContext';\nimport { CustomUseReducerDispatcher } from '../../../lib/SendbirdState';\nimport channelListReducers from '../dux/reducers';\nimport channelListInitialState from '../dux/initialState';\n\ninterface ApplicationUserListQuery {\n  limit?: number;\n  userIdsFilter?: Array<string>;\n  metaDataKeyFilter?: string;\n  metaDataValuesFilter?: Array<string>;\n}\n\ninterface GroupChannelListQuery {\n  limit?: number;\n  includeEmpty?: boolean;\n  order?: 'latest_last_message' | 'chronological' | 'channel_name_alphabetical' | 'metadata_value_alphabetical';\n  userIdsExactFilter?: Array<string>;\n  userIdsIncludeFilter?: Array<string>;\n  userIdsIncludeFilterQueryType?: 'AND' | 'OR';\n  nicknameContainsFilter?: string;\n  channelNameContainsFilter?: string;\n  customTypesFilter?: Array<string>;\n  customTypeStartsWithFilter?: string;\n  channelUrlsFilter?: Array<string>;\n  superChannelFilter?: 'all' | 'super' | 'nonsuper';\n  publicChannelFilter?: 'all' | 'public' | 'private';\n  metadataOrderKeyFilter?: string;\n  memberStateFilter?: 'all' | 'joined_only' | 'invited_only' | 'invited_by_friend' | 'invited_by_non_friend';\n  hiddenChannelFilter?: 'unhidden_only' | 'hidden_only' | 'hidden_allow_auto_unhide' | 'hidden_prevent_auto_unhide';\n  unreadChannelFilter?: 'all' | 'unread_message';\n  includeFrozen?: boolean;\n}\n\ninterface ChannelListQueries {\n  applicationUserListQuery?: ApplicationUserListQuery;\n  channelListQuery?: GroupChannelListQuery;\n}\n\nexport interface ChannelListProviderProps {\n  allowProfileEdit?: boolean;\n  onBeforeCreateChannel?(users: Array<string>): Sendbird.GroupChannelParams;\n  onThemeChange?(theme: string): void;\n  onProfileEditSuccess?(user: Sendbird.User): void;\n  onChannelSelect?(channel: Sendbird.GroupChannel): void;\n  sortChannelList?: (channels: Sendbird.GroupChannel[]) => Sendbird.GroupChannel[];\n  queries?: ChannelListQueries;\n  children?: React.ReactNode;\n  className?: string | string[];\n  renderUserProfile?: (props: RenderUserProfileProps) => React.ReactNode;\n  disableUserProfile?: boolean;\n  disableAutoSelect?: boolean;\n  typingChannels?: Array<Sendbird.GroupChannel>;\n  isTypingIndicatorEnabled?: boolean;\n  isMessageReceiptStatusEnabled?: boolean;\n}\n\nexport interface ChannelListProviderInterface extends ChannelListProviderProps {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: Sendbird.GroupChannel[];\n  currentChannel: Sendbird.GroupChannel;\n  showSettings: boolean;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  channelListDispatcher: CustomUseReducerDispatcher;\n  channelSource: Sendbird.GroupChannelListQuery;\n}\n\ninterface ChannelListStoreInterface {\n  initialized: boolean;\n  loading: boolean;\n  allChannels: Sendbird.GroupChannel[];\n  currentChannel: Sendbird.GroupChannel;\n  showSettings: boolean;\n  channelListQuery: GroupChannelListQuery;\n  currentUserId: string;\n  disableAutoSelect: boolean;\n}\n\nconst ChannelListContext = React.createContext<ChannelListProviderInterface | null>({\n  disableUserProfile: true,\n  allowProfileEdit: true,\n  onBeforeCreateChannel: null,\n  onThemeChange: null,\n  onProfileEditSuccess: null,\n  onChannelSelect: null,\n  queries: {},\n  className: null,\n  initialized: false,\n  loading: false,\n  allChannels: [],\n  currentChannel: null,\n  showSettings: false,\n  channelListQuery: {},\n  currentUserId: null,\n  channelListDispatcher: null,\n  channelSource: null,\n  typingChannels: [],\n});\n\nconst ChannelListProvider: React.FC<ChannelListProviderProps> = (props: ChannelListProviderProps) => {\n  // destruct props\n  const {\n    children,\n    className,\n    disableUserProfile,\n    allowProfileEdit,\n    queries,\n    onProfileEditSuccess,\n    onThemeChange,\n    onBeforeCreateChannel,\n    sortChannelList,\n    disableAutoSelect,\n    isTypingIndicatorEnabled = null,\n    isMessageReceiptStatusEnabled = null,\n  } = props;\n  const onChannelSelect = props?.onChannelSelect || noop;\n\n  // fetch store from <SendbirdProvider />\n  const globalStore = useSendbirdStateContext();\n  const { config, stores } = globalStore;\n  const { sdkStore } = stores;\n  const { pubSub, logger } = config;\n  const {\n    isTypingIndicatorEnabledOnChannelList,\n    isMessageReceiptStatusEnabledOnChannelList,\n  } = config;\n  const { sdk } = sdkStore;\n\n  // derive some variables\n  // enable if it is true atleast once(both are flase by default)\n  const userDefinedDisableUserProfile = disableUserProfile || config?.disableUserProfile;\n  const userDefinedRenderProfile = config?.renderUserProfile;\n  const enableEditProfile = allowProfileEdit || config?.allowProfileEdit;\n\n  const userFilledChannelListQuery = queries?.channelListQuery;\n  const userFilledApplicationUserListQuery = queries?.applicationUserListQuery;\n\n  const sdkIntialized = sdkStore?.initialized;\n\n  const [channelListStore, channelListDispatcher] = useReducer(\n    channelListReducers,\n    channelListInitialState,\n  ) as [ChannelListStoreInterface, CustomUseReducerDispatcher];\n  const { loading, currentChannel } = channelListStore;\n\n  const [channelSource, setChannelSource] = useState<Sendbird.GroupChannelListQuery | null>();\n  const [sdkChannelHandlerId, setSdkChannelHandlerId] = useState<string | null>(null);\n  const [typingHandlerId, setTypingHandlerId] = useState<string | null>(null);\n  const [typingChannels, setTypingChannels] = useState<Array<Sendbird.GroupChannel>>([]);\n\n  useEffect(() => {\n    const subscriber = pubSubHandler(pubSub, channelListDispatcher);\n    return () => {\n      pubSubHandleRemover(subscriber);\n    };\n  }, [sdkIntialized]);\n\n  useEffect(() => {\n    setSdkChannelHandlerId(uuidv4);\n    if (sdkIntialized) {\n      logger.info('ChannelList: Setup channelHandlers');\n      setupChannelList({\n        sdk,\n        sdkChannelHandlerId,\n        channelListDispatcher,\n        setChannelSource,\n        onChannelSelect,\n        userFilledChannelListQuery,\n        logger,\n        sortChannelList,\n        disableAutoSelect,\n      });\n    } else {\n      logger.info('ChannelList: Removing channelHandlers');\n      // remove previous channelHandlers\n      if (sdk && sdk?.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n      // remove channelSource\n      setChannelSource(null);\n      // cleanup\n      channelListDispatcher({\n        type: channelListActions.RESET_CHANNEL_LIST,\n        payload: null,\n      });\n    }\n    return () => {\n      logger.info('ChannelList: Removing channelHandlers');\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(sdkChannelHandlerId);\n      }\n    };\n  }, [sdkIntialized, userFilledChannelListQuery, sortChannelList]);\n\n  useEffect(() => {\n    if (sdk && sdk?.ChannelHandler) {\n      const handlerId = uuidv4()\n      const handler = new sdk.ChannelHandler()\n      handler.onTypingStatusUpdated = (channel) => {\n        const typingMemberCount = channel?.getTypingMembers()?.length\n        const channelList = typingChannels.filter(ch => ch.url !== channel.url)\n        if (typingMemberCount > 0) {\n          setTypingChannels([...channelList, channel])\n        } else {\n          setTypingChannels(channelList)\n        }\n      }\n      sdk.addChannelHandler(handlerId, handler)\n      setTypingHandlerId(handlerId)\n    }\n    return () => {\n      if (sdk && sdk.removeChannelHandler) {\n        sdk.removeChannelHandler(typingHandlerId)\n      }\n    }\n  }, [sdk?.currentUser?.userId]);\n\n  const queries_ = useMemo(() => {\n    return {\n      applicationUserListQuery: userFilledApplicationUserListQuery,\n      channelListQuery: userFilledChannelListQuery,\n    };\n  }, [\n    userFilledApplicationUserListQuery,\n    userFilledChannelListQuery,\n  ])\n\n  const { allChannels } = channelListStore;\n  const sortedChannels = (sortChannelList && typeof sortChannelList === 'function')\n    ? sortChannelList(allChannels)\n    : allChannels;\n\n  if (sortedChannels.length !== allChannels.length) {\n    const warning = `ChannelList: You have removed/added extra channels on sortChannelList\n      this could cause unexpected problems`;\n    // eslint-disable-next-line no-console\n    console.warn(warning, { before: allChannels, after: sortedChannels });\n    logger.warning(warning, { before: allChannels, after: sortedChannels });\n  }\n\n  useEffect(() => {\n    if (!sdk || !sdk.GroupChannel || !currentChannel || !currentChannel?.url) { return; }\n    sdk.GroupChannel.getChannel(currentChannel.url, (groupChannel) => {\n      if (groupChannel) {\n        onChannelSelect(groupChannel);\n      } else {\n        onChannelSelect(null);\n      }\n    });\n  }, [currentChannel?.url]);\n\n  return (\n    <ChannelListContext.Provider value={{\n      className,\n      disableUserProfile,\n      queries: queries_,\n      onProfileEditSuccess,\n      onThemeChange,\n      onBeforeCreateChannel,\n      onChannelSelect,\n      sortChannelList,\n      loading,\n      allowProfileEdit: enableEditProfile,\n      channelListDispatcher,\n      channelSource,\n      ...channelListStore,\n      allChannels: sortedChannels,\n      typingChannels,\n      isTypingIndicatorEnabled: (isTypingIndicatorEnabled !== null) ? isTypingIndicatorEnabled : isTypingIndicatorEnabledOnChannelList,\n      isMessageReceiptStatusEnabled: (isMessageReceiptStatusEnabled !== null) ? isMessageReceiptStatusEnabled : isMessageReceiptStatusEnabledOnChannelList,\n    }}>\n      <UserProfileProvider\n        disableUserProfile={userDefinedDisableUserProfile}\n        renderUserProfile={userDefinedRenderProfile}\n      >\n        <div className={`sendbird-channel-list ${className}`}>\n          {children}\n        </div>\n      </UserProfileProvider>\n    </ChannelListContext.Provider>\n  );\n};\n\nfunction useChannelListContext(): ChannelListProviderInterface {\n  const context: ChannelListProviderInterface = useContext(ChannelListContext);\n  return context;\n}\n\nconst useChannelList = useChannelListContext;\n\nexport {\n  ChannelListProvider,\n  // ChannelListContext,\n  // todo: rename all use{component}Context to use{component}\n  useChannelListContext,\n  useChannelList,\n};\n"],"names":["RESET_CHANNEL_LIST","CREATE_CHANNEL","LEAVE_CHANNEL_SUCCESS","SET_CURRENT_CHANNEL","SHOW_CHANNEL_SETTINGS","HIDE_CHANNEL_SETTINGS","FETCH_CHANNELS_START","FETCH_CHANNELS_SUCCESS","FETCH_CHANNELS_FAILURE","INIT_CHANNELS_START","INIT_CHANNELS_SUCCESS","INIT_CHANNELS_FAILURE","ON_USER_JOINED","ON_CHANNEL_DELETED","ON_LAST_MESSAGE_UPDATED","ON_USER_LEFT","ON_CHANNEL_CHANGED","ON_CHANNEL_ARCHIVED","ON_CHANNEL_FROZEN","ON_CHANNEL_UNFROZEN","ON_READ_RECEIPT_UPDATED","ON_DELIVERY_RECEIPT_UPDATED","CHANNEL_REPLACED_TO_TOP","CHANNEL_LIST_PARAMS_UPDATED","DELIVERY_RECIPT","createEventHandler","sdk","sdkChannelHandlerId","channelListDispatcher","logger","ChannelHandler","onChannelChanged","channel","info","type","channelActions","payload","onChannelDeleted","channelUrl","onUserJoined","lastMessage","onUserBanned","user","currentUser","userId","isMe","onUserLeft","leftUser","onReadStatus","onDeliveryReceiptUpdated","onMessageUpdated","message","isEqual","onChannelHidden","onChannelFrozen","onChannelUnfrozen","addChannelHandler","createChannelListQuery","userFilledChannelListQuery","channelListQuery","GroupChannel","createMyGroupChannelListQuery","includeEmpty","order","limit","Object","keys","forEach","key","setupChannelList","setChannelSource","onChannelSelect","sortChannelList","disableAutoSelect","console","warning","currentUserId","hasNext","next","response","error","swapParams","getErrorFirstCallback","channelList","err","sortedChannelList","canSetMarkAsDelivered","appInfo","premiumFeatureList","find","feature","c","idx","setTimeout","markAsDelivered","url","pubSubHandleRemover","subscriber","s","remove","pubSubHandler","pubSub","subScriber","Map","set","topics","subscribe","msg","updatedChannel","messageId","initialized","loading","allChannels","currentChannel","showSettings","reducer","state","action","actions","initialState","length","currentChannels","map","filteredChannels","filter","filterChannelListParams","getChannelsWithUpsertedChannel","ch","nextChannel","unreadMessageCount","currentUnreadCount","isFrozen","ChannelListContext","React","createContext","disableUserProfile","allowProfileEdit","onBeforeCreateChannel","onThemeChange","onProfileEditSuccess","queries","className","channelSource","typingChannels","ChannelListProvider","props","children","_b","isTypingIndicatorEnabled","_c","isMessageReceiptStatusEnabled","noop","globalStore","useSendbirdStateContext","config","stores","sdkStore","isTypingIndicatorEnabledOnChannelList","isMessageReceiptStatusEnabledOnChannelList","userDefinedDisableUserProfile","userDefinedRenderProfile","renderUserProfile","enableEditProfile","userFilledApplicationUserListQuery","applicationUserListQuery","sdkIntialized","_d","useReducer","channelListReducers","channelListInitialState","channelListStore","_e","useState","_f","setSdkChannelHandlerId","_g","typingHandlerId","setTypingHandlerId","_h","setTypingChannels","useEffect","uuidv4","removeChannelHandler","channelListActions","handlerId","handler","onTypingStatusUpdated","typingMemberCount","getTypingMembers","queries_","useMemo","sortedChannels","warn","before","after","getChannel","groupChannel","UserProfileProvider","useChannelListContext","context","useContext","useChannelList"],"mappings":";;;;;;;;;;;;;;;;AAAO,IAAMA,kBAAkB,GAAG,oBAA3B;AACA,IAAMC,cAAc,GAAG,gBAAvB;IAGMC,qBAAqB,GAAG;IAExBC,mBAAmB,GAAG;AAE5B,IAAMC,qBAAqB,GAAG,uBAA9B;AACA,IAAMC,qBAAqB,GAAG,uBAA9B;IAEMC,oBAAoB,GAAG;IACvBC,sBAAsB,GAAG;IACzBC,sBAAsB,GAAG;AAE/B,IAAMC,mBAAmB,GAAG,qBAA5B;AACA,IAAMC,qBAAqB,GAAG,uBAA9B;AACA,IAAMC,qBAAqB,GAAG,uBAA9B;AAIA,IAAMC,cAAc,GAAG,gBAAvB;AACA,IAAMC,kBAAkB,GAAG,oBAA3B;AACA,IAAMC,uBAAuB,GAAG,yBAAhC;AACA,IAAMC,YAAY,GAAG,cAArB;AACA,IAAMC,kBAAkB,GAAG,oBAA3B;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;AACA,IAAMC,iBAAiB,GAAG,mBAA1B;AACA,IAAMC,mBAAmB,GAAG,qBAA5B;AAEA,IAAMC,uBAAuB,GAAG,yBAAhC;AACA,IAAMC,2BAA2B,GAAG,6BAApC;AAEA,IAAMC,uBAAuB,GAAG,yBAAhC;AACA,IAAMC,2BAA2B,GAAG,6BAApC;;AC/BP,IAAMC,eAAe,GAAG,kBAAxB;;AAEA,IAAMC,kBAAkB,GAAG,SAArBA,kBAAqB,OAKrB;AAAA,MAJJC,GAII,QAJJA,GAII;AAAA,MAHJC,mBAGI,QAHJA,mBAGI;AAAA,MAFJC,qBAEI,QAFJA,qBAEI;AAAA,MADJC,MACI,QADJA,MACI;AACJ,MAAMC,cAAc,GAAG,IAAIJ,GAAG,CAACI,cAAR,EAAvB;;AAEAA,EAAAA,cAAc,CAACC,gBAAf,GAAkC,UAACC,OAAD,EAAa;AAC7CH,IAAAA,MAAM,CAACI,IAAP,CAAY,+BAAZ,EAA6CD,OAA7C;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,kBADc;AAEpBC,MAAAA,OAAO,EAAEJ;AAFW,KAAD,CAArB;AAID,GAND;;AAOAF,EAAAA,cAAc,CAACO,gBAAf,GAAkC,UAACC,UAAD,EAAgB;AAChDT,IAAAA,MAAM,CAACI,IAAP,CAAY,+BAAZ,EAA6CK,UAA7C;AACAV,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,kBADc;AAEpBC,MAAAA,OAAO,EAAEE;AAFW,KAAD,CAArB;AAID,GAND;;AAOAR,EAAAA,cAAc,CAACS,YAAf,GAA8B,UAACP,OAAD,EAAa;AACzCH,IAAAA,MAAM,CAACI,IAAP,CAAY,2BAAZ,EAAyCD,OAAzC;;AACA,QAAIA,OAAO,CAACQ,WAAZ,EAAyB;AACvBZ,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEC,cADc;AAEpBC,QAAAA,OAAO,EAAEJ;AAFW,OAAD,CAArB;AAID;AACF,GARD;;AASAF,EAAAA,cAAc,CAACW,YAAf,GAA8B,UAACT,OAAD,EAAUU,IAAV,EAAmB;AAC/C,QAAQC,WAAR,GAAwBjB,GAAxB,CAAQiB,WAAR;AACAd,IAAAA,MAAM,CAACI,IAAP,CAAY,gDAAZ,EAA8DD,OAA9D;;AACA,QAAIU,IAAI,CAACE,MAAL,KAAgBD,WAAW,CAACC,MAAhC,EAAwC;AACtChB,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEC,YADc;AAEpBC,QAAAA,OAAO,EAAE;AACPJ,UAAAA,OAAO,EAAPA,OADO;AAEPa,UAAAA,IAAI,EAAE;AAFC;AAFW,OAAD,CAArB;AAOD,KARD,MAQO;AACLjB,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEC,YADc;AAEpBC,QAAAA,OAAO,EAAE;AACPJ,UAAAA,OAAO,EAAPA,OADO;AAEPa,UAAAA,IAAI,EAAE;AAFC;AAFW,OAAD,CAArB;AAOD;AACF,GApBD;;AAqBAf,EAAAA,cAAc,CAACgB,UAAf,GAA4B,UAACd,OAAD,EAAUe,QAAV,EAAuB;AACjD,QAAQJ,WAAR,GAAwBjB,GAAxB,CAAQiB,WAAR;AACA,QAAME,IAAI,GAAIF,WAAW,CAACC,MAAZ,KAAuBG,QAAQ,CAACH,MAA9C;AACAf,IAAAA,MAAM,CAACI,IAAP,CAAY,yBAAZ,EAAuCD,OAAvC;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,YADc;AAEpBC,MAAAA,OAAO,EAAE;AACPJ,QAAAA,OAAO,EAAPA,OADO;AAEPa,QAAAA,IAAI,EAAJA;AAFO;AAFW,KAAD,CAArB;AAOD,GAXD;;AAaAf,EAAAA,cAAc,CAACkB,YAAf,GAA8B,UAAChB,OAAD,EAAa;AACzCH,IAAAA,MAAM,CAACI,IAAP,CAAY,2BAAZ,EAAyCD,OAAzC;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,uBADc;AAEpBC,MAAAA,OAAO,EAAEJ;AAFW,KAAD,CAArB;AAID,GAND;;AAQAF,EAAAA,cAAc,CAACmB,wBAAf,GAA0C,UAACjB,OAAD,EAAa;AACrDH,IAAAA,MAAM,CAACI,IAAP,CAAY,uCAAZ,EAAqDD,OAArD;;AACA,QAAIA,OAAO,CAACQ,WAAZ,EAAyB;AACvBZ,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEC,2BADc;AAEpBC,QAAAA,OAAO,EAAEJ;AAFW,OAAD,CAArB;AAID;AACF,GARD;;AAUAF,EAAAA,cAAc,CAACoB,gBAAf,GAAkC,UAAClB,OAAD,EAAUmB,OAAV,EAAsB;AACtD,QAAInB,OAAO,CAACQ,WAAR,CAAoBY,OAApB,CAA4BD,OAA5B,CAAJ,EAA0C;AACxCtB,MAAAA,MAAM,CAACI,IAAP,CAAY,+BAAZ,EAA6CD,OAA7C;AACAJ,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEC,uBADc;AAEpBC,QAAAA,OAAO,EAAEJ;AAFW,OAAD,CAArB;AAID;AACF,GARD;;AAUAF,EAAAA,cAAc,CAACuB,eAAf,GAAiC,UAACrB,OAAD,EAAa;AAC5CH,IAAAA,MAAM,CAACI,IAAP,CAAY,8BAAZ,EAA4CD,OAA5C;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,mBADc;AAEpBC,MAAAA,OAAO,EAAEJ;AAFW,KAAD,CAArB;AAID,GAND;;AAQAF,EAAAA,cAAc,CAACwB,eAAf,GAAiC,UAACtB,OAAD,EAAa;AAC5CH,IAAAA,MAAM,CAACI,IAAP,CAAY,8BAAZ,EAA4CD,OAA5C;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,iBADc;AAEpBC,MAAAA,OAAO,EAAEJ;AAFW,KAAD,CAArB;AAID,GAND;;AAQAF,EAAAA,cAAc,CAACyB,iBAAf,GAAmC,UAACvB,OAAD,EAAa;AAC9CH,IAAAA,MAAM,CAACI,IAAP,CAAY,gCAAZ,EAA8CD,OAA9C;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,mBADc;AAEpBC,MAAAA,OAAO,EAAEJ;AAFW,KAAD,CAArB;AAID,GAND;;AAQAH,EAAAA,MAAM,CAACI,IAAP,CAAY,mCAAZ;AACAP,EAAAA,GAAG,CAAC8B,iBAAJ,CAAsB7B,mBAAtB,EAA2CG,cAA3C;AACD,CAvHD;;AAyHA,IAAM2B,sBAAsB,GAAG,SAAzBA,sBAAyB,QAA8C;AAAA,MAA3C/B,GAA2C,SAA3CA,GAA2C;AAAA,oCAAtCgC,0BAAsC;AAAA,MAAtCA,0BAAsC,sCAAT,EAAS;AAC3E,MAAMC,gBAAgB,GAAGjC,GAAG,CAACkC,YAAJ,CAAiBC,6BAAjB,EAAzB;AACAF,EAAAA,gBAAgB,CAACG,YAAjB,GAAgC,KAAhC;AACAH,EAAAA,gBAAgB,CAACI,KAAjB,GAAyB,qBAAzB,CAH2E;;AAI3EJ,EAAAA,gBAAgB,CAACK,KAAjB,GAAyB,EAAzB,CAJ2E;;AAM3E,MAAIN,0BAAJ,EAAgC;AAC9BO,IAAAA,MAAM,CAACC,IAAP,CAAYR,0BAAZ,EAAwCS,OAAxC,CAAgD,UAACC,GAAD,EAAS;AACvDT,MAAAA,gBAAgB,CAACS,GAAD,CAAhB,GAAwBV,0BAA0B,CAACU,GAAD,CAAlD;AACD,KAFD;AAGD;;AAED,SAAOT,gBAAP;AACD,CAbD;AAeA;AACA;AACA;AACA;AACA;;;AACA,SAASU,gBAAT,QAUG;AAAA,MATD3C,GASC,SATDA,GASC;AAAA,MARDC,mBAQC,SARDA,mBAQC;AAAA,MAPDC,qBAOC,SAPDA,qBAOC;AAAA,MAND0C,gBAMC,SANDA,gBAMC;AAAA,MALDC,eAKC,SALDA,eAKC;AAAA,MAJDb,0BAIC,SAJDA,0BAIC;AAAA,MAHD7B,MAGC,SAHDA,MAGC;AAAA,MAFD2C,eAEC,SAFDA,eAEC;AAAA,MADDC,iBACC,SADDA,iBACC;;AACD,MAAI/C,GAAG,IAAIA,GAAG,CAACI,cAAf,EAA+B;AAC7BL,IAAAA,kBAAkB,CAAC;AACjBC,MAAAA,GAAG,EAAHA,GADiB;AAEjBE,MAAAA,qBAAqB,EAArBA,qBAFiB;AAGjBD,MAAAA,mBAAmB,EAAnBA,mBAHiB;AAIjBE,MAAAA,MAAM,EAANA;AAJiB,KAAD,CAAlB;AAMD,GAPD,MAOO;AACLA,IAAAA,MAAM,CAAC6C,OAAP,CAAeC,OAAf,CAAuB,4EAAvB,EAAqGjD,GAArG;AACD;;AAEDG,EAAAA,MAAM,CAACI,IAAP,CAAY,8BAAZ,EAA4C;AAAEyB,IAAAA,0BAA0B,EAA1BA;AAAF,GAA5C;AACA,MAAMC,gBAAgB,GAAGF,sBAAsB,CAAC;AAAE/B,IAAAA,GAAG,EAAHA,GAAF;AAAOgC,IAAAA,0BAA0B,EAA1BA;AAAP,GAAD,CAA/C;AACA7B,EAAAA,MAAM,CAACI,IAAP,CAAY,6BAAZ,EAA2C0B,gBAA3C;AAEAW,EAAAA,gBAAgB,CAACX,gBAAD,CAAhB;AAEA/B,EAAAA,qBAAqB,CAAC;AACpBM,IAAAA,IAAI,EAAEC;AADc,GAAD,CAArB;;AAIA,MAAIuB,0BAAJ,EAAgC;AAC9B7B,IAAAA,MAAM,CAACI,IAAP,CAAY,2CAAZ,EAAyD0B,gBAAzD;AACA/B,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,2BADc;AAEpBC,MAAAA,OAAO,EAAE;AACPuB,QAAAA,gBAAgB,EAAhBA,gBADO;AAEPiB,QAAAA,aAAa,EAAElD,GAAG,IAAIA,GAAG,CAACiB,WAAX,IAA0BjB,GAAG,CAACiB,WAAJ,CAAgBC;AAFlD;AAFW,KAAD,CAArB;AAOD;;AAEDf,EAAAA,MAAM,CAACI,IAAP,CAAY,iCAAZ;;AACA,MAAI0B,gBAAgB,CAACkB,OAArB,EAA8B;AAC5BlB,IAAAA,gBAAgB,CAACmB,IAAjB,CAAsB,UAACC,QAAD,EAAWC,KAAX,EAAqB;AAAA;;AACzC,UAAMC,UAAU,GAAGvD,GAAG,CAACwD,qBAAJ,EAAnB;AACA,UAAIC,WAAW,GAAGJ,QAAlB;AACA,UAAIK,GAAG,GAAGJ,KAAV;;AACA,UAAIC,UAAJ,EAAgB;AACdE,QAAAA,WAAW,GAAGH,KAAd;AACAI,QAAAA,GAAG,GAAGL,QAAN;AACD;;AACDlD,MAAAA,MAAM,CAACI,IAAP,CAAY,gCAAZ,EAA8CkD,WAA9C;;AACA,UAAIC,GAAJ,EAAS;AACPvD,QAAAA,MAAM,CAACmD,KAAP,CAAa,sCAAb,EAAqDI,GAArD;AACAxD,QAAAA,qBAAqB,CAAC;AACpBM,UAAAA,IAAI,EAAEC;AADc,SAAD,CAArB;AAGA;AACD,OAfwC;;;AAiBzCN,MAAAA,MAAM,CAACI,IAAP,CAAY,iCAAZ,EAA+CkD,WAAW,CAAC,CAAD,CAA1D;AACA,UAAIE,iBAAiB,GAAGF,WAAxB;;AACA,UAAIX,eAAe,IAAI,OAAOA,eAAP,KAA2B,UAAlD,EAA8D;AAC5Da,QAAAA,iBAAiB,GAAGb,eAAe,CAACW,WAAD,CAAnC;AACAtD,QAAAA,MAAM,CAACI,IAAP,CAAY,mCAAZ,EAAiDoD,iBAAjD;AACD;;AACD,UAAI,CAACZ,iBAAL,EAAwB;AACtBF,QAAAA,eAAe,CAACc,iBAAiB,CAAC,CAAD,CAAlB,CAAf;AACD;;AACDzD,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEC,qBADc;AAEpBC,QAAAA,OAAO,EAAE;AAAE+C,UAAAA,WAAW,EAAEE,iBAAf;AAAkCZ,UAAAA,iBAAiB,EAAjBA;AAAlC;AAFW,OAAD,CAArB;AAIA,UAAMa,qBAAqB,GAAG5D,GAAH,aAAGA,GAAH,uCAAGA,GAAG,CAAE6D,OAAR,0EAAG,aAAcC,kBAAjB,0DAAG,sBAC1BC,IAD0B,CACrB,UAACC,OAAD;AAAA,eAAcA,OAAO,KAAKlE,eAA1B;AAAA,OADqB,CAA9B;;AAGA,UAAI8D,qBAAJ,EAA2B;AAAA;;AACzBzD,QAAAA,MAAM,CAACI,IAAP,CAAY,2CAAZ,EADyB;;AAGzB,wBAAAkD,WAAW,UAAX,oDAAahB,OAAb,CAAqB,UAACwB,CAAD,EAAIC,GAAJ,EAAY;AAC/B;AACAC,UAAAA,UAAU,CAAC,YAAM;AACf;AACAnE,YAAAA,GAAG,SAAH,IAAAA,GAAG,WAAH,YAAAA,GAAG,CAAEoE,eAAL,CAAqBH,CAArB,aAAqBA,CAArB,uBAAqBA,CAAC,CAAEI,GAAxB;AACD,WAHS,EAGP,MAAMH,GAHC,CAAV;AAID,SAND;AAOD;AACF,KA5CD;AA6CD,GA9CD,MA8CO;AACL/D,IAAAA,MAAM,CAAC8C,OAAP,CAAe,0CAAf;AACD;AACF;;AAEM,IAAMqB,mBAAmB,GAAG,SAAtBA,mBAAsB,CAACC,UAAD,EAAgB;AACjDA,EAAAA,UAAU,CAAC9B,OAAX,CAAmB,UAAC+B,CAAD,EAAO;AACxB,QAAI;AACFA,MAAAA,CAAC,CAACC,MAAF;AACD,KAFD,CAEE,gBAAM;AAEP;AACF,GAND;AAOD,CARM;AAUA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,MAAD,EAASzE,qBAAT,EAAmC;AAC9D,MAAM0E,UAAU,GAAG,IAAIC,GAAJ,EAAnB;AACA,MAAI,CAACF,MAAL,EAAa,OAAOC,UAAP;AACbA,EAAAA,UAAU,CAACE,GAAX,CAAeC,qBAAf,EAAsCJ,MAAM,CAACK,SAAP,CAAiBD,qBAAjB,EAAwC,UAACE,GAAD,EAAS;AACrF,QAAQ3E,OAAR,GAAoB2E,GAApB,CAAQ3E,OAAR;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAE,gBADc;AAEpBE,MAAAA,OAAO,EAAEJ;AAFW,KAAD,CAArB;AAID,GANqC,CAAtC;AAQAsE,EAAAA,UAAU,CAACE,GAAX,CAAeC,0BAAf,EAA2CJ,MAAM,CAACK,SAAP,CAAiBD,0BAAjB,EAA6C,UAACE,GAAD,EAAS;AAAA;;AAC/F,QAAQ3E,OAAR,GAA6B2E,GAA7B,CAAQ3E,OAAR;AAAA,QAAiBmB,OAAjB,GAA6BwD,GAA7B,CAAiBxD,OAAjB;AACA,QAAMyD,cAAc,GAAG5E,OAAvB;;AACA,QAAI,CAAA4E,cAAc,SAAd,IAAAA,cAAc,WAAd,qCAAAA,cAAc,CAAEpE,WAAhB,gFAA6BqE,SAA7B,MAA2C1D,OAAO,CAAC0D,SAAvD,EAAkE;AAChED,MAAAA,cAAc,CAACpE,WAAf,GAA6BW,OAA7B;AACD;;AACD,QAAInB,OAAJ,EAAa;AACXJ,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEC,uBADc;AAEpBC,QAAAA,OAAO,EAAEwE;AAFW,OAAD,CAArB;AAID;AACF,GAZ0C,CAA3C;AAcAN,EAAAA,UAAU,CAACE,GAAX,CAAeC,oBAAf,EAAqCJ,MAAM,CAACK,SAAP,CAAiBD,oBAAjB,EAAuC,UAACE,GAAD,EAAS;AACnF,QAAQ3E,OAAR,GAAoB2E,GAApB,CAAQ3E,OAAR;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,qBADc;AAEpBC,MAAAA,OAAO,EAAEJ,OAAO,CAAC+D;AAFG,KAAD,CAArB;AAID,GANoC,CAArC;AAQAO,EAAAA,UAAU,CAACE,GAAX,CAAeC,yBAAf,EAA0CJ,MAAM,CAACK,SAAP,CAAiBD,yBAAjB,EAA4C,UAACE,GAAD,EAAS;AAC7F,QAAQ3E,OAAR,GAAoB2E,GAApB,CAAQ3E,OAAR;AACAJ,IAAAA,qBAAqB,CAAC;AACpBM,MAAAA,IAAI,EAAEC,uBADc;AAEpBC,MAAAA,OAAO,EAAEJ;AAFW,KAAD,CAArB;AAID,GANyC,CAA1C;AAQA,SAAOsE,UAAP;AACD,CA1CM;;AC3PP,8BAAe;AACb;AACAQ,EAAAA,WAAW,EAAE,KAFA;AAGbC,EAAAA,OAAO,EAAE,KAHI;AAIbC,EAAAA,WAAW,EAAE,EAJA;AAKbC,EAAAA,cAAc,EAAE,IALH;AAMbC,EAAAA,YAAY,EAAE,KAND;AAObvD,EAAAA,gBAAgB,EAAE,IAPL;AAQbiB,EAAAA,aAAa,EAAE,EARF;AASbH,EAAAA,iBAAiB,EAAE;AATN,CAAf;;ACIe,SAAS0C,OAAT,CAAiBC,KAAjB,EAAwBC,MAAxB,EAAgC;AAC7C,UAAQA,MAAM,CAACnF,IAAf;AACE,SAAKoF,mBAAL;AACE,mGACKF,KADL;AAEEL,QAAAA,OAAO,EAAE;AAFX;;AAIF,SAAKO,kBAAL;AACE,aAAOC,uBAAP;;AACF,SAAKD,qBAAL;AAAoC;AAClC,8BAA2CD,MAAM,CAACjF,OAAlD;AAAA,YAAQ+C,WAAR,mBAAQA,WAAR;AAAA,YAAqBV,iBAArB,mBAAqBA,iBAArB;AACA,qGACK2C,KADL;AAEEN,UAAAA,WAAW,EAAE,IAFf;AAGEC,UAAAA,OAAO,EAAE,KAHX;AAIEC,UAAAA,WAAW,EAAE7B,WAJf;AAKEV,UAAAA,iBAAiB,EAAjBA,iBALF;AAMEwC,UAAAA,cAAc,EACZ,CAACxC,iBAAD,IACGU,WADH,IAEGA,WAAW,CAACqC,MAFf,IAGGrC,WAAW,CAACqC,MAAZ,GAAqB,CAJV,GAMZrC,WAAW,CAAC,CAAD,CANC,GAOZ;AAbN;AAeD;;AACD,SAAKmC,sBAAL;AAAqC;AACnC,YAAMG,eAAe,GAAGL,KAAK,CAACJ,WAAN,CAAkBU,GAAlB,CAAsB,UAAC/B,CAAD;AAAA,iBAAOA,CAAC,CAACI,GAAT;AAAA,SAAtB,CAAxB;AACA,YAAM4B,gBAAgB,GAAGN,MAAM,CAACjF,OAAP,CAAewF,MAAf,CACvB;AAAA,cAAG7B,GAAH,QAAGA,GAAH;AAAA,iBAAa,CAAE0B,eAAe,CAAChC,IAAhB,CAAqB,UAACE,CAAD;AAAA,mBAAOA,CAAC,KAAKI,GAAb;AAAA,WAArB,CAAf;AAAA,SADuB,CAAzB;AAGA,qGACKqB,KADL;AAEEJ,UAAAA,WAAW,yDACNI,KAAK,CAACJ,WADA,gDAENW,gBAFM;AAFb;AAOD;;AACD,SAAKL,cAAL;AAA6B;AAC3B,YAAMtF,OAAO,GAAGqF,MAAM,CAACjF,OAAvB;;AACA,YAAIgF,KAAK,CAACzD,gBAAV,EAA4B;AAC1B,cAAIkE,6BAAuB,CAACT,KAAK,CAACzD,gBAAP,EAAyB3B,OAAzB,EAAkCoF,KAAK,CAACxC,aAAxC,CAA3B,EAAmF;AACjF,yGACKwC,KADL;AAEEJ,cAAAA,WAAW,EAAEc,oCAA8B,CAACV,KAAK,CAACJ,WAAP,EAAoBhF,OAApB;AAF7C;AAID;;AACD,uGACKoF,KADL;AAEEH,YAAAA,cAAc,EAAEjF;AAFlB;AAID;;AACD,qGACKoF,KADL;AAEEJ,UAAAA,WAAW,GAAGhF,OAAH,sDAAeoF,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB,UAACG,EAAD;AAAA,mBAAQA,EAAE,CAAChC,GAAH,KAAW/D,OAAO,CAAC+D,GAA3B;AAAA,WAAzB,CAAf,EAFb;AAGEkB,UAAAA,cAAc,EAAEjF;AAHlB;AAKD;;AACD,SAAKsF,mBAAL;AAAkC;AAAA;;AAChC,YAAMtF,QAAO,GAAGqF,MAAM,CAACjF,OAAvB;;AACA,YAAIgF,KAAK,CAACzD,gBAAV,EAA4B;AAC1B,cAAIkE,6BAAuB,CAACT,KAAK,CAACzD,gBAAP,EAAyB3B,QAAzB,EAAkCoF,KAAK,CAACxC,aAAxC,CAA3B,EAAmF;AACjF,yGACKwC,KADL;AAEEJ,cAAAA,WAAW,EAAEc,oCAA8B,CAACV,KAAK,CAACJ,WAAP,EAAoBhF,QAApB;AAF7C,eADiF;AAMlF;AACF;;AACD,YAAMgG,WAAW,GAAIhG,QAAO,CAAC+D,GAAR,+BAAgBqB,KAAK,CAACH,cAAtB,0DAAgB,sBAAsBlB,GAAtC,CAAD,GAChBqB,KAAK,CAACJ,WAAN,CAAkBI,KAAK,CAACJ,WAAN,CAAkB,CAAlB,EAAqBjB,GAArB,KAA6B/D,QAAO,CAAC+D,GAArC,GAA2C,CAA3C,GAA+C,CAAjE,CADgB,GAEhBqB,KAAK,CAACH,cAFV;AAGA,qGACKG,KADL;AAEEJ,UAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB;AAAA,gBAAG7B,GAAH,SAAGA,GAAH;AAAA,mBAAaA,GAAG,KAAK/D,QAAO,CAAC+D,GAA7B;AAAA,WAAzB,CAFf;AAGEkB,UAAAA,cAAc,EAAEG,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B,GAAiCuD;AAHnD;AAKD;;AACD,SAAKV,qBAAL;AACA,SAAKA,kBAAL;AAAiC;AAAA;;AAC/B,YAAMhF,UAAU,GAAG+E,MAAM,CAACjF,OAA1B;AACA,qGACKgF,KADL;AAEEH,UAAAA,cAAc,EAAG3E,UAAU,gCAAK8E,KAAK,CAACH,cAAX,2DAAK,uBAAsBlB,GAA3B,CAAX,GACZqB,KAAK,CAACJ,WAAN,CAAkB,CAAlB,CADY,GAEZI,KAAK,CAACH,cAJZ;AAKED,UAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB;AAAA,gBAAG7B,GAAH,SAAGA,GAAH;AAAA,mBAAaA,GAAG,KAAKzD,UAArB;AAAA,WAAzB;AALf;AAOD;;AACD,SAAKgF,YAAL;AAA2B;AAAA;;AACzB,+BAA0BD,MAAM,CAACjF,OAAjC;AAAA,YAAQJ,SAAR,oBAAQA,OAAR;AAAA,YAAiBa,IAAjB,oBAAiBA,IAAjB;;AACA,YAAIuE,KAAK,CAACzD,gBAAV,EAA4B;AAAA;;AAC1B,cAAIkE,6BAAuB,CAACT,KAAK,CAACzD,gBAAP,EAAyB3B,SAAzB,EAAkCoF,KAAK,CAACxC,aAAxC,CAA3B,EAAmF;AAAA;;AACjF,gBAAM+C,kBAAgB,GAAGG,oCAA8B,CAACV,KAAK,CAACJ,WAAP,EAAoBhF,SAApB,CAAvD;;AACA,gBAAMgG,aAAW,GAAInF,IAAI,IAAKb,SAAO,CAAC+D,GAAR,gCAAgBqB,KAAK,CAACH,cAAtB,2DAAgB,uBAAsBlB,GAAtC,CAAV,GAChB4B,kBAAgB,CAAC,CAAD,CADA,GAEhBP,KAAK,CAACH,cAFV;;AAGA,yGACKG,KADL;AAEEH,cAAAA,cAAc,EAAEG,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B,GAAiCuD,aAFnD;AAGEhB,cAAAA,WAAW,EAAEW;AAHf;AAKD;;AACD,cAAMK,aAAW,GAAIhG,SAAO,CAAC+D,GAAR,gCAAgBqB,KAAK,CAACH,cAAtB,2DAAgB,uBAAsBlB,GAAtC,CAAD,GAChBqB,KAAK,CAACJ,WAAN,CAAkB,CAAlB,CADgB,GAEhBI,KAAK,CAACH,cAFV;;AAGA,uGACKG,KADL;AAEEH,YAAAA,cAAc,EAAEG,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B,GAAiCuD,aAFnD;AAGEhB,YAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB;AAAA,kBAAG7B,GAAH,SAAGA,GAAH;AAAA,qBAAaA,GAAG,KAAK/D,SAAO,CAAC+D,GAA7B;AAAA,aAAzB;AAHf;AAKD;;AACD,YAAM4B,iBAAgB,GAAGP,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB,UAACjC,CAAD;AAAA,iBAAO,EAAEA,CAAC,CAACI,GAAF,KAAU/D,SAAO,CAAC+D,GAAlB,IAAyBlD,IAA3B,CAAP;AAAA,SAAzB,CAAzB;;AACA,YAAMmF,YAAW,GAAInF,IAAI,IAAKb,SAAO,CAAC+D,GAAR,gCAAgBqB,KAAK,CAACH,cAAtB,2DAAgB,uBAAsBlB,GAAtC,CAAV,GAChB4B,iBAAgB,CAAC,CAAD,CADA,GAEhBP,KAAK,CAACH,cAFV;;AAGA,qGACKG,KADL;AAEEH,UAAAA,cAAc,EAAEG,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B,GAAiCuD,YAFnD;AAGEhB,UAAAA,WAAW,EAAEW;AAHf;AAKD;;AACD,SAAKL,cAAL;AACA,SAAKA,kBAAL;AACA,SAAKA,uBAAL;AACA,SAAKA,2BAAL;AAA0C;AACxC,iCAA6BF,KAA7B,CAAQJ,WAAR;AAAA,YAAQA,WAAR,mCAAsB,EAAtB;AACA,YAAMhF,SAAO,GAAGqF,MAAM,CAACjF,OAAvB;AACA,YAAQ6F,kBAAR,GAA+BjG,SAA/B,CAAQiG,kBAAR;AACA,YAAI,CAACjG,SAAO,CAACQ,WAAb,EAA0B,OAAO4E,KAAP;;AAC1B,YAAIA,KAAK,CAACzD,gBAAV,EAA4B;AAAA;;AAC1B,cAAIkE,6BAAuB,CAACT,KAAK,CAACzD,gBAAP,EAAyB3B,SAAzB,EAAkCoF,KAAK,CAACxC,aAAxC,CAA3B,EAAmF;AACjF,yGACKwC,KADL;AAEEJ,cAAAA,WAAW,EAAEc,oCAA8B,CAACd,WAAD,EAAchF,SAAd;AAF7C;AAID;;AACD,cAAMgG,aAAW,GAAIhG,SAAO,CAAC+D,GAAR,gCAAgBqB,KAAK,CAACH,cAAtB,2DAAgB,uBAAsBlB,GAAtC,CAAD,GAChBqB,KAAK,CAACJ,WAAN,CAAkBI,KAAK,CAACJ,WAAN,CAAkB,CAAlB,EAAqBjB,GAArB,KAA6B/D,SAAO,CAAC+D,GAArC,GAA2C,CAA3C,GAA+C,CAAjE,CADgB;AAAA,YAGhBqB,KAAK,CAACH,cAHV;;AAIA,uGACKG,KADL;AAEEH,YAAAA,cAAc,EAAEG,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B,GAAiCuD,aAFnD;AAGEhB,YAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB;AAAA,kBAAG7B,GAAH,SAAGA,GAAH;AAAA,qBAAaA,GAAG,KAAK/D,SAAO,CAAC+D,GAA7B;AAAA,aAAzB;AAHf;AAKD,SArBuC;;;AAuBxC,YAAIkC,kBAAkB,KAAK,CAA3B,EAA8B;AAC5B,cAAMhB,cAAc,GAAGD,WAAW,CAACvB,IAAZ,CAAiB;AAAA,gBAAGM,GAAH,SAAGA,GAAH;AAAA,mBAAaA,GAAG,KAAK/D,SAAO,CAAC+D,GAA7B;AAAA,WAAjB,CAAvB;AACA,cAAMmC,kBAAkB,GAAGjB,cAAc,IAAIA,cAAc,CAACgB,kBAA5D;;AACA,cAAIC,kBAAkB,KAAK,CAA3B,EAA8B;AAC5B,yGACKd,KADL;AAEEJ,cAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBU,GAAlB,CAAsB,UAACK,EAAD;AAAA,uBAASA,EAAE,CAAChC,GAAH,KAAW/D,SAAO,CAAC+D,GAAnB,GAAyB/D,SAAzB,GAAmC+F,EAA5C;AAAA,eAAtB;AAFf;AAID;AACF;;AACD,qGACKX,KADL;AAEEJ,UAAAA,WAAW,GACThF,SADS,sDAENoF,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB;AAAA,gBAAG7B,GAAH,SAAGA,GAAH;AAAA,mBAAaA,GAAG,KAAKsB,MAAM,CAACjF,OAAP,CAAe2D,GAApC;AAAA,WAAzB,CAFM;AAFb;AAOD;;AACD,SAAKuB,mBAAL;AACE,mGACKF,KADL;AAEEH,QAAAA,cAAc,EAAEI,MAAM,CAACjF;AAFzB;;AAIF,SAAKkF,qBAAL;AACE,mGACKF,KADL;AAEEF,QAAAA,YAAY,EAAE;AAFhB;;AAIF,SAAKI,qBAAL;AACE,mGACKF,KADL;AAEEF,QAAAA,YAAY,EAAE;AAFhB;;AAIF,SAAKI,uBAAL;AACE,mGACKF,KADL;AAEEJ,QAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBU,GAAlB,CAAsB,UAAC1F,OAAD;AAAA,iBACjCA,OAAO,CAAC+D,GAAR,KAAgBsB,MAAM,CAACjF,OAAP,CAAe2D,GAA/B,GAAqCsB,MAAM,CAACjF,OAA5C,GAAsDJ,OADrB;AAAA,SAAtB;AAFf;;AAKF,SAAKsF,iBAAL;AAAgC;AAC9B,YAAMtF,SAAO,GAAGqF,MAAM,CAACjF,OAAvB;;AACA,YAAIgF,KAAK,CAACzD,gBAAV,EAA4B;AAAA;;AAC1B,cAAIkE,6BAAuB,CAACT,KAAK,CAACzD,gBAAP,EAAyB3B,SAAzB,EAAkCoF,KAAK,CAACxC,aAAxC,CAA3B,EAAmF;AACjF,yGACKwC,KADL;AAEEJ,cAAAA,WAAW,EAAEc,oCAA8B,CAACV,KAAK,CAACJ,WAAP,EAAoBhF,SAApB;AAF7C;AAID;;AACD,cAAMgG,aAAW,GAAIhG,SAAO,CAAC+D,GAAR,gCAAgBqB,KAAK,CAACH,cAAtB,2DAAgB,uBAAsBlB,GAAtC,CAAD,GAChBqB,KAAK,CAACJ,WAAN,CAAkBI,KAAK,CAACJ,WAAN,CAAkB,CAAlB,EAAqBjB,GAArB,KAA6B/D,SAAO,CAAC+D,GAArC,GAA2C,CAA3C,GAA+C,CAAjE,CADgB;AAAA,YAGhBqB,KAAK,CAACH,cAHV;;AAIA,uGACKG,KADL;AAEEJ,YAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB;AAAA,kBAAG7B,GAAH,SAAGA,GAAH;AAAA,qBAAaA,GAAG,KAAK/D,SAAO,CAAC+D,GAA7B;AAAA,aAAzB,CAFf;AAGEkB,YAAAA,cAAc,EAAEG,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B,GAAiCuD;AAHnD;AAKD;;AACD,qGACKZ,KADL;AAEEJ,UAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBU,GAAlB,CAAsB,UAACK,EAAD,EAAQ;AACzC,gBAAIA,EAAE,CAAChC,GAAH,KAAW/D,SAAO,CAAC+D,GAAvB,EAA4B;AAC1B;AACAgC,cAAAA,EAAE,CAACI,QAAH,GAAc,IAAd;AACA,qBAAOJ,EAAP;AACD;;AACD,mBAAOA,EAAP;AACD,WAPY;AAFf;AAWD;;AACD,SAAKT,mBAAL;AAAkC;AAChC,YAAMtF,SAAO,GAAGqF,MAAM,CAACjF,OAAvB;;AACA,YAAIgF,KAAK,CAACzD,gBAAV,EAA4B;AAAA;;AAC1B,cAAIkE,6BAAuB,CAACT,KAAK,CAACzD,gBAAP,EAAyB3B,SAAzB,EAAkCoF,KAAK,CAACxC,aAAxC,CAA3B,EAAmF;AACjF,yGACKwC,KADL;AAEEJ,cAAAA,WAAW,EAAEc,oCAA8B,CAACV,KAAK,CAACJ,WAAP,EAAoBhF,SAApB;AAF7C;AAID;;AACD,cAAMgG,aAAW,GAAIhG,SAAO,CAAC+D,GAAR,gCAAgBqB,KAAK,CAACH,cAAtB,2DAAgB,uBAAsBlB,GAAtC,CAAD,GAChBqB,KAAK,CAACJ,WAAN,CAAkBI,KAAK,CAACJ,WAAN,CAAkB,CAAlB,EAAqBjB,GAArB,KAA6B/D,SAAO,CAAC+D,GAArC,GAA2C,CAA3C,GAA+C,CAAjE,CADgB;AAAA,YAGhBqB,KAAK,CAACH,cAHV;;AAIA,uGACKG,KADL;AAEEJ,YAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB;AAAA,kBAAG7B,GAAH,SAAGA,GAAH;AAAA,qBAAaA,GAAG,KAAK/D,SAAO,CAAC+D,GAA7B;AAAA,aAAzB,CAFf;AAGEkB,YAAAA,cAAc,EAAEG,KAAK,CAAC3C,iBAAN,GAA0B,IAA1B,GAAiCuD;AAHnD;AAKD;;AACD,qGACKZ,KADL;AAEEJ,UAAAA,WAAW,EAAEI,KAAK,CAACJ,WAAN,CAAkBU,GAAlB,CAAsB,UAACK,EAAD,EAAQ;AACzC,gBAAIA,EAAE,CAAChC,GAAH,KAAW/D,SAAO,CAAC+D,GAAvB,EAA4B;AAC1B;AACAgC,cAAAA,EAAE,CAACI,QAAH,GAAc,KAAd;AACA,qBAAOJ,EAAP;AACD;;AACD,mBAAOA,EAAP;AACD,WAPY;AAFf;AAWD;;AACD,SAAKT,uBAAL;AAAsC;AACpC,qGACKF,KADL;AAEEJ,UAAAA,WAAW,GACTK,MAAM,CAACjF,OADE,sDAENgF,KAAK,CAACJ,WAAN,CAAkBY,MAAlB,CAAyB,UAAC5F,OAAD;AAAA,mBAAaA,OAAO,CAAC+D,GAAR,KAAgBsB,MAAM,CAACjF,OAAP,CAAe2D,GAA5C;AAAA,WAAzB,CAFM;AAFb;AAOD;;AACD,SAAKuB,2BAAL;AACE,mGACKF,KADL;AAEExC,QAAAA,aAAa,EAAEyC,MAAM,CAACjF,OAAP,CAAewC,aAFhC;AAGEjB,QAAAA,gBAAgB,EAAE0D,MAAM,CAACjF,OAAP,CAAeuB;AAHnC;;AAKF;AACE,aAAOyD,KAAP;AA1QJ;AA4QD;;AC7KD,IAAMgB,kBAAkB,gBAAGC,yBAAK,CAACC,aAAN,CAAyD;AAClFC,EAAAA,kBAAkB,EAAE,IAD8D;AAElFC,EAAAA,gBAAgB,EAAE,IAFgE;AAGlFC,EAAAA,qBAAqB,EAAE,IAH2D;AAIlFC,EAAAA,aAAa,EAAE,IAJmE;AAKlFC,EAAAA,oBAAoB,EAAE,IAL4D;AAMlFpE,EAAAA,eAAe,EAAE,IANiE;AAOlFqE,EAAAA,OAAO,EAAE,EAPyE;AAQlFC,EAAAA,SAAS,EAAE,IARuE;AASlF/B,EAAAA,WAAW,EAAE,KATqE;AAUlFC,EAAAA,OAAO,EAAE,KAVyE;AAWlFC,EAAAA,WAAW,EAAE,EAXqE;AAYlFC,EAAAA,cAAc,EAAE,IAZkE;AAalFC,EAAAA,YAAY,EAAE,KAboE;AAclFvD,EAAAA,gBAAgB,EAAE,EAdgE;AAelFiB,EAAAA,aAAa,EAAE,IAfmE;AAgBlFhD,EAAAA,qBAAqB,EAAE,IAhB2D;AAiBlFkH,EAAAA,aAAa,EAAE,IAjBmE;AAkBlFC,EAAAA,cAAc,EAAE;AAlBkE,CAAzD,CAA3B;;IAqBMC,mBAAmB,GAAuC,SAA1DA,mBAA0D,CAACC,KAAD;;;;AAG5D,MAAAC,QAAQ,GAYND,KAAK,SAZP;AAAA,MACAJ,SAAS,GAWPI,KAAK,UAZP;AAAA,MAEAV,kBAAkB,GAUhBU,KAAK,mBAZP;AAAA,MAGAT,gBAAgB,GASdS,KAAK,iBAZP;AAAA,MAIAL,OAAO,GAQLK,KAAK,QAZP;AAAA,MAKAN,oBAAoB,GAOlBM,KAAK,qBAZP;AAAA,MAMAP,aAAa,GAMXO,KAAK,cAZP;AAAA,MAOAR,qBAAqB,GAKnBQ,KAAK,sBAZP;AAAA,MAQAzE,eAAe,GAIbyE,KAAK,gBAZP;AAAA,MASAxE,iBAAiB,GAGfwE,KAAK,kBAZP;AAAA,MAUAE,KAEEF,KAAK,yBAZP;AAAA,MAUAG,wBAAwB,mBAAG,SAV3B;AAAA,MAWAC,KACEJ,KAAK,8BAZP;AAAA,MAWAK,6BAA6B,mBAAG,SAXhC;AAaF,MAAM/E,eAAe,GAAG,CAAA0E,KAAK,SAAL,IAAAA,KAAK,WAAL,SAAA,GAAAA,KAAK,CAAE1E,eAAP,KAA0BgF,UAAlD;;AAGA,MAAMC,WAAW,GAAGC,uBAAuB,EAA3C;AACQ,MAAAC,MAAM,GAAaF,WAAW,OAA9B;AAAA,MAAQG,MAAM,GAAKH,WAAW,OAA9B;AACA,MAAAI,QAAQ,GAAKD,MAAM,SAAnB;AACA,MAAAtD,MAAM,GAAaqD,MAAM,OAAzB;AAAA,MAAQ7H,MAAM,GAAK6H,MAAM,OAAzB;AAEN,MAAAG,qCAAqC,GAEnCH,MAAM,sCAFR;AAAA,MACAI,0CAA0C,GACxCJ,MAAM,2CAFR;AAGM,MAAAhI,GAAG,GAAKkI,QAAQ,IAAhB;AAGR;;AACA,MAAMG,6BAA6B,GAAGxB,kBAAkB,KAAImB,MAAM,SAAN,IAAAA,MAAM,WAAN,SAAA,GAAAA,MAAM,CAAEnB,kBAAZ,CAAxD;AACA,MAAMyB,wBAAwB,GAAGN,MAAM,SAAN,IAAAA,MAAM,WAAN,SAAA,GAAAA,MAAM,CAAEO,iBAAzC;AACA,MAAMC,iBAAiB,GAAG1B,gBAAgB,KAAIkB,MAAM,SAAN,IAAAA,MAAM,WAAN,SAAA,GAAAA,MAAM,CAAElB,gBAAZ,CAA1C;AAEA,MAAM9E,0BAA0B,GAAGkF,OAAO,SAAP,IAAAA,OAAO,WAAP,SAAA,GAAAA,OAAO,CAAEjF,gBAA5C;AACA,MAAMwG,kCAAkC,GAAGvB,OAAO,SAAP,IAAAA,OAAO,WAAP,SAAA,GAAAA,OAAO,CAAEwB,wBAApD;AAEA,MAAMC,aAAa,GAAGT,QAAQ,SAAR,IAAAA,QAAQ,WAAR,SAAA,GAAAA,QAAQ,CAAE9C,WAAhC;;AAEM,MAAAwD,KAA4CC,gBAAU,CAC1DC,OAD0D,EAE1DC,uBAF0D,CAAtD;AAAA,MAACC,gBAAgB,QAAjB;AAAA,MAAmB9I,qBAAqB,QAAxC;;AAIE,MAAAmF,OAAO,GAAqB2D,gBAAgB,QAA5C;AAAA,MAASzD,cAAc,GAAKyD,gBAAgB,eAA5C;;AAEF,MAAAC,KAAoCC,cAAQ,EAA5C;AAAA,MAAC9B,aAAa,QAAd;AAAA,MAAgBxE,gBAAgB,QAAhC;;AACA,MAAAuG,KAAgDD,cAAQ,CAAgB,IAAhB,CAAxD;AAAA,MAACjJ,mBAAmB,QAApB;AAAA,MAAsBmJ,sBAAsB,QAA5C;;AACA,MAAAC,KAAwCH,cAAQ,CAAgB,IAAhB,CAAhD;AAAA,MAACI,eAAe,QAAhB;AAAA,MAAkBC,kBAAkB,QAApC;;AACA,MAAAC,KAAsCN,cAAQ,CAA+B,EAA/B,CAA9C;AAAA,MAAC7B,cAAc,QAAf;AAAA,MAAiBoC,iBAAiB,QAAlC;;AAENC,EAAAA,eAAS,CAAC;AACR,QAAMnF,UAAU,GAAGG,aAAa,CAACC,MAAD,EAASzE,qBAAT,CAAhC;AACA,WAAO;AACLoE,MAAAA,mBAAmB,CAACC,UAAD,CAAnB;AACD,KAFD;AAGD,GALQ,EAKN,CAACoE,aAAD,CALM,CAAT;AAOAe,EAAAA,eAAS,CAAC;AACRN,IAAAA,sBAAsB,CAACO,WAAD,CAAtB;;AACA,QAAIhB,aAAJ,EAAmB;AACjBxI,MAAAA,MAAM,CAACI,IAAP,CAAY,oCAAZ;AACAoC,MAAAA,gBAAgB,CAAC;AACf3C,QAAAA,GAAG,KADY;AAEfC,QAAAA,mBAAmB,qBAFJ;AAGfC,QAAAA,qBAAqB,uBAHN;AAIf0C,QAAAA,gBAAgB,kBAJD;AAKfC,QAAAA,eAAe,iBALA;AAMfb,QAAAA,0BAA0B,4BANX;AAOf7B,QAAAA,MAAM,QAPS;AAQf2C,QAAAA,eAAe,iBARA;AASfC,QAAAA,iBAAiB;AATF,OAAD,CAAhB;AAWD,KAbD,MAaO;AACL5C,MAAAA,MAAM,CAACI,IAAP,CAAY,uCAAZ,EADK;;AAGL,UAAIP,GAAG,KAAIA,GAAG,SAAH,IAAAA,GAAG,WAAH,SAAA,GAAAA,GAAG,CAAE4J,oBAAT,CAAP,EAAsC;AACpC5J,QAAAA,GAAG,CAAC4J,oBAAJ,CAAyB3J,mBAAzB;AACD,OALI;;;AAOL2C,MAAAA,gBAAgB,CAAC,IAAD,CAAhB,CAPK;;AASL1C,MAAAA,qBAAqB,CAAC;AACpBM,QAAAA,IAAI,EAAEqJ,kBADc;AAEpBnJ,QAAAA,OAAO,EAAE;AAFW,OAAD,CAArB;AAID;;AACD,WAAO;AACLP,MAAAA,MAAM,CAACI,IAAP,CAAY,uCAAZ;;AACA,UAAIP,GAAG,IAAIA,GAAG,CAAC4J,oBAAf,EAAqC;AACnC5J,QAAAA,GAAG,CAAC4J,oBAAJ,CAAyB3J,mBAAzB;AACD;AACF,KALD;AAMD,GAnCQ,EAmCN,CAAC0I,aAAD,EAAgB3G,0BAAhB,EAA4Cc,eAA5C,CAnCM,CAAT;AAqCA4G,EAAAA,eAAS,CAAC;AACR,QAAI1J,GAAG,KAAIA,GAAG,SAAH,IAAAA,GAAG,WAAH,SAAA,GAAAA,GAAG,CAAEI,cAAT,CAAP,EAAgC;AAC9B,UAAM0J,SAAS,GAAGH,WAAM,EAAxB;AACA,UAAMI,OAAO,GAAG,IAAI/J,GAAG,CAACI,cAAR,EAAhB;;AACA2J,MAAAA,OAAO,CAACC,qBAAR,GAAgC,UAAC1J,OAAD;;;AAC9B,YAAM2J,iBAAiB,GAAG,MAAA3J,OAAO,SAAP,IAAAA,OAAO,WAAP,SAAA,GAAAA,OAAO,CAAE4J,gBAAT,EAAA,UAAA,iBAAA,SAAA,MAA6BpE,MAAvD;AACA,YAAMrC,WAAW,GAAG4D,cAAc,CAACnB,MAAf,CAAsB,UAAAG,EAAA;AAAM,iBAAAA,EAAE,CAAChC,GAAH,KAAW/D,OAAO,CAAC+D,GAAnB;AAAsB,SAAlD,CAApB;;AACA,YAAI4F,iBAAiB,GAAG,CAAxB,EAA2B;AACzBR,UAAAA,iBAAiB,qDAAKhG,qBAAanD,gBAAlB,CAAjB;AACD,SAFD,MAEO;AACLmJ,UAAAA,iBAAiB,CAAChG,WAAD,CAAjB;AACD;AACF,OARD;;AASAzD,MAAAA,GAAG,CAAC8B,iBAAJ,CAAsBgI,SAAtB,EAAiCC,OAAjC;AACAR,MAAAA,kBAAkB,CAACO,SAAD,CAAlB;AACD;;AACD,WAAO;AACL,UAAI9J,GAAG,IAAIA,GAAG,CAAC4J,oBAAf,EAAqC;AACnC5J,QAAAA,GAAG,CAAC4J,oBAAJ,CAAyBN,eAAzB;AACD;AACF,KAJD;AAKD,GArBQ,EAqBN,CAAC,MAAAtJ,GAAG,SAAH,IAAAA,GAAG,WAAH,SAAA,GAAAA,GAAG,CAAEiB,WAAL,UAAA,iBAAA,SAAA,MAAkBC,MAAnB,CArBM,CAAT;AAuBA,MAAMiJ,QAAQ,GAAGC,aAAO,CAAC;AACvB,WAAO;AACL1B,MAAAA,wBAAwB,EAAED,kCADrB;AAELxG,MAAAA,gBAAgB,EAAED;AAFb,KAAP;AAID,GALuB,EAKrB,CACDyG,kCADC,EAEDzG,0BAFC,CALqB,CAAxB;AAUQ,MAAAsD,WAAW,GAAK0D,gBAAgB,YAAhC;AACR,MAAMqB,cAAc,GAAIvH,eAAe,IAAI,OAAOA,eAAP,KAA2B,UAA/C,GACnBA,eAAe,CAACwC,WAAD,CADI,GAEnBA,WAFJ;;AAIA,MAAI+E,cAAc,CAACvE,MAAf,KAA0BR,WAAW,CAACQ,MAA1C,EAAkD;AAChD,QAAM7C,OAAO,GAAG,mHAAhB,CADgD;;AAIhDD,IAAAA,OAAO,CAACsH,IAAR,CAAarH,OAAb,EAAsB;AAAEsH,MAAAA,MAAM,EAAEjF,WAAV;AAAuBkF,MAAAA,KAAK,EAAEH;AAA9B,KAAtB;AACAlK,IAAAA,MAAM,CAAC8C,OAAP,CAAeA,OAAf,EAAwB;AAAEsH,MAAAA,MAAM,EAAEjF,WAAV;AAAuBkF,MAAAA,KAAK,EAAEH;AAA9B,KAAxB;AACD;;AAEDX,EAAAA,eAAS,CAAC;AACR,QAAI,CAAC1J,GAAD,IAAQ,CAACA,GAAG,CAACkC,YAAb,IAA6B,CAACqD,cAA9B,IAAgD,EAACA,cAAc,SAAd,IAAAA,cAAc,WAAd,SAAA,GAAAA,cAAc,CAAElB,GAAjB,CAApD,EAA0E;AAAE;AAAS;;AACrFrE,IAAAA,GAAG,CAACkC,YAAJ,CAAiBuI,UAAjB,CAA4BlF,cAAc,CAAClB,GAA3C,EAAgD,UAACqG,YAAD;AAC9C,UAAIA,YAAJ,EAAkB;AAChB7H,QAAAA,eAAe,CAAC6H,YAAD,CAAf;AACD,OAFD,MAEO;AACL7H,QAAAA,eAAe,CAAC,IAAD,CAAf;AACD;AACF,KAND;AAOD,GATQ,EASN,CAAC0C,cAAc,SAAd,IAAAA,cAAc,WAAd,SAAA,GAAAA,cAAc,CAAElB,GAAjB,CATM,CAAT;AAWA,sBACEsC,wCAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK;AAChCQ,MAAAA,SAAS;AACTN,MAAAA,kBAAkB;AAClBK,MAAAA,OAAO,EAAEiD;AACTlD,MAAAA,oBAAoB;AACpBD,MAAAA,aAAa;AACbD,MAAAA,qBAAqB;AACrBlE,MAAAA,eAAe;AACfC,MAAAA,eAAe;AACfuC,MAAAA,OAAO;AACPyB,MAAAA,gBAAgB,EAAE0B;AAClBtI,MAAAA,qBAAqB;AACrBkH,MAAAA,aAAa;OACV4B;AACH1D,MAAAA,WAAW,EAAE+E;AACbhD,MAAAA,cAAc;AACdK,MAAAA,wBAAwB,EAAGA,wBAAwB,KAAK,IAA9B,GAAsCA,wBAAtC,GAAiES;AAC3FP,MAAAA,6BAA6B,EAAGA,6BAA6B,KAAK,IAAnC,GAA2CA,6BAA3C,GAA2EQ;;AAjB5G,kBAmBEzB,wCAACgE,sCAAD;AACE,IAAA,kBAAkB,EAAEtC,6BADtB;AAEE,IAAA,iBAAiB,EAAEC;AAFrB,kBAIE3B;AAAK,IAAA,SAAS,EAAE,2BAAyBQ;AAAzC,KACGK,QADH,CAJF,CAnBF,CADF;AA8BD;;AAED,SAASoD,qBAAT;AACE,MAAMC,OAAO,GAAiCC,gBAAU,CAACpE,kBAAD,CAAxD;AACA,SAAOmE,OAAP;AACD;;IAEKE,cAAc,GAAGH;;;;;;;;;;;"}